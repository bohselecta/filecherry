'use strict';

var assert = require('assert');
var base = require('../src/base.js');
var utils = require('../src/utils.js');

const chunker = entry => entry.address;
const mapper = value => ({
  key: value,
  address: value
});
const validate = (node, check) => {
  assert.deepStrictEqual(node.entryList.entries.length, check.entries);
  assert.deepStrictEqual(node.closed, check.closed);
  assert.deepStrictEqual(node.distance, check.distance);
};
const entry = key => new base.Entry({ key });
const entries = [
  entry(0),
  entry(1),
  entry(2),
  entry(3),
  entry(4),
  entry(5),
  entry(6),
  entry(7),
  entry(8)
];
const entryListFixture = new base.EntryList({
  entries,
  closed: true
});
describe('base', () => {
  const opts = {
    LeafClass: base.Node,
    LeafEntryClass: base.Entry,
    BranchClass: base.Node,
    BranchEntryClass: base.Entry,
    chunker,
    compare: utils.simpleCompare
  };
  it('basic create', async () => {
    const list = [
      false,
      true,
      false
    ].map(mapper);
    const checks = [
      {
        entries: 2,
        closed: true,
        distance: 0
      },
      {
        entries: 1,
        closed: false,
        distance: 0
      },
      {
        entries: 2,
        closed: false,
        distance: 1
      }
    ];
    for await (const node of base.create({
        list,
        ...opts
      })) {
      validate(node, checks.shift());
    }
    assert.deepStrictEqual(checks.length, 0);
  });
  it('EntryList must have closed argument', () => {
    let threw = true;
    try {
      new base.EntryList({});
      threw = false;
    } catch (e) {
      if (e.message !== 'Missing required argument "closed"') {
        throw e;
      }
    }
    assert.deepStrictEqual(threw, true);
  });
  it('entryList find', () => {
    const [i, entry] = entryListFixture.find(1, utils.simpleCompare);
    assert.deepStrictEqual(i, 1);
    assert.deepStrictEqual(entry.key, 1);
  });
  it('entryList findMany', () => {
    const results = entryListFixture.findMany([
      1,
      3,
      5
    ], utils.simpleCompare);
    const mapper = key => [
      key,
      results.get(key)[0].key,
      ...results.get(key)[1]
    ];
    const comp = [...results.keys()].sort(utils.simpleCompare).map(mapper);
    assert.deepStrictEqual(comp, [
      [
        1,
        1,
        1
      ],
      [
        3,
        3,
        3
      ],
      [
        5,
        5,
        5
      ]
    ]);
  });
  it('entryList findRange', () => {
    const results = entryListFixture.findRange(2, 5, utils.simpleCompare);
    assert.deepStrictEqual(results.first, 2);
    assert.deepStrictEqual(results.last, 4);
    let i = 2;
    while (results.entries.length) {
      const entry = results.entries.shift();
      assert.deepStrictEqual(entry.key, i);
      i++;
    }
    assert.deepStrictEqual(i, 5);
  });
});
