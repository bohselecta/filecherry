'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var map = require('./map.js');
var utils = require('./utils.js');

const compare = utils.simpleCompare;
const getLength = async node => {
  while (!node.isLeaf) {
    const {entries} = node.entryList;
    const last = entries[entries.length - 1];
    node = await node.getNode(await last.address);
  }
  const {entries} = node.entryList;
  const last = entries[entries.length - 1];
  return last.key + 1;
};
class SparseArrayLeaf extends map.MapLeaf {
  bulk(bulk, opts = {}, isRoot = true) {
    return super.bulk(bulk, {
      ...classes,
      ...opts
    }, isRoot);
  }
  getLength() {
    return getLength(this);
  }
}
class SparseArrayBranch extends map.MapBranch {
  bulk(bulk, opts = {}, isRoot = true) {
    return super.bulk(bulk, {
      ...classes,
      ...opts
    }, isRoot);
  }
  getLength() {
    return getLength(this);
  }
}
const LeafClass = SparseArrayLeaf;
const BranchClass = SparseArrayBranch;
const classes = {
  LeafClass,
  BranchClass,
  LeafEntryClass: map.MapLeafEntry,
  BranchEntryClass: map.MapBranchEntry
};
const defaults = {
  ...classes,
  compare
};
const create = opts => {
  opts = {
    ...defaults,
    ...opts
  };
  return map.create(opts);
};
const load = opts => {
  opts = {
    ...defaults,
    ...opts
  };
  return map.load(opts);
};

exports.SparseArrayBranch = SparseArrayBranch;
exports.SparseArrayLeaf = SparseArrayLeaf;
exports.create = create;
exports.load = load;
