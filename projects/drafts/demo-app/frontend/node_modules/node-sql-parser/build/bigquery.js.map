{"version":3,"sources":["/Users/taozhi/learning/node-sql-parser/webpack/bootstrap","/Users/taozhi/learning/node-sql-parser/pegjs/bigquery.pegjs","/Users/taozhi/learning/node-sql-parser/external \"big-integer\"","/Users/taozhi/learning/node-sql-parser/src/parser.single.js","/Users/taozhi/learning/node-sql-parser/src/util.js","/Users/taozhi/learning/node-sql-parser/src/window.js","/Users/taozhi/learning/node-sql-parser/src/over.js","/Users/taozhi/learning/node-sql-parser/src/func.js","/Users/taozhi/learning/node-sql-parser/src/limit.js","/Users/taozhi/learning/node-sql-parser/src/with.js","/Users/taozhi/learning/node-sql-parser/src/update.js","/Users/taozhi/learning/node-sql-parser/src/insert.js","/Users/taozhi/learning/node-sql-parser/src/tables.js","/Users/taozhi/learning/node-sql-parser/src/select.js","/Users/taozhi/learning/node-sql-parser/src/show.js","/Users/taozhi/learning/node-sql-parser/src/array-struct.js","/Users/taozhi/learning/node-sql-parser/src/expr.js","/Users/taozhi/learning/node-sql-parser/src/aggregation.js","/Users/taozhi/learning/node-sql-parser/src/assign.js","/Users/taozhi/learning/node-sql-parser/src/binary.js","/Users/taozhi/learning/node-sql-parser/src/case.js","/Users/taozhi/learning/node-sql-parser/src/interval.js","/Users/taozhi/learning/node-sql-parser/src/index-definition.js","/Users/taozhi/learning/node-sql-parser/src/constrain.js","/Users/taozhi/learning/node-sql-parser/src/column.js","/Users/taozhi/learning/node-sql-parser/src/create.js","/Users/taozhi/learning/node-sql-parser/src/alter.js","/Users/taozhi/learning/node-sql-parser/src/command.js","/Users/taozhi/learning/node-sql-parser/src/union.js","/Users/taozhi/learning/node-sql-parser/src/sqlite.js","/Users/taozhi/learning/node-sql-parser/src/delete.js","/Users/taozhi/learning/node-sql-parser/src/sql.js","/Users/taozhi/learning/node-sql-parser/src/parser.js","/Users/taozhi/learning/node-sql-parser/index.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","BigInt","peg$SyntaxError","message","expected","found","location","this","Error","captureStackTrace","child","parent","ctor","constructor","peg$subclass","buildMessage","DESCRIBE_EXPECTATION_FNS","literal","expectation","literalEscape","text","escapedParts","parts","length","Array","classEscape","inverted","any","end","other","description","hex","ch","charCodeAt","toString","toUpperCase","replace","j","descriptions","type","sort","slice","join","describeExpected","describeFound","SyntaxError","parse","input","options","peg$result","peg$FAILED","peg$startRuleFunctions","start","peg$parsestart","peg$startRuleFunction","peg$c3","peg$literalExpectation","peg$c5","peg$c10","peg$c12","peg$c17","head","tail","createList","peg$c21","peg$c23","peg$c25","peg$c27","peg$c32","peg$c41","peg$c46","unshift","forEach","tableInfo","table","as","tableAlias","columnList","columns","columnListTableAlias","clear","col","add","refreshColumnList","peg$c68","peg$c70","peg$c72","peg$c74","peg$c76","peg$c79","peg$c81","peg$c94","createBinaryExprChain","peg$c96","peg$c98","peg$c102","nk","peg$c105","peg$c107","peg$c109","peg$c111","peg$c113","peg$c115","peg$c123","peg$c125","peg$c128","peg$c130","peg$c132","peg$c141","reservedMap","peg$c145","peg$c146","peg$c147","peg$classExpectation","peg$c148","chars","peg$c150","peg$c151","peg$c152","peg$c154","peg$c155","peg$c156","peg$c160","peg$c161","peg$c162","peg$c163","peg$c164","peg$c165","peg$c166","peg$c168","peg$c172","peg$c182","bc","args","over","peg$c186","peg$c188","peg$c190","peg$c192","peg$c194","peg$c196","peg$c198","peg$c200","peg$c202","peg$c204","peg$c206","peg$c208","peg$c210","peg$c212","peg$c214","peg$c216","peg$c218","peg$c220","peg$c222","peg$c224","peg$c226","peg$c238","peg$c241","ca","toLowerCase","peg$c242","peg$c243","peg$c244","peg$c245","peg$c247","peg$c250","peg$c253","peg$c256","peg$c259","peg$c262","peg$c265","peg$c268","peg$c271","peg$c274","peg$c277","peg$c278","peg$c279","peg$c288","peg$c292","peg$c293","peg$c294","peg$c295","peg$c296","peg$c297","peg$c298","peg$c299","peg$c302","peg$c308","peg$c312","peg$c319","peg$c329","peg$c334","peg$c351","peg$c353","peg$c355","peg$c357","peg$c359","peg$c361","peg$c363","peg$c365","peg$c367","peg$c369","peg$c371","peg$c376","peg$c378","peg$c380","peg$c382","peg$c384","peg$c386","peg$c388","peg$c390","peg$c392","peg$c395","peg$c397","peg$c400","peg$c403","peg$c406","peg$c409","peg$c412","peg$c415","peg$c418","peg$c421","peg$c424","peg$c427","peg$c430","peg$c433","peg$c436","peg$c439","peg$c442","peg$c445","peg$c448","peg$c451","peg$c457","peg$c459","peg$c461","peg$c463","peg$c465","peg$c467","peg$c469","peg$c472","peg$c475","peg$c481","peg$c487","peg$c490","peg$c493","peg$c496","peg$c499","peg$c505","peg$c514","peg$c517","peg$c538","peg$c544","peg$c547","peg$c550","peg$c553","peg$c562","peg$c568","peg$c577","peg$c580","peg$c625","peg$c627","peg$c629","peg$c631","peg$c633","peg$c635","peg$c637","peg$c639","peg$c641","peg$c643","peg$c644","peg$c645","peg$c646","peg$c650","dataType","peg$c652","a","definition","anglebracket","peg$currPos","peg$posDetailsCache","line","column","peg$maxFailPos","peg$maxFailExpected","peg$silentFails","startRule","ignoreCase","peg$computePosDetails","pos","details","peg$computeLocation","startPos","endPos","startPosDetails","endPosDetails","offset","peg$fail","push","peg$buildStructuredError","s0","s2","peg$parse__","s1","s3","s4","s5","s6","s7","peg$parsequery_statement","peg$parseSEMICOLON","cur","ast","tableList","from","peg$c1","peg$parsemultiple_stmt","s9","s8","peg$parseKW_WITH","peg$parsecte_definition","peg$parseCOMMA","peg$parsewith_clause","peg$parseunion_stmt","peg$parseorder_by_clause","peg$parselimit_clause","cte","with","select","orderby","limit","parentheses","peg$parsequery_expr","peg$parseselect_stmt","peg$parseset_op","substr","peg$parseident_start","peg$parseKW_UNION","peg$parseKW_ALL","peg$parseKW_DISTINCT","u","peg$c13","peg$parseunion_stmt_nake","_next","union","peg$c15","s11","s13","s15","s17","s19","s21","s23","peg$parseKW_SELECT","peg$parse___","peg$parseKW_AS","peg$parseKW_STRUCT","peg$parseKW_VALUE","k","peg$parsestruct_value","peg$parsecolumn_clause","peg$parseKW_FROM","peg$parseLPAREN","peg$parseexpr","peg$parseRPAREN","peg$parsealias_clause","peg$parseKW_OFFSET","keyword","peg$parsewith_offset","expr","with_offset","peg$parsetable_base","peg$parsetable_ref","peg$parsetable_ref_list","peg$parsefrom_clause","peg$parsefor_sys_time_as_of","peg$parseKW_WHERE","peg$parseor_and_where_expr","peg$parsewhere_clause","peg$parseKW_GROUP","peg$parseKW_BY","peg$parseexpr_list","peg$parsegroup_by_clause","peg$parseKW_HAVING","peg$parsehaving_clause","peg$parseKW_WINDOW","peg$parsenamed_window_expr","peg$parsenamed_window_expr_list","peg$parsewindow_clause","sv","f","fs","w","g","h","win","isArray","info","db","as_struct_val","distinct","for_sys_time_as_of","where","groupby","having","window","peg$c19","peg$parseselect_stmt_nake","parentheses_symbol","peg$parseliteral_string","peg$parseident_name","stmt","peg$parseSTAR","peg$parsecolumns_list","expr_list","star","peg$parsecolumn_list_item","peg$parsecolumn_offset_expr","peg$parseLBRAKE","peg$parseKW_ORDINAL","peg$parseliteral_numeric","peg$parseRBRAKE","peg$parseident","peg$parseDOT","tbl","pro","mid","suffix","peg$c37","peg$parseexpr_alias","JSON","stringify","peg$c143","peg$parsequoted_ident","peg$parsealias_ident","s10","s12","s14","peg$parsejoin_op","peg$parseKW_USING","op","using","peg$parseon_clause","on","peg$c49","alias","peg$c50","peg$parsetable_join","peg$parsetable_name","peg$c52","peg$parseKW_LEFT","peg$parseKW_OUTER","peg$parseKW_JOIN","peg$parseKW_RIGHT","peg$parseKW_FULL","peg$parseKW_CROSS","peg$parseKW_INNER","peg$c57","project","dt","obj","peg$c58","peg$c59","peg$parseKW_ON","peg$parseas_window_specification","as_window_specification","peg$parsepartition_by_clause","peg$parseKW_BETWEEN","peg$parseKW_AND","e","peg$parsewindow_frame_clause","partitionby","window_frame_clause","peg$parsewindow_specification","window_specification","peg$parseKW_PARTITION","peg$parseKW_ORDER","peg$parseorder_by_element","peg$parseorder_by_list","peg$parseKW_DESC","peg$parseKW_ASC","peg$c84","peg$parsenumber_or_param","peg$parseparam","peg$parseKW_LIMIT","i1","res","seperator","peg$c85","el","peg$c86","peg$parsestruct_type","peg$parsestruct_expr","peg$parseprimary","peg$parseLOGIC_OPERATOR","peg$parselogic_operator_expr","peg$parseand_expr","peg$parseKW_OR","peg$parseor_expr","peg$parseadditive_operator","createUnaryExpr","peg$parseunary_expr","array_path","peg$parsearray_type","peg$parseKW_ARRAY","peg$parseliteral","peg$parseliteral_list","map","peg$c88","peg$parseparentheses_expr","peg$parseparentheses_list_expr","peg$c89","peg$parsearray_expr","result","createBinaryExpr","peg$c93","peg$parsenot_expr","peg$parsecomparison_expr","peg$parseKW_NOT","peg$parseKW_EXISTS","peg$parseexists_op","peg$parseexists_expr","left","rh","peg$parseadditive_expr","peg$parsearithmetic_comparison_operator","peg$parsearithmetic_op_right","peg$parsein_op","right","peg$c121","peg$parsein_op_right","peg$parsebetween_or_not_between_op","peg$parsebetween_op_right","peg$parseKW_IS","peg$c117","peg$parseis_op_right","peg$parseKW_LIKE","peg$parselike_op","peg$parselike_op_right","peg$parsecomparison_op_right","peg$parsecolumn_ref","peg$parseKW_IN","peg$parsemultiplicative_expr","peg$parsemultiplicative_operator","list","peg$parseKW_CAST","peg$parsedata_type","symbol","target","peg$parseKW_DECIMAL","peg$parseint","precision","peg$c230","scale","peg$c231","peg$parseKW_SIGNED","peg$parseKW_UNSIGNED","peg$parsesignedness","peg$parseKW_INTEGER","peg$c232","peg$parsecast_expr","peg$parseKW_COUNT","peg$parsestar_expr","or","peg$c180","peg$parsecount_arg","peg$parseover_partition","peg$parseaggr_fun_count","peg$parseKW_SUM","peg$parseKW_MAX","peg$parseKW_MIN","peg$parseKW_AVG","peg$parseKW_SUM_MAX_MIN_AVG","peg$parseaggr_fun_smma","peg$parseaggr_func","peg$parseKW_EXTRACT","peg$parseextract_filed","peg$parseKW_TIMESTAMP","peg$parseKW_INTERVAL","peg$parseKW_TIME","peg$parseKW_DATE","kw","field","cast_type","source","peg$c228","peg$parseextract_func","peg$c184","peg$parseproc_func_name","peg$parseKW_CURRENT_DATE","peg$parseKW_CURRENT_TIME","peg$parseKW_CURRENT_TIMESTAMP","peg$parsescalar_func","peg$parseon_update_current_timestamp","up","peg$c183","peg$parsefunc_call","peg$parseKW_CASE","peg$parsecase_when_then","peg$parsecase_else","peg$parseKW_END","condition_list","otherwise","peg$c136","peg$parsecase_expr","peg$parseKW_UNIT_YEAR","peg$parseKW_UNIT_MONTH","peg$parseKW_UNIT_DAY","peg$parseKW_UNIT_HOUR","peg$parseKW_UNIT_MINUTE","peg$parseKW_UNIT_SECOND","peg$parseinterval_unit","unit","peg$parseinterval_expr","peg$parseKW_WHEN","peg$parseKW_THEN","cond","peg$parseKW_ELSE","peg$parsecolumn_name","peg$parsecolumn_without_kw","peg$parsecolumn","peg$c140","test","charAt","peg$parsedouble_quoted_ident","peg$parsesingle_quoted_ident","peg$parsebackticks_quoted_ident","peg$parsecolumn_part","peg$parseident_part","peg$c174","peg$parseKW_OVER","peg$parseKW_TRUE","peg$parseKW_FALSE","peg$parseliteral_bool","peg$parseKW_NULL","peg$parseliteral_null","peg$parseKW_DATETIME","peg$parsesingle_char","peg$parsesingle_quote_char","peg$parseliteral_datetime","peg$c240","peg$parseescape_char","h1","h2","h3","h4","peg$parsehexDigit","String","fromCharCode","parseInt","peg$parsefrac","peg$parseexp","int_","frac","numStr","isBigInt","parseFloat","peg$c282","exp","peg$c283","peg$c284","peg$parsenumber","peg$parsedigits","peg$parsedigit","sign","peg$parsee","peg$parseLANGLE","peg$parseRANGLE","peg$parseOPERATOR_CONCATENATION","peg$parseOPERATOR_AND","peg$parsewhitespace","peg$parsecomment","peg$parsechar","peg$parseblock_comment","peg$parseEOL","peg$parseline_comment","peg$parsepound_sign_comment","peg$parseEOF","peg$parsedata_type_list","peg$parsedata_type_alias","DATA_TYPES","field_name","field_type","peg$c649","peg$parseKW_STRING","peg$parsecharacter_string_type","peg$parseKW_NUMERIC","peg$parseKW_INT_64","peg$parseKW_FLOAT_64","peg$parsenumeric_type","peg$parsedatetime_type","peg$parseKW_BYTES","peg$parseKW_BOOL","peg$parseKW_GEOGRAPHY","peg$parsebool_byte_geography_type","operator","numberStr","previousMaxSafe","Number","MAX_SAFE_INTEGER","po","queryTableAlias","tableName","newColumnsList","Set","keys","columnInfo","split","require","PARSER_NAME","DEFAULT_OPT","database","parserOpt","commonOptionConnector","action","opt","connector","str","createValueExpr","escape","getParserOpt","setParserOpt","topToSQL","percent","prefix","columnIdentifierToSql","ident","identifierToSql","isDual","commonTypeValue","toUpper","val","hasVal","literalToSQL","collate","replaceParams","params","replaceParamsInner","filter","onPartitionsToSQL","partitions","partition","arrayStructTypeToSQL","dataTypeUpper","commentToSQL","comment","triggerEventToSQL","events","event","kwArgs","columnRefToSQL","returningToSQL","returning","commonKeywordArgsToSQL","autoIncreatementToSQL","autoIncreatement","seed","increment","columnOrderListToSQL","columnOrderList","columnOrderToSQL","asWindowSpecToSQL","asWindowSpec","windowSpec","windowFrame","orderOrPartitionByToSQL","windowSpecificationToSQL","namedWindowExprToSQL","namedWindowExpr","overToSQL","windowSQL","onUpdate","exprToSQL","order","castToSQL","expression","symbolChar","funcToSQL","collateStr","overStr","composePrefixValSuffix","limitToSQL","fetch","limitOffsetToSQL","withToSQL","withExpr","isRecursive","recursive","withExprStr","setToSQL","sets","clauses","set","setItem","valuesToSQL","values","selectToSQL","partitionToSQL","partitionArr","insertToSQL","onDuplicateUpdate","on_duplicate_update","duplicateSet","tablesToSQL","tableToSQL","schema","schemaStr","tables","unnestExpr","withOffset","unnestToSQL","baseTable","joinExpr","tableOptionToSQL","tableOption","sql","asStructVal","forSystem","forUpdate","for_update","top","windowInfo","withInfo","columnsToSQL","getExprListSQL","showToSQL","showExpr","showEventExpr","inClause","showCharacterSetExpr","showLikeAndWhereToSQL","showGrantsForExpr","forExpr","user","host","role_list","userAndHost","role","showGrantsForUser","arrayStructValueToSQL","exprList","arrayPath","brackets","arrayExprListToSQL","arrayStructExprToSQL","exprToSQLConvertFn","alter","alterExprToSQL","aggr_func","within_group_orderby","fnName","separator","withinGroup","window_func","consider_nulls","argsList","isConsidernulls","isConsiderNullsInArgs","constructArgsList","assign","leftVar","rightVal","binary_expr","rstr","isBetween","case","conditions","len","cast","column_ref","extract","castType","function","interval","intervalExpr","show","struct","namedWindowExprInfo","exprOrigin","Reflect","deleteProperty","expressions","upperPrefix","indexTypeToSQL","indexType","indexOptionToSQL","indexOpt","upperType","indexOptArray","shift","indexOptionListToSQL","indexOptList","indexTypeAndOptionToSQL","indexDefinition","constraintType","constraint_type","index_type","index_options","indexOptions","definitionSQL","constraintDefinitionToSQL","constraintDefinition","constraint","enforced","index","referenceDefinition","reference_definition","constraintSQL","columnReferenceDefinitionToSQL","arrow","columnOffsetToSQL","columnDataType","reference","match","onDelete","on_delete","on_update","columnOrder","nulls","opclass","columnDefinitionToSQL","columnDefinition","columnOpt","nullable","characterSet","character_set","check","storage","defaultOpt","default_val","autoIncrement","auto_increment","uniquePrimary","unique_or_primary","columnFormat","column_format","columnOption","getDual","columnsStr","has","array_index","number","columnToSQL","createDefinitionToSQL","indexSQL","resource","createDefinition","create_definitions","firstAfter","first_after","ifNotExists","if_not_exists","oldColumn","old_column","commonCmdToSQL","lockUnlockToSQL","tableStmt","lockType","lock_type","tableInfoTemp","lockMode","lock_mode","nowait","lockInfo","pgLock","members","varName","unionToSQL","unary_expr","unarExpr","space","typeToSQLFn","analyze","attach","like","temporary","tableOptions","table_options","ignoreReplace","ignore_replace","queryExpr","query_expr","likeType","likeTableName","createTableToSQL","constraintKw","constraint_kw","deferrable","execute","for_each","when","createTriggerToSQL","extension","withName","version","createExtensionToSQL","concurrently","fileStream","filestream_on","include","indexColumns","index_columns","indexUsing","index_using","algorithmOpt","algorithm_option","lockOpt","lock_option","onKw","on_kw","tablespace","withBeforeWhere","with_before_where","withIndexOpt","includeColumns","createIndexToSQL","sequence","createSequenceToSQL","createDatabaseToSQL","delete","addition","update","insert","drop","truncate","declare","dec","at","declareInfo","use","rename","renameInfo","storeProcessCall","desc","lock","unlock","fun","_orderby","_limit","unionKeyword","surportedTypes","checkSupported","includes","toSQL","astInfo","multipleToSQL","Parser","astToSQL","typeCase","parsers","trim","whiteList","checkFun","authorityList","hasAuthority","denyInfo","authority","hasCorrespondingAuthority","whiteAuthority","regex","RegExp","global","NodeSQLParser","util"],"mappings":"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","file":"bigquery.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n","/*\n * Generated by PEG.js 0.10.0.\n *\n * http://pegjs.org/\n */\n\n\"use strict\";\n\nvar BigInt = require(\"big-integer\");\n\nfunction peg$subclass(child, parent) {\n  function ctor() { this.constructor = child; }\n  ctor.prototype = parent.prototype;\n  child.prototype = new ctor();\n}\n\nfunction peg$SyntaxError(message, expected, found, location) {\n  this.message  = message;\n  this.expected = expected;\n  this.found    = found;\n  this.location = location;\n  this.name     = \"SyntaxError\";\n\n  if (typeof Error.captureStackTrace === \"function\") {\n    Error.captureStackTrace(this, peg$SyntaxError);\n  }\n}\n\npeg$subclass(peg$SyntaxError, Error);\n\npeg$SyntaxError.buildMessage = function(expected, found) {\n  var DESCRIBE_EXPECTATION_FNS = {\n        literal: function(expectation) {\n          return \"\\\"\" + literalEscape(expectation.text) + \"\\\"\";\n        },\n\n        \"class\": function(expectation) {\n          var escapedParts = \"\",\n              i;\n\n          for (i = 0; i < expectation.parts.length; i++) {\n            escapedParts += expectation.parts[i] instanceof Array\n              ? classEscape(expectation.parts[i][0]) + \"-\" + classEscape(expectation.parts[i][1])\n              : classEscape(expectation.parts[i]);\n          }\n\n          return \"[\" + (expectation.inverted ? \"^\" : \"\") + escapedParts + \"]\";\n        },\n\n        any: function(expectation) {\n          return \"any character\";\n        },\n\n        end: function(expectation) {\n          return \"end of input\";\n        },\n\n        other: function(expectation) {\n          return expectation.description;\n        }\n      };\n\n  function hex(ch) {\n    return ch.charCodeAt(0).toString(16).toUpperCase();\n  }\n\n  function literalEscape(s) {\n    return s\n      .replace(/\\\\/g, '\\\\\\\\')\n      .replace(/\"/g,  '\\\\\"')\n      .replace(/\\0/g, '\\\\0')\n      .replace(/\\t/g, '\\\\t')\n      .replace(/\\n/g, '\\\\n')\n      .replace(/\\r/g, '\\\\r')\n      .replace(/[\\x00-\\x0F]/g,          function(ch) { return '\\\\x0' + hex(ch); })\n      .replace(/[\\x10-\\x1F\\x7F-\\x9F]/g, function(ch) { return '\\\\x'  + hex(ch); });\n  }\n\n  function classEscape(s) {\n    return s\n      .replace(/\\\\/g, '\\\\\\\\')\n      .replace(/\\]/g, '\\\\]')\n      .replace(/\\^/g, '\\\\^')\n      .replace(/-/g,  '\\\\-')\n      .replace(/\\0/g, '\\\\0')\n      .replace(/\\t/g, '\\\\t')\n      .replace(/\\n/g, '\\\\n')\n      .replace(/\\r/g, '\\\\r')\n      .replace(/[\\x00-\\x0F]/g,          function(ch) { return '\\\\x0' + hex(ch); })\n      .replace(/[\\x10-\\x1F\\x7F-\\x9F]/g, function(ch) { return '\\\\x'  + hex(ch); });\n  }\n\n  function describeExpectation(expectation) {\n    return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);\n  }\n\n  function describeExpected(expected) {\n    var descriptions = new Array(expected.length),\n        i, j;\n\n    for (i = 0; i < expected.length; i++) {\n      descriptions[i] = describeExpectation(expected[i]);\n    }\n\n    descriptions.sort();\n\n    if (descriptions.length > 0) {\n      for (i = 1, j = 1; i < descriptions.length; i++) {\n        if (descriptions[i - 1] !== descriptions[i]) {\n          descriptions[j] = descriptions[i];\n          j++;\n        }\n      }\n      descriptions.length = j;\n    }\n\n    switch (descriptions.length) {\n      case 1:\n        return descriptions[0];\n\n      case 2:\n        return descriptions[0] + \" or \" + descriptions[1];\n\n      default:\n        return descriptions.slice(0, -1).join(\", \")\n          + \", or \"\n          + descriptions[descriptions.length - 1];\n    }\n  }\n\n  function describeFound(found) {\n    return found ? \"\\\"\" + literalEscape(found) + \"\\\"\" : \"end of input\";\n  }\n\n  return \"Expected \" + describeExpected(expected) + \" but \" + describeFound(found) + \" found.\";\n};\n\nfunction peg$parse(input, options) {\n  options = options !== void 0 ? options : {};\n\n  var peg$FAILED = {},\n\n      peg$startRuleFunctions = { start: peg$parsestart },\n      peg$startRuleFunction  = peg$parsestart,\n\n      peg$c0 = function(n) {\n          return n\n        },\n      peg$c1 = function(head, tail) {\n            const cur = [head && head.ast || head];\n            for (let i = 0; i < tail.length; i++) {\n              if(!tail[i][3] || tail[i][3].length === 0) continue;\n              cur.push(tail[i][3] && tail[i][3].ast || tail[i][3]);\n            }\n            return {\n              tableList: Array.from(tableList),\n              columnList: columnListTableAlias(columnList),\n              ast: cur\n            }\n          },\n      peg$c2 = \"(\",\n      peg$c3 = peg$literalExpectation(\"(\", false),\n      peg$c4 = \")\",\n      peg$c5 = peg$literalExpectation(\")\", false),\n      peg$c6 = function(s) {\n            return {\n              ...s[2],\n              parentheses: true,\n            }\n          },\n      peg$c7 = function(cte, s, o, l, se) {\n          return {\n            tableList: Array.from(tableList),\n            columnList: columnListTableAlias(columnList),\n            ast: {\n              type: 'bigquery',\n              with: cte,\n              select: s && s.ast,\n              orderby: o,\n              limit: l,\n              parentheses: s && s.parentheses || false,\n            }\n          }\n        },\n      peg$c8 = function(u, s) {\n          return s ? `union ${s.toLowerCase()}` : 'union'\n        },\n      peg$c9 = \"intersect\",\n      peg$c10 = peg$literalExpectation(\"INTERSECT\", true),\n      peg$c11 = \"except\",\n      peg$c12 = peg$literalExpectation(\"EXCEPT\", true),\n      peg$c13 = function(u, s) {\n          return `${u.toLowerCase()} ${s.toLowerCase()}`\n        },\n      peg$c14 = function(s) {\n            return {\n              ...s[2],\n              parentheses: true\n            }\n          },\n      peg$c15 = function(head, tail) {\n            let cur = head\n            for (let i = 0; i < tail.length; i++) {\n              cur._next = tail[i][3]\n              cur.union = tail[i][1]\n              cur = cur._next\n            }\n            return {\n              tableList: Array.from(tableList),\n              columnList: columnListTableAlias(columnList),\n              ast: head\n            }\n          },\n      peg$c16 = function(s) {\n            return {\n              ...s[2],\n              parentheses_symbol: true\n            }\n          },\n      peg$c17 = function(head, tail) {\n            return createList(head, tail);\n          },\n      peg$c18 = function(name, stmt) {\n          if (typeof name === 'string') name = { type: 'default', value: name }\n          return { name, stmt };\n        },\n      peg$c19 = function(sv, d, c, f, fs, w, g, h, o, l, win) {\n            if(Array.isArray(f)) f.forEach(info => info.table && tableList.add(`select::${info.db}::${info.table}`));\n            return {\n                type: 'select',\n                as_struct_val: sv,\n                distinct: d,\n                columns: c,\n                from: f,\n                for_sys_time_as_of: fs,\n                where: w,\n                groupby: g,\n                having: h,\n                orderby: o,\n                limit: l,\n                window:win,\n            };\n        },\n      peg$c20 = \"for\",\n      peg$c21 = peg$literalExpectation(\"FOR\", true),\n      peg$c22 = \"system_time\",\n      peg$c23 = peg$literalExpectation(\"SYSTEM_TIME\", true),\n      peg$c24 = \"as\",\n      peg$c25 = peg$literalExpectation(\"AS\", true),\n      peg$c26 = \"of\",\n      peg$c27 = peg$literalExpectation(\"OF\", true),\n      peg$c28 = function(e) {\n          return {\n            keyword: 'for system_time as of',\n            expr: e\n          }\n        },\n      peg$c29 = function(a, k) {\n          return `${a[0].toLowerCase()} ${k.toLowerCase()}`\n        },\n      peg$c30 = function(e, alias) {\n            return { expr: e, as:alias };\n          },\n      peg$c31 = \"replace\",\n      peg$c32 = peg$literalExpectation(\"REPLACE\", true),\n      peg$c33 = function(k, c) {\n          columnList.add('select::null::(.*)')\n          return {\n            expr_list: c,\n            parentheses: true,\n            star: '*',\n            type: k.toLowerCase(),\n          }\n        },\n      peg$c34 = function(head, tail) {\n            columnList.add('select::null::(.*)');\n            if (tail && tail.length > 0) {\n              head[0] = {\n                expr: {\n                  type: 'column_ref',\n                  table: null,\n                  column: '*'\n                },\n                as: null\n              };\n              return createList(head[0], tail);\n            }\n            return head[0];\n          },\n      peg$c35 = function(c) {\n          return c\n        },\n      peg$c36 = function(n, t, l) {\n          return {\n            expr: n,\n            offset: `[${t}(${l.value})]`\n          }\n        },\n      peg$c37 = function(tbl, pro) {\n            columnList.add(`select::${tbl}::(.*)`)\n            let column = '*'\n            const mid = pro && pro[0]\n            if (typeof mid === 'string') column = `${mid}.*`\n            if (mid && mid.expr && mid.offset) column = { ...mid, suffix: '.*' }\n            return {\n              expr: {\n                type: 'column_ref',\n                table: tbl,\n                column,\n              },\n              as: null\n            }\n          },\n      peg$c38 = function(c, as) {\n          return {\n              expr: {\n                type: 'column_ref',\n                table: null,\n                column: c\n              },\n              as: as\n            }\n        },\n      peg$c39 = function(i) { return i; },\n      peg$c40 = \"unnest\",\n      peg$c41 = peg$literalExpectation(\"UNNEST\", true),\n      peg$c42 = function(a, alias, wf) {\n          return {\n            type: 'unnest',\n            expr: a,\n            parentheses: true,\n            as:alias,\n            with_offset: wf,\n          }\n        },\n      peg$c43 = function(l) { return l; },\n      peg$c44 = function(alias) {\n          return {\n            keyword: 'with offset as',\n            as: alias\n          }\n        },\n      peg$c45 = function(head, tail) {\n            return [head, tail]\n          },\n      peg$c46 = function(head, tail) {\n            tail.unshift(head);\n            tail.forEach(tableInfo => {\n              const { table, as } = tableInfo\n              tableAlias[table] = table\n              if (as) tableAlias[as] = table\n              refreshColumnList(columnList)\n            })\n            return tail;\n          },\n      peg$c47 = function(t) { return t; },\n      peg$c48 = function(op, t, head, tail) {\n            t.join = op;\n            t.using = createList(head, tail);\n            return t;\n          },\n      peg$c49 = function(op, t, expr) {\n            t.join = op;\n            t.on   = expr;\n            return t;\n          },\n      peg$c50 = function(op, stmt, alias, expr) {\n          stmt.parentheses = true;\n          return {\n            expr: stmt,\n            as: alias,\n            join: op,\n            on: expr\n          };\n        },\n      peg$c51 = function(t, alias) {\n            if (t.type === 'var') {\n              t.as = alias;\n              return t;\n            } else {\n              return {\n                db: t.db,\n                table: t.table,\n                as: alias\n              };\n            }\n          },\n      peg$c52 = function(stmt, alias) {\n            stmt.parentheses = true;\n            return {\n              expr: stmt,\n              as: alias\n            };\n          },\n      peg$c53 = function() { return 'LEFT JOIN'; },\n      peg$c54 = function() { return 'RIGHT JOIN'; },\n      peg$c55 = function() { return 'FULL JOIN'; },\n      peg$c56 = function(k) { return `${k[0].toUpperCase()} JOIN`; },\n      peg$c57 = function(k) { return k ? `${k[0].toUpperCase()} JOIN` : 'JOIN'; },\n      peg$c58 = function(project, dt, tail) {\n            const obj = { db: null, table: project };\n            if (tail !== null) {\n              obj.db = `${project}.${dt[3]}`;\n              obj.table = tail[3];\n            }\n            return obj;\n          },\n      peg$c59 = function(dt, tail) {\n            const obj = { db: null, table: dt };\n            if (tail !== null) {\n              obj.db = dt;\n              obj.table = tail[3];\n            }\n            return obj;\n          },\n      peg$c60 = function(e) { return e; },\n      peg$c61 = function(e) { return e.value; },\n      peg$c62 = function(l) {\n          return {\n            keyword: 'window',\n            type: 'window',\n            expr: l,\n          }\n        },\n      peg$c63 = function(nw, anw) {\n          return {\n            name: nw,\n            as_window_specification: anw,\n          }\n        },\n      peg$c64 = function(n) { return n },\n      peg$c65 = function(ws) {\n          return {\n            window_specification: ws,\n            parentheses: true\n          }\n        },\n      peg$c66 = function(n, bc, l, w) {\n          return {\n            name: n,\n            partitionby: bc,\n            orderby: l,\n            window_frame_clause: w\n          }\n        },\n      peg$c67 = \"range\",\n      peg$c68 = peg$literalExpectation(\"RANGE\", true),\n      peg$c69 = \"unbounded\",\n      peg$c70 = peg$literalExpectation(\"UNBOUNDED\", true),\n      peg$c71 = \"preceding\",\n      peg$c72 = peg$literalExpectation(\"PRECEDING\", true),\n      peg$c73 = \"current\",\n      peg$c74 = peg$literalExpectation(\"CURRENT\", true),\n      peg$c75 = \"ROW\",\n      peg$c76 = peg$literalExpectation(\"ROW\", false),\n      peg$c77 = function() {\n          return 'range between unbounded preceding and current row'\n        },\n      peg$c78 = \"rows\",\n      peg$c79 = peg$literalExpectation(\"ROWS\", true),\n      peg$c80 = \"following\",\n      peg$c81 = peg$literalExpectation(\"FOLLOWING\", true),\n      peg$c82 = function(s, e) {\n          return `rows between ${s.value} preceding and ${e.value} following`\n        },\n      peg$c83 = function(bc) { return bc; },\n      peg$c84 = function(e, d) {\n          const obj = { expr: e, type: 'ASC' };\n          if (d === 'DESC') obj.type = 'DESC';\n          return obj;\n        },\n      peg$c85 = function(i1, tail) {\n            const res = [i1];\n            if (tail) res.push(tail[2]);\n            return {\n              seperator: tail && tail[0] && tail[0].toLowerCase() || '',\n              value: res\n            };\n          },\n      peg$c86 = function(head, tail) {\n            const el = { type: 'expr_list' };\n            el.value = createList(head, tail);\n            return el;\n          },\n      peg$c87 = function(c) {\n          return {\n            array_path: c,\n            type: 'array',\n            keyword: '',\n            parentheses: true\n          }\n        },\n      peg$c88 = function(s, c) {\n          return {\n            definition: s,\n            array_path: c.map(l => ({ expr: l, as: null })),\n            type: 'array',\n            keyword: s && 'array',\n            parentheses: true\n          }\n        },\n      peg$c89 = function(s, c) {\n          return {\n            definition: s,\n            expr_list: c,\n            type: 'array',\n            keyword: s && 'array',\n            parentheses: true\n          }\n        },\n      peg$c90 = function(s, c) {\n          return {\n            definition: s,\n            expr_list: c,\n            type: 'struct',\n            keyword: s && 'struct',\n            parentheses: true\n          }\n        },\n      peg$c91 = function(head, tail) {\n          return createBinaryExprChain(head, tail);\n        },\n      peg$c92 = function(op, tail) {\n          return createUnaryExpr(op, tail[0][1]);\n        },\n      peg$c93 = function(head, tail) {\n          let result = head;\n          let seperator = ''\n          for (let i = 0; i < tail.length; i++) {\n            if (tail[i][1] === ',') {\n              seperator = ','\n              if (i === 0) result = [head]\n              result.push(tail[i][3])\n            } else {\n              result = createBinaryExpr(tail[i][1], result, tail[i][3]);\n            }\n          }\n          if (seperator === ',') {\n            const el = { type: 'expr_list' };\n            el.value = result\n            return el\n          }\n          return result;\n        },\n      peg$c94 = function(head, tail) {\n            return createBinaryExprChain(head, tail);\n          },\n      peg$c95 = \"!\",\n      peg$c96 = peg$literalExpectation(\"!\", false),\n      peg$c97 = \"=\",\n      peg$c98 = peg$literalExpectation(\"=\", false),\n      peg$c99 = function(expr) {\n            return createUnaryExpr('NOT', expr);\n          },\n      peg$c100 = function(left, rh) {\n            if (rh === null) return left;\n            else if (rh.type === 'arithmetic') return createBinaryExprChain(left, rh.tail);\n            else return createBinaryExpr(rh.op, left, rh.right);\n          },\n      peg$c101 = function(op, stmt) {\n          stmt.parentheses = true;\n          return createUnaryExpr(op, stmt);\n        },\n      peg$c102 = function(nk) { return nk[0] + ' ' + nk[2]; },\n      peg$c103 = function(l) {\n            return { type: 'arithmetic', tail: l };\n          },\n      peg$c104 = \">=\",\n      peg$c105 = peg$literalExpectation(\">=\", false),\n      peg$c106 = \">\",\n      peg$c107 = peg$literalExpectation(\">\", false),\n      peg$c108 = \"<=\",\n      peg$c109 = peg$literalExpectation(\"<=\", false),\n      peg$c110 = \"<>\",\n      peg$c111 = peg$literalExpectation(\"<>\", false),\n      peg$c112 = \"<\",\n      peg$c113 = peg$literalExpectation(\"<\", false),\n      peg$c114 = \"!=\",\n      peg$c115 = peg$literalExpectation(\"!=\", false),\n      peg$c116 = function(right) {\n            return { op: 'IS', right: right };\n          },\n      peg$c117 = function(right) {\n            return { op: 'IS NOT', right: right };\n        },\n      peg$c118 = function(op, begin, end) {\n            return {\n              op: op,\n              right: {\n                type: 'expr_list',\n                value: [begin, end]\n              }\n            };\n          },\n      peg$c119 = function(op, right) {\n            return { op: op, right: right };\n          },\n      peg$c120 = function(op, l) {\n            return { op: op, right: l };\n          },\n      peg$c121 = function(op, e) {\n            return { op: op, right: e };\n          },\n      peg$c122 = \"+\",\n      peg$c123 = peg$literalExpectation(\"+\", false),\n      peg$c124 = \"-\",\n      peg$c125 = peg$literalExpectation(\"-\", false),\n      peg$c126 = function(head, tail) {\n            return createBinaryExprChain(head, tail)\n          },\n      peg$c127 = \"*\",\n      peg$c128 = peg$literalExpectation(\"*\", false),\n      peg$c129 = \"/\",\n      peg$c130 = peg$literalExpectation(\"/\", false),\n      peg$c131 = \"%\",\n      peg$c132 = peg$literalExpectation(\"%\", false),\n      peg$c133 = function(list) {\n              list.parentheses = true;\n              return list;\n          },\n      peg$c134 = function(e, u) {\n            return {\n              type: 'interval',\n              expr: e,\n              unit: u.toLowerCase(),\n            }\n          },\n      peg$c135 = function(condition_list, otherwise) {\n            if (otherwise) condition_list.push(otherwise);\n            return {\n              type: 'case',\n              expr: null,\n              args: condition_list\n            };\n          },\n      peg$c136 = function(expr, condition_list, otherwise) {\n            if (otherwise) condition_list.push(otherwise);\n            return {\n              type: 'case',\n              expr: expr,\n              args: condition_list\n            };\n          },\n      peg$c137 = function(condition, result) {\n          return {\n            type: 'when',\n            cond: condition,\n            result: result\n          };\n        },\n      peg$c138 = function(result) {\n          return { type: 'else', result: result };\n        },\n      peg$c139 = function(tbl, col) {\n            columnList.add(`select::${tbl}::${col}`);\n            return {\n              type: 'column_ref',\n              table: tbl,\n              column: col\n            };\n          },\n      peg$c140 = function(col) {\n            columnList.add(`select::null::${col}`);\n            return {\n              type: 'column_ref',\n              table: null,\n              column: col\n            };\n          },\n      peg$c141 = function(name) { return reservedMap[name.toUpperCase()] === true; },\n      peg$c142 = function(name) {\n            return name;\n          },\n      peg$c143 = function(name) {\n            if (reservedMap[name.toUpperCase()] === true) throw new Error(\"Error: \"+ JSON.stringify(name)+\" is a reserved word, can not as alias clause\");\n            return false\n          },\n      peg$c144 = \"\\\"\",\n      peg$c145 = peg$literalExpectation(\"\\\"\", false),\n      peg$c146 = /^[^\"]/,\n      peg$c147 = peg$classExpectation([\"\\\"\"], true, false),\n      peg$c148 = function(chars) { return chars.join(''); },\n      peg$c149 = \"'\",\n      peg$c150 = peg$literalExpectation(\"'\", false),\n      peg$c151 = /^[^']/,\n      peg$c152 = peg$classExpectation([\"'\"], true, false),\n      peg$c153 = \"`\",\n      peg$c154 = peg$literalExpectation(\"`\", false),\n      peg$c155 = /^[^`]/,\n      peg$c156 = peg$classExpectation([\"`\"], true, false),\n      peg$c157 = function(chars) { return `\\`${chars.join('')}\\``; },\n      peg$c158 = function(name) {\n          return name;\n        },\n      peg$c159 = function(name) { return name; },\n      peg$c160 = function(start, parts) { return start + parts.join(''); },\n      peg$c161 = /^[A-Za-z_]/,\n      peg$c162 = peg$classExpectation([[\"A\", \"Z\"], [\"a\", \"z\"], \"_\"], false, false),\n      peg$c163 = /^[A-Za-z0-9_]/,\n      peg$c164 = peg$classExpectation([[\"A\", \"Z\"], [\"a\", \"z\"], [\"0\", \"9\"], \"_\"], false, false),\n      peg$c165 = /^[A-Za-z0-9_:]/,\n      peg$c166 = peg$classExpectation([[\"A\", \"Z\"], [\"a\", \"z\"], [\"0\", \"9\"], \"_\", \":\"], false, false),\n      peg$c167 = \":\",\n      peg$c168 = peg$literalExpectation(\":\", false),\n      peg$c169 = function(l) {\n            return { type: 'param', value: l[1] };\n          },\n      peg$c170 = function(name, e) {\n            return {\n              type: 'aggr_func',\n              name: name,\n              args: {\n                expr: e\n              }\n            };\n          },\n      peg$c171 = \"update\",\n      peg$c172 = peg$literalExpectation(\"UPDATE\", true),\n      peg$c173 = function(kw, l) {\n          return {\n            type: 'on update',\n            keyword: kw,\n            parentheses: true,\n            expr: l\n          }\n        },\n      peg$c174 = function(kw) {\n          return {\n            type: 'on update',\n            keyword: kw,\n          }\n        },\n      peg$c175 = function(aws) {\n          return {\n            type: 'window',\n            as_window_specification: aws,\n          }\n        },\n      peg$c176 = function(bc, l) {\n          return {\n            partitionby: bc,\n            orderby: l\n          }\n        },\n      peg$c177 = function(name, arg, bc) {\n            return {\n              type: 'aggr_func',\n              name: name,\n              args: arg,\n              over: bc\n            };\n          },\n      peg$c178 = function(e) { return { expr: e }; },\n      peg$c179 = function(d, c) { return { distinct: d, expr: c }; },\n      peg$c180 = function(d, c, or) {  c.parentheses = true; return { distinct: d, expr: c, orderby: or }; },\n      peg$c181 = function() { return { type: 'star', value: '*' }; },\n      peg$c182 = function(name, l, bc) {\n            return {\n              type: 'function',\n              name: name,\n              args: l ? l: { type: 'expr_list', value: [] },\n              over: bc\n            };\n          },\n      peg$c183 = function(f, up) {\n          return {\n              type: 'function',\n              name: f,\n              over: up\n          }\n        },\n      peg$c184 = function(dt, tail) {\n            let name = dt\n            if (tail !== null) {\n              name = `${dt}.${tail[3]}`\n            }\n            return name;\n          },\n      peg$c185 = \"century\",\n      peg$c186 = peg$literalExpectation(\"CENTURY\", true),\n      peg$c187 = \"day\",\n      peg$c188 = peg$literalExpectation(\"DAY\", true),\n      peg$c189 = \"decade\",\n      peg$c190 = peg$literalExpectation(\"DECADE\", true),\n      peg$c191 = \"dow\",\n      peg$c192 = peg$literalExpectation(\"DOW\", true),\n      peg$c193 = \"doy\",\n      peg$c194 = peg$literalExpectation(\"DOY\", true),\n      peg$c195 = \"epoch\",\n      peg$c196 = peg$literalExpectation(\"EPOCH\", true),\n      peg$c197 = \"hour\",\n      peg$c198 = peg$literalExpectation(\"HOUR\", true),\n      peg$c199 = \"isodow\",\n      peg$c200 = peg$literalExpectation(\"ISODOW\", true),\n      peg$c201 = \"isoyear\",\n      peg$c202 = peg$literalExpectation(\"ISOYEAR\", true),\n      peg$c203 = \"microseconds\",\n      peg$c204 = peg$literalExpectation(\"MICROSECONDS\", true),\n      peg$c205 = \"millennium\",\n      peg$c206 = peg$literalExpectation(\"MILLENNIUM\", true),\n      peg$c207 = \"milliseconds\",\n      peg$c208 = peg$literalExpectation(\"MILLISECONDS\", true),\n      peg$c209 = \"minute\",\n      peg$c210 = peg$literalExpectation(\"MINUTE\", true),\n      peg$c211 = \"month\",\n      peg$c212 = peg$literalExpectation(\"MONTH\", true),\n      peg$c213 = \"quarter\",\n      peg$c214 = peg$literalExpectation(\"QUARTER\", true),\n      peg$c215 = \"second\",\n      peg$c216 = peg$literalExpectation(\"SECOND\", true),\n      peg$c217 = \"timezone\",\n      peg$c218 = peg$literalExpectation(\"TIMEZONE\", true),\n      peg$c219 = \"timezone_hour\",\n      peg$c220 = peg$literalExpectation(\"TIMEZONE_HOUR\", true),\n      peg$c221 = \"timezone_minute\",\n      peg$c222 = peg$literalExpectation(\"TIMEZONE_MINUTE\", true),\n      peg$c223 = \"week\",\n      peg$c224 = peg$literalExpectation(\"WEEK\", true),\n      peg$c225 = \"year\",\n      peg$c226 = peg$literalExpectation(\"YEAR\", true),\n      peg$c227 = function() {\n          return f\n        },\n      peg$c228 = function(kw, f, t, s) {\n          return {\n              type: kw.toLowerCase(),\n              args: {\n                field: f,\n                cast_type: t,\n                source: s,\n              }\n          }\n        },\n      peg$c229 = function(e, t) {\n          return {\n            type: 'cast',\n            expr: e,\n            symbol: 'as',\n            target: t\n          };\n        },\n      peg$c230 = function(e, precision) {\n          return {\n            type: 'cast',\n            expr: e,\n            symbol: 'as',\n            target: {\n              dataType: 'DECIMAL(' + precision + ')'\n            }\n          };\n        },\n      peg$c231 = function(e, precision, scale) {\n            return {\n              type: 'cast',\n              expr: e,\n              symbol: 'as',\n              target: {\n                dataType: 'DECIMAL(' + precision + ', ' + scale + ')'\n              }\n            };\n          },\n      peg$c232 = function(e, s, t) { /* MySQL cast to un-/signed integer */\n          return {\n            type: 'cast',\n            expr: e,\n            symbol: 'as',\n            target: {\n              dataType: s + (t ? ' ' + t: '')\n            }\n          };\n        },\n      peg$c233 = function() {\n            return { type: 'null', value: null };\n          },\n      peg$c234 = function() {\n          return {\n            type: 'not null',\n            value: 'not null',\n          }\n        },\n      peg$c235 = function() {\n            return { type: 'bool', value: true };\n          },\n      peg$c236 = function() {\n            return { type: 'bool', value: false };\n          },\n      peg$c237 = \"r\",\n      peg$c238 = peg$literalExpectation(\"R\", true),\n      peg$c239 = function(r, ca) {\n            return {\n              type: r ? 'regex_string' : 'single_quote_string',\n              value: ca[1].join('')\n            };\n          },\n      peg$c240 = function(r, ca) {\n            return {\n              type: r ? 'regex_string' : 'string',\n              value: ca[1].join('')\n            };\n          },\n      peg$c241 = function(type, ca) {\n            return {\n              type: type.toLowerCase(),\n              value: ca[1].join('')\n            };\n          },\n      peg$c242 = /^[^\"\\\\\\0-\\x1F\\x7F]/,\n      peg$c243 = peg$classExpectation([\"\\\"\", \"\\\\\", [\"\\0\", \"\\x1F\"], \"\\x7F\"], true, false),\n      peg$c244 = /^[^'\\\\]/,\n      peg$c245 = peg$classExpectation([\"'\", \"\\\\\"], true, false),\n      peg$c246 = \"\\\\'\",\n      peg$c247 = peg$literalExpectation(\"\\\\'\", false),\n      peg$c248 = function() { return \"'\";  },\n      peg$c249 = \"\\\\\\\"\",\n      peg$c250 = peg$literalExpectation(\"\\\\\\\"\", false),\n      peg$c251 = function() { return '\"';  },\n      peg$c252 = \"\\\\\\\\\",\n      peg$c253 = peg$literalExpectation(\"\\\\\\\\\", false),\n      peg$c254 = function() { return \"\\\\\"; },\n      peg$c255 = \"\\\\/\",\n      peg$c256 = peg$literalExpectation(\"\\\\/\", false),\n      peg$c257 = function() { return \"/\";  },\n      peg$c258 = \"\\\\b\",\n      peg$c259 = peg$literalExpectation(\"\\\\b\", false),\n      peg$c260 = function() { return \"\\b\"; },\n      peg$c261 = \"\\\\f\",\n      peg$c262 = peg$literalExpectation(\"\\\\f\", false),\n      peg$c263 = function() { return \"\\f\"; },\n      peg$c264 = \"\\\\n\",\n      peg$c265 = peg$literalExpectation(\"\\\\n\", false),\n      peg$c266 = function() { return \"\\n\"; },\n      peg$c267 = \"\\\\r\",\n      peg$c268 = peg$literalExpectation(\"\\\\r\", false),\n      peg$c269 = function() { return \"\\r\"; },\n      peg$c270 = \"\\\\t\",\n      peg$c271 = peg$literalExpectation(\"\\\\t\", false),\n      peg$c272 = function() { return \"\\t\"; },\n      peg$c273 = \"\\\\u\",\n      peg$c274 = peg$literalExpectation(\"\\\\u\", false),\n      peg$c275 = function(h1, h2, h3, h4) {\n            return String.fromCharCode(parseInt(\"0x\" + h1 + h2 + h3 + h4));\n          },\n      peg$c276 = \"\\\\\",\n      peg$c277 = peg$literalExpectation(\"\\\\\", false),\n      peg$c278 = /^[\\n\\r]/,\n      peg$c279 = peg$classExpectation([\"\\n\", \"\\r\"], false, false),\n      peg$c280 = function(n) {\n            if (n && n.type === 'bigint') return n\n            return { type: 'number', value: n };\n          },\n      peg$c281 = function(int_, frac, exp) {\n          const numStr = int_ + frac + exp\n          return {\n            type: 'bigint',\n            value: numStr\n          }\n        },\n      peg$c282 = function(int_, frac) {\n          const numStr = int_ + frac\n          if (isBigInt(int_)) return {\n            type: 'bigint',\n            value: numStr\n          }\n          return parseFloat(numStr);\n        },\n      peg$c283 = function(int_, exp) {\n          const numStr = int_ + exp\n          return {\n            type: 'bigint',\n            value: numStr\n          }\n        },\n      peg$c284 = function(int_) {\n          if (isBigInt(int_)) return {\n            type: 'bigint',\n            value: int_\n          }\n          return parseFloat(int_);\n        },\n      peg$c285 = function(op, digits) { return \"-\" + digits; },\n      peg$c286 = function(op, digit) { return \"-\" + digit; },\n      peg$c287 = \".\",\n      peg$c288 = peg$literalExpectation(\".\", false),\n      peg$c289 = function(digits) { return \".\" + digits; },\n      peg$c290 = function(e, digits) { return e + digits; },\n      peg$c291 = function(digits) { return digits.join(\"\"); },\n      peg$c292 = /^[0-9]/,\n      peg$c293 = peg$classExpectation([[\"0\", \"9\"]], false, false),\n      peg$c294 = /^[0-9a-fA-F]/,\n      peg$c295 = peg$classExpectation([[\"0\", \"9\"], [\"a\", \"f\"], [\"A\", \"F\"]], false, false),\n      peg$c296 = /^[eE]/,\n      peg$c297 = peg$classExpectation([\"e\", \"E\"], false, false),\n      peg$c298 = /^[+\\-]/,\n      peg$c299 = peg$classExpectation([\"+\", \"-\"], false, false),\n      peg$c300 = function(e, sign) { return e + (sign !== null ? sign: ''); },\n      peg$c301 = \"null\",\n      peg$c302 = peg$literalExpectation(\"NULL\", true),\n      peg$c303 = \"default\",\n      peg$c304 = peg$literalExpectation(\"DEFAULT\", true),\n      peg$c305 = \"not null\",\n      peg$c306 = peg$literalExpectation(\"NOT NULL\", true),\n      peg$c307 = \"true\",\n      peg$c308 = peg$literalExpectation(\"TRUE\", true),\n      peg$c309 = \"to\",\n      peg$c310 = peg$literalExpectation(\"TO\", true),\n      peg$c311 = \"false\",\n      peg$c312 = peg$literalExpectation(\"FALSE\", true),\n      peg$c313 = \"drop\",\n      peg$c314 = peg$literalExpectation(\"DROP\", true),\n      peg$c315 = function() { return 'DROP'; },\n      peg$c316 = \"use\",\n      peg$c317 = peg$literalExpectation(\"USE\", true),\n      peg$c318 = \"select\",\n      peg$c319 = peg$literalExpectation(\"SELECT\", true),\n      peg$c320 = \"if not exists\",\n      peg$c321 = peg$literalExpectation(\"IF NOT EXISTS\", true),\n      peg$c322 = \"RECURSIVE\",\n      peg$c323 = peg$literalExpectation(\"RECURSIVE\", false),\n      peg$c324 = \"ignore\",\n      peg$c325 = peg$literalExpectation(\"IGNORE\", true),\n      peg$c326 = \"explain\",\n      peg$c327 = peg$literalExpectation(\"EXPLAIN\", true),\n      peg$c328 = \"partition\",\n      peg$c329 = peg$literalExpectation(\"PARTITION\", true),\n      peg$c330 = function() { return 'PARTITION' },\n      peg$c331 = \"into\",\n      peg$c332 = peg$literalExpectation(\"INTO\", true),\n      peg$c333 = \"from\",\n      peg$c334 = peg$literalExpectation(\"FROM\", true),\n      peg$c335 = \"set\",\n      peg$c336 = peg$literalExpectation(\"SET\", true),\n      peg$c337 = \"unlock\",\n      peg$c338 = peg$literalExpectation(\"UNLOCK\", true),\n      peg$c339 = \"lock\",\n      peg$c340 = peg$literalExpectation(\"LOCK\", true),\n      peg$c341 = \"table\",\n      peg$c342 = peg$literalExpectation(\"TABLE\", true),\n      peg$c343 = function() { return 'TABLE'; },\n      peg$c344 = \"tables\",\n      peg$c345 = peg$literalExpectation(\"TABLES\", true),\n      peg$c346 = function() { return 'TABLES'; },\n      peg$c347 = \"collate\",\n      peg$c348 = peg$literalExpectation(\"COLLATE\", true),\n      peg$c349 = function() { return 'COLLATE'; },\n      peg$c350 = \"on\",\n      peg$c351 = peg$literalExpectation(\"ON\", true),\n      peg$c352 = \"left\",\n      peg$c353 = peg$literalExpectation(\"LEFT\", true),\n      peg$c354 = \"right\",\n      peg$c355 = peg$literalExpectation(\"RIGHT\", true),\n      peg$c356 = \"full\",\n      peg$c357 = peg$literalExpectation(\"FULL\", true),\n      peg$c358 = \"inner\",\n      peg$c359 = peg$literalExpectation(\"INNER\", true),\n      peg$c360 = \"cross\",\n      peg$c361 = peg$literalExpectation(\"CROSS\", true),\n      peg$c362 = \"join\",\n      peg$c363 = peg$literalExpectation(\"JOIN\", true),\n      peg$c364 = \"outer\",\n      peg$c365 = peg$literalExpectation(\"OUTER\", true),\n      peg$c366 = \"over\",\n      peg$c367 = peg$literalExpectation(\"OVER\", true),\n      peg$c368 = \"union\",\n      peg$c369 = peg$literalExpectation(\"UNION\", true),\n      peg$c370 = \"value\",\n      peg$c371 = peg$literalExpectation(\"VALUE\", true),\n      peg$c372 = function() { return 'VALUE' },\n      peg$c373 = \"values\",\n      peg$c374 = peg$literalExpectation(\"VALUES\", true),\n      peg$c375 = \"using\",\n      peg$c376 = peg$literalExpectation(\"USING\", true),\n      peg$c377 = \"where\",\n      peg$c378 = peg$literalExpectation(\"WHERE\", true),\n      peg$c379 = \"with\",\n      peg$c380 = peg$literalExpectation(\"WITH\", true),\n      peg$c381 = \"group\",\n      peg$c382 = peg$literalExpectation(\"GROUP\", true),\n      peg$c383 = \"by\",\n      peg$c384 = peg$literalExpectation(\"BY\", true),\n      peg$c385 = \"order\",\n      peg$c386 = peg$literalExpectation(\"ORDER\", true),\n      peg$c387 = \"having\",\n      peg$c388 = peg$literalExpectation(\"HAVING\", true),\n      peg$c389 = \"window\",\n      peg$c390 = peg$literalExpectation(\"WINDOW\", true),\n      peg$c391 = \"ordinal\",\n      peg$c392 = peg$literalExpectation(\"ORDINAL\", true),\n      peg$c393 = function() { return 'ORDINAL' },\n      peg$c394 = \"limit\",\n      peg$c395 = peg$literalExpectation(\"LIMIT\", true),\n      peg$c396 = \"offset\",\n      peg$c397 = peg$literalExpectation(\"OFFSET\", true),\n      peg$c398 = function() { return 'OFFSET'; },\n      peg$c399 = \"asc\",\n      peg$c400 = peg$literalExpectation(\"ASC\", true),\n      peg$c401 = function() { return 'ASC'; },\n      peg$c402 = \"desc\",\n      peg$c403 = peg$literalExpectation(\"DESC\", true),\n      peg$c404 = function() { return 'DESC'; },\n      peg$c405 = \"all\",\n      peg$c406 = peg$literalExpectation(\"ALL\", true),\n      peg$c407 = function() { return 'ALL'; },\n      peg$c408 = \"distinct\",\n      peg$c409 = peg$literalExpectation(\"DISTINCT\", true),\n      peg$c410 = function() { return 'DISTINCT';},\n      peg$c411 = \"between\",\n      peg$c412 = peg$literalExpectation(\"BETWEEN\", true),\n      peg$c413 = function() { return 'BETWEEN'; },\n      peg$c414 = \"in\",\n      peg$c415 = peg$literalExpectation(\"IN\", true),\n      peg$c416 = function() { return 'IN'; },\n      peg$c417 = \"is\",\n      peg$c418 = peg$literalExpectation(\"IS\", true),\n      peg$c419 = function() { return 'IS'; },\n      peg$c420 = \"like\",\n      peg$c421 = peg$literalExpectation(\"LIKE\", true),\n      peg$c422 = function() { return 'LIKE'; },\n      peg$c423 = \"exists\",\n      peg$c424 = peg$literalExpectation(\"EXISTS\", true),\n      peg$c425 = function() { return 'EXISTS'; },\n      peg$c426 = \"not\",\n      peg$c427 = peg$literalExpectation(\"NOT\", true),\n      peg$c428 = function() { return 'NOT'; },\n      peg$c429 = \"and\",\n      peg$c430 = peg$literalExpectation(\"AND\", true),\n      peg$c431 = function() { return 'AND'; },\n      peg$c432 = \"or\",\n      peg$c433 = peg$literalExpectation(\"OR\", true),\n      peg$c434 = function() { return 'OR'; },\n      peg$c435 = \"count\",\n      peg$c436 = peg$literalExpectation(\"COUNT\", true),\n      peg$c437 = function() { return 'COUNT'; },\n      peg$c438 = \"max\",\n      peg$c439 = peg$literalExpectation(\"MAX\", true),\n      peg$c440 = function() { return 'MAX'; },\n      peg$c441 = \"min\",\n      peg$c442 = peg$literalExpectation(\"MIN\", true),\n      peg$c443 = function() { return 'MIN'; },\n      peg$c444 = \"sum\",\n      peg$c445 = peg$literalExpectation(\"SUM\", true),\n      peg$c446 = function() { return 'SUM'; },\n      peg$c447 = \"avg\",\n      peg$c448 = peg$literalExpectation(\"AVG\", true),\n      peg$c449 = function() { return 'AVG'; },\n      peg$c450 = \"extract\",\n      peg$c451 = peg$literalExpectation(\"EXTRACT\", true),\n      peg$c452 = function() { return 'EXTRACT'; },\n      peg$c453 = \"call\",\n      peg$c454 = peg$literalExpectation(\"CALL\", true),\n      peg$c455 = function() { return 'CALL'; },\n      peg$c456 = \"case\",\n      peg$c457 = peg$literalExpectation(\"CASE\", true),\n      peg$c458 = \"when\",\n      peg$c459 = peg$literalExpectation(\"WHEN\", true),\n      peg$c460 = \"then\",\n      peg$c461 = peg$literalExpectation(\"THEN\", true),\n      peg$c462 = \"else\",\n      peg$c463 = peg$literalExpectation(\"ELSE\", true),\n      peg$c464 = \"end\",\n      peg$c465 = peg$literalExpectation(\"END\", true),\n      peg$c466 = \"cast\",\n      peg$c467 = peg$literalExpectation(\"CAST\", true),\n      peg$c468 = \"array\",\n      peg$c469 = peg$literalExpectation(\"ARRAY\", true),\n      peg$c470 = function() { return 'ARRAY'; },\n      peg$c471 = \"bytes\",\n      peg$c472 = peg$literalExpectation(\"BYTES\", true),\n      peg$c473 = function() { return 'BYTES'; },\n      peg$c474 = \"bool\",\n      peg$c475 = peg$literalExpectation(\"BOOL\", true),\n      peg$c476 = function() { return 'BOOL'; },\n      peg$c477 = \"char\",\n      peg$c478 = peg$literalExpectation(\"CHAR\", true),\n      peg$c479 = function() { return 'CHAR'; },\n      peg$c480 = \"geography\",\n      peg$c481 = peg$literalExpectation(\"GEOGRAPHY\", true),\n      peg$c482 = function() { return 'GEOGRAPHY'; },\n      peg$c483 = \"varchar\",\n      peg$c484 = peg$literalExpectation(\"VARCHAR\", true),\n      peg$c485 = function() { return 'VARCHAR';},\n      peg$c486 = \"numeric\",\n      peg$c487 = peg$literalExpectation(\"NUMERIC\", true),\n      peg$c488 = function() { return 'NUMERIC'; },\n      peg$c489 = \"decimal\",\n      peg$c490 = peg$literalExpectation(\"DECIMAL\", true),\n      peg$c491 = function() { return 'DECIMAL'; },\n      peg$c492 = \"signed\",\n      peg$c493 = peg$literalExpectation(\"SIGNED\", true),\n      peg$c494 = function() { return 'SIGNED'; },\n      peg$c495 = \"unsigned\",\n      peg$c496 = peg$literalExpectation(\"UNSIGNED\", true),\n      peg$c497 = function() { return 'UNSIGNED'; },\n      peg$c498 = \"int64\",\n      peg$c499 = peg$literalExpectation(\"INT64\", true),\n      peg$c500 = function() { return 'INT64'; },\n      peg$c501 = \"zerofill\",\n      peg$c502 = peg$literalExpectation(\"ZEROFILL\", true),\n      peg$c503 = function() { return 'ZEROFILL'; },\n      peg$c504 = \"integer\",\n      peg$c505 = peg$literalExpectation(\"INTEGER\", true),\n      peg$c506 = function() { return 'INTEGER'; },\n      peg$c507 = \"json\",\n      peg$c508 = peg$literalExpectation(\"JSON\", true),\n      peg$c509 = function() { return 'JSON'; },\n      peg$c510 = \"smallint\",\n      peg$c511 = peg$literalExpectation(\"SMALLINT\", true),\n      peg$c512 = function() { return 'SMALLINT'; },\n      peg$c513 = \"string\",\n      peg$c514 = peg$literalExpectation(\"STRING\", true),\n      peg$c515 = function() { return 'STRING'; },\n      peg$c516 = \"struct\",\n      peg$c517 = peg$literalExpectation(\"STRUCT\", true),\n      peg$c518 = function() { return 'STRUCT'; },\n      peg$c519 = \"tinyint\",\n      peg$c520 = peg$literalExpectation(\"TINYINT\", true),\n      peg$c521 = function() { return 'TINYINT'; },\n      peg$c522 = \"tinytext\",\n      peg$c523 = peg$literalExpectation(\"TINYTEXT\", true),\n      peg$c524 = function() { return 'TINYTEXT'; },\n      peg$c525 = \"text\",\n      peg$c526 = peg$literalExpectation(\"TEXT\", true),\n      peg$c527 = function() { return 'TEXT'; },\n      peg$c528 = \"mediumtext\",\n      peg$c529 = peg$literalExpectation(\"MEDIUMTEXT\", true),\n      peg$c530 = function() { return 'MEDIUMTEXT'; },\n      peg$c531 = \"longtext\",\n      peg$c532 = peg$literalExpectation(\"LONGTEXT\", true),\n      peg$c533 = function() { return 'LONGTEXT'; },\n      peg$c534 = \"bigint\",\n      peg$c535 = peg$literalExpectation(\"BIGINT\", true),\n      peg$c536 = function() { return 'BIGINT'; },\n      peg$c537 = \"float64\",\n      peg$c538 = peg$literalExpectation(\"FLOAT64\", true),\n      peg$c539 = function() { return 'FLOAT64'; },\n      peg$c540 = \"double\",\n      peg$c541 = peg$literalExpectation(\"DOUBLE\", true),\n      peg$c542 = function() { return 'DOUBLE'; },\n      peg$c543 = \"date\",\n      peg$c544 = peg$literalExpectation(\"DATE\", true),\n      peg$c545 = function() { return 'DATE'; },\n      peg$c546 = \"datetime\",\n      peg$c547 = peg$literalExpectation(\"DATETIME\", true),\n      peg$c548 = function() { return 'DATETIME'; },\n      peg$c549 = \"time\",\n      peg$c550 = peg$literalExpectation(\"TIME\", true),\n      peg$c551 = function() { return 'TIME'; },\n      peg$c552 = \"timestamp\",\n      peg$c553 = peg$literalExpectation(\"TIMESTAMP\", true),\n      peg$c554 = function() { return 'TIMESTAMP'; },\n      peg$c555 = \"truncate\",\n      peg$c556 = peg$literalExpectation(\"TRUNCATE\", true),\n      peg$c557 = function() { return 'TRUNCATE'; },\n      peg$c558 = \"user\",\n      peg$c559 = peg$literalExpectation(\"USER\", true),\n      peg$c560 = function() { return 'USER'; },\n      peg$c561 = \"current_date\",\n      peg$c562 = peg$literalExpectation(\"CURRENT_DATE\", true),\n      peg$c563 = function() { return 'CURRENT_DATE'; },\n      peg$c564 = \"adddate\",\n      peg$c565 = peg$literalExpectation(\"ADDDATE\", true),\n      peg$c566 = function() { return 'ADDDATE'; },\n      peg$c567 = \"interval\",\n      peg$c568 = peg$literalExpectation(\"INTERVAL\", true),\n      peg$c569 = function() { return 'INTERVAL'; },\n      peg$c570 = function() { return 'YEAR'; },\n      peg$c571 = function() { return 'MONTH'; },\n      peg$c572 = function() { return 'DAY'; },\n      peg$c573 = function() { return 'HOUR'; },\n      peg$c574 = function() { return 'MINUTE'; },\n      peg$c575 = function() { return 'SECOND'; },\n      peg$c576 = \"current_time\",\n      peg$c577 = peg$literalExpectation(\"CURRENT_TIME\", true),\n      peg$c578 = function() { return 'CURRENT_TIME'; },\n      peg$c579 = \"current_timestamp\",\n      peg$c580 = peg$literalExpectation(\"CURRENT_TIMESTAMP\", true),\n      peg$c581 = function() { return 'CURRENT_TIMESTAMP'; },\n      peg$c582 = \"global\",\n      peg$c583 = peg$literalExpectation(\"GLOBAL\", true),\n      peg$c584 = function() { return 'GLOBAL'; },\n      peg$c585 = \"session\",\n      peg$c586 = peg$literalExpectation(\"SESSION\", true),\n      peg$c587 = function() { return 'SESSION'; },\n      peg$c588 = \"local\",\n      peg$c589 = peg$literalExpectation(\"LOCAL\", true),\n      peg$c590 = function() { return 'LOCAL'; },\n      peg$c591 = \"persist\",\n      peg$c592 = peg$literalExpectation(\"PERSIST\", true),\n      peg$c593 = function() { return 'PERSIST'; },\n      peg$c594 = \"persist_only\",\n      peg$c595 = peg$literalExpectation(\"PERSIST_ONLY\", true),\n      peg$c596 = function() { return 'PERSIST_ONLY'; },\n      peg$c597 = \"add\",\n      peg$c598 = peg$literalExpectation(\"ADD\", true),\n      peg$c599 = function() { return 'ADD'; },\n      peg$c600 = \"column\",\n      peg$c601 = peg$literalExpectation(\"COLUMN\", true),\n      peg$c602 = function() { return 'COLUMN'; },\n      peg$c603 = \"index\",\n      peg$c604 = peg$literalExpectation(\"INDEX\", true),\n      peg$c605 = function() { return 'INDEX'; },\n      peg$c606 = \"key\",\n      peg$c607 = peg$literalExpectation(\"KEY\", true),\n      peg$c608 = function() { return 'KEY'; },\n      peg$c609 = \"fulltext\",\n      peg$c610 = peg$literalExpectation(\"FULLTEXT\", true),\n      peg$c611 = function() { return 'FULLTEXT'; },\n      peg$c612 = \"unique\",\n      peg$c613 = peg$literalExpectation(\"UNIQUE\", true),\n      peg$c614 = function() { return 'UNIQUE'; },\n      peg$c615 = \"comment\",\n      peg$c616 = peg$literalExpectation(\"COMMENT\", true),\n      peg$c617 = function() { return 'COMMENT'; },\n      peg$c618 = \"constraint\",\n      peg$c619 = peg$literalExpectation(\"CONSTRAINT\", true),\n      peg$c620 = function() { return 'CONSTRAINT'; },\n      peg$c621 = \"references\",\n      peg$c622 = peg$literalExpectation(\"REFERENCES\", true),\n      peg$c623 = function() { return 'REFERENCES'; },\n      peg$c624 = \",\",\n      peg$c625 = peg$literalExpectation(\",\", false),\n      peg$c626 = \"[\",\n      peg$c627 = peg$literalExpectation(\"[\", false),\n      peg$c628 = \"]\",\n      peg$c629 = peg$literalExpectation(\"]\", false),\n      peg$c630 = \";\",\n      peg$c631 = peg$literalExpectation(\";\", false),\n      peg$c632 = \"||\",\n      peg$c633 = peg$literalExpectation(\"||\", false),\n      peg$c634 = \"&&\",\n      peg$c635 = peg$literalExpectation(\"&&\", false),\n      peg$c636 = \"/*\",\n      peg$c637 = peg$literalExpectation(\"/*\", false),\n      peg$c638 = \"*/\",\n      peg$c639 = peg$literalExpectation(\"*/\", false),\n      peg$c640 = \"--\",\n      peg$c641 = peg$literalExpectation(\"--\", false),\n      peg$c642 = \"#\",\n      peg$c643 = peg$literalExpectation(\"#\", false),\n      peg$c644 = peg$anyExpectation(),\n      peg$c645 = /^[ \\t\\n\\r]/,\n      peg$c646 = peg$classExpectation([\" \", \"\\t\", \"\\n\", \"\\r\"], false, false),\n      peg$c647 = function(n) { return DATA_TYPES[n.toUpperCase()] === true; },\n      peg$c648 = function(n) {\n            return n\n          },\n      peg$c649 = function(n, t) {\n          return {\n            field_name: n,\n            field_type: t,\n          }\n        },\n      peg$c650 = function(t) { return { dataType: t }; },\n      peg$c651 = function(t, l) { return { dataType: t, length: parseInt(l.join(''), 10) }; },\n      peg$c652 = function(t, a) {\n          return {\n            dataType: t,\n            definition: a,\n            anglebracket: true\n          }\n        },\n\n      peg$currPos          = 0,\n      peg$savedPos         = 0,\n      peg$posDetailsCache  = [{ line: 1, column: 1 }],\n      peg$maxFailPos       = 0,\n      peg$maxFailExpected  = [],\n      peg$silentFails      = 0,\n\n      peg$result;\n\n  if (\"startRule\" in options) {\n    if (!(options.startRule in peg$startRuleFunctions)) {\n      throw new Error(\"Can't start parsing from rule \\\"\" + options.startRule + \"\\\".\");\n    }\n\n    peg$startRuleFunction = peg$startRuleFunctions[options.startRule];\n  }\n\n  function text() {\n    return input.substring(peg$savedPos, peg$currPos);\n  }\n\n  function location() {\n    return peg$computeLocation(peg$savedPos, peg$currPos);\n  }\n\n  function expected(description, location) {\n    location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)\n\n    throw peg$buildStructuredError(\n      [peg$otherExpectation(description)],\n      input.substring(peg$savedPos, peg$currPos),\n      location\n    );\n  }\n\n  function error(message, location) {\n    location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)\n\n    throw peg$buildSimpleError(message, location);\n  }\n\n  function peg$literalExpectation(text, ignoreCase) {\n    return { type: \"literal\", text: text, ignoreCase: ignoreCase };\n  }\n\n  function peg$classExpectation(parts, inverted, ignoreCase) {\n    return { type: \"class\", parts: parts, inverted: inverted, ignoreCase: ignoreCase };\n  }\n\n  function peg$anyExpectation() {\n    return { type: \"any\" };\n  }\n\n  function peg$endExpectation() {\n    return { type: \"end\" };\n  }\n\n  function peg$otherExpectation(description) {\n    return { type: \"other\", description: description };\n  }\n\n  function peg$computePosDetails(pos) {\n    var details = peg$posDetailsCache[pos], p;\n\n    if (details) {\n      return details;\n    } else {\n      p = pos - 1;\n      while (!peg$posDetailsCache[p]) {\n        p--;\n      }\n\n      details = peg$posDetailsCache[p];\n      details = {\n        line:   details.line,\n        column: details.column\n      };\n\n      while (p < pos) {\n        if (input.charCodeAt(p) === 10) {\n          details.line++;\n          details.column = 1;\n        } else {\n          details.column++;\n        }\n\n        p++;\n      }\n\n      peg$posDetailsCache[pos] = details;\n      return details;\n    }\n  }\n\n  function peg$computeLocation(startPos, endPos) {\n    var startPosDetails = peg$computePosDetails(startPos),\n        endPosDetails   = peg$computePosDetails(endPos);\n\n    return {\n      start: {\n        offset: startPos,\n        line:   startPosDetails.line,\n        column: startPosDetails.column\n      },\n      end: {\n        offset: endPos,\n        line:   endPosDetails.line,\n        column: endPosDetails.column\n      }\n    };\n  }\n\n  function peg$fail(expected) {\n    if (peg$currPos < peg$maxFailPos) { return; }\n\n    if (peg$currPos > peg$maxFailPos) {\n      peg$maxFailPos = peg$currPos;\n      peg$maxFailExpected = [];\n    }\n\n    peg$maxFailExpected.push(expected);\n  }\n\n  function peg$buildSimpleError(message, location) {\n    return new peg$SyntaxError(message, null, null, location);\n  }\n\n  function peg$buildStructuredError(expected, found, location) {\n    return new peg$SyntaxError(\n      peg$SyntaxError.buildMessage(expected, found),\n      expected,\n      found,\n      location\n    );\n  }\n\n  function peg$parsestart() {\n    var s0, s1, s2;\n\n    s0 = peg$currPos;\n    s1 = peg$parse__();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parsemultiple_stmt();\n      if (s2 === peg$FAILED) {\n        s2 = peg$parsequery_statement();\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c0(s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsemultiple_stmt() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsequery_statement();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseSEMICOLON();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parsequery_statement();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      if (s3 !== peg$FAILED) {\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          s3 = peg$currPos;\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseSEMICOLON();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parsequery_statement();\n                if (s7 !== peg$FAILED) {\n                  s4 = [s4, s5, s6, s7];\n                  s3 = s4;\n                } else {\n                  peg$currPos = s3;\n                  s3 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        }\n      } else {\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c1(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsequery_statement() {\n    var s0, s1, s2, s3, s4, s5, s6;\n\n    s0 = peg$parsequery_expr();\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$currPos;\n      if (input.charCodeAt(peg$currPos) === 40) {\n        s2 = peg$c2;\n        peg$currPos++;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c3); }\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parse__();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parseselect_stmt();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parse__();\n            if (s5 !== peg$FAILED) {\n              if (input.charCodeAt(peg$currPos) === 41) {\n                s6 = peg$c4;\n                peg$currPos++;\n              } else {\n                s6 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c5); }\n              }\n              if (s6 !== peg$FAILED) {\n                s2 = [s2, s3, s4, s5, s6];\n                s1 = s2;\n              } else {\n                peg$currPos = s1;\n                s1 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s1;\n              s1 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s1;\n            s1 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c6(s1);\n      }\n      s0 = s1;\n    }\n\n    return s0;\n  }\n\n  function peg$parsequery_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n    s0 = peg$currPos;\n    s1 = peg$parsewith_clause();\n    if (s1 === peg$FAILED) {\n      s1 = null;\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseunion_stmt();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseorder_by_clause();\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parselimit_clause();\n                if (s7 === peg$FAILED) {\n                  s7 = null;\n                }\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseSEMICOLON();\n                    if (s9 === peg$FAILED) {\n                      s9 = null;\n                    }\n                    if (s9 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s1 = peg$c7(s1, s3, s5, s7, s9);\n                      s0 = s1;\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseset_op() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_UNION();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_ALL();\n        if (s3 === peg$FAILED) {\n          s3 = peg$parseKW_DISTINCT();\n        }\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c8(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      if (input.substr(peg$currPos, 9).toLowerCase() === peg$c9) {\n        s1 = input.substr(peg$currPos, 9);\n        peg$currPos += 9;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c10); }\n      }\n      if (s1 === peg$FAILED) {\n        if (input.substr(peg$currPos, 6).toLowerCase() === peg$c11) {\n          s1 = input.substr(peg$currPos, 6);\n          peg$currPos += 6;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c12); }\n        }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseKW_DISTINCT();\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c13(s1, s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseunion_stmt() {\n    var s0, s1, s2, s3, s4, s5, s6;\n\n    s0 = peg$parseunion_stmt_nake();\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$currPos;\n      if (input.charCodeAt(peg$currPos) === 40) {\n        s2 = peg$c2;\n        peg$currPos++;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c3); }\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parse__();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parseunion_stmt_nake();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parse__();\n            if (s5 !== peg$FAILED) {\n              if (input.charCodeAt(peg$currPos) === 41) {\n                s6 = peg$c4;\n                peg$currPos++;\n              } else {\n                s6 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c5); }\n              }\n              if (s6 !== peg$FAILED) {\n                s2 = [s2, s3, s4, s5, s6];\n                s1 = s2;\n              } else {\n                peg$currPos = s1;\n                s1 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s1;\n              s1 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s1;\n            s1 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c14(s1);\n      }\n      s0 = s1;\n    }\n\n    return s0;\n  }\n\n  function peg$parseunion_stmt_nake() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseselect_stmt();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseset_op();\n        if (s5 === peg$FAILED) {\n          s5 = null;\n        }\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseselect_stmt();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseset_op();\n          if (s5 === peg$FAILED) {\n            s5 = null;\n          }\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseselect_stmt();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c15(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseselect_stmt() {\n    var s0, s1, s2, s3, s4, s5, s6;\n\n    s0 = peg$parseselect_stmt_nake();\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$currPos;\n      if (input.charCodeAt(peg$currPos) === 40) {\n        s2 = peg$c2;\n        peg$currPos++;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c3); }\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parse__();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parseselect_stmt();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parse__();\n            if (s5 !== peg$FAILED) {\n              if (input.charCodeAt(peg$currPos) === 41) {\n                s6 = peg$c4;\n                peg$currPos++;\n              } else {\n                s6 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c5); }\n              }\n              if (s6 !== peg$FAILED) {\n                s2 = [s2, s3, s4, s5, s6];\n                s1 = s2;\n              } else {\n                peg$currPos = s1;\n                s1 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s1;\n              s1 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s1;\n            s1 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c16(s1);\n      }\n      s0 = s1;\n    }\n\n    return s0;\n  }\n\n  function peg$parsewith_clause() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_WITH();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsecte_definition();\n        if (s3 !== peg$FAILED) {\n          s4 = [];\n          s5 = peg$currPos;\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseCOMMA();\n            if (s7 !== peg$FAILED) {\n              s8 = peg$parse__();\n              if (s8 !== peg$FAILED) {\n                s9 = peg$parsecte_definition();\n                if (s9 !== peg$FAILED) {\n                  s6 = [s6, s7, s8, s9];\n                  s5 = s6;\n                } else {\n                  peg$currPos = s5;\n                  s5 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s5;\n                s5 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s5;\n              s5 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s5;\n            s5 = peg$FAILED;\n          }\n          while (s5 !== peg$FAILED) {\n            s4.push(s5);\n            s5 = peg$currPos;\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseCOMMA();\n              if (s7 !== peg$FAILED) {\n                s8 = peg$parse__();\n                if (s8 !== peg$FAILED) {\n                  s9 = peg$parsecte_definition();\n                  if (s9 !== peg$FAILED) {\n                    s6 = [s6, s7, s8, s9];\n                    s5 = s6;\n                  } else {\n                    peg$currPos = s5;\n                    s5 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s5;\n                  s5 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s5;\n                s5 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s5;\n              s5 = peg$FAILED;\n            }\n          }\n          if (s4 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c17(s3, s4);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecte_definition() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n    s0 = peg$currPos;\n    s1 = peg$parseliteral_string();\n    if (s1 === peg$FAILED) {\n      s1 = peg$parseident_name();\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_AS();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseLPAREN();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseunion_stmt();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseRPAREN();\n                    if (s9 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s1 = peg$c18(s1, s7);\n                      s0 = s1;\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseselect_stmt_nake() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19, s20, s21, s22, s23;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_SELECT();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse___();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsestruct_value();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseKW_ALL();\n            if (s5 === peg$FAILED) {\n              s5 = peg$parseKW_DISTINCT();\n            }\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parsecolumn_clause();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parsefrom_clause();\n                    if (s9 === peg$FAILED) {\n                      s9 = null;\n                    }\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse__();\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parsefor_sys_time_as_of();\n                        if (s11 === peg$FAILED) {\n                          s11 = null;\n                        }\n                        if (s11 !== peg$FAILED) {\n                          s12 = peg$parse__();\n                          if (s12 !== peg$FAILED) {\n                            s13 = peg$parsewhere_clause();\n                            if (s13 === peg$FAILED) {\n                              s13 = null;\n                            }\n                            if (s13 !== peg$FAILED) {\n                              s14 = peg$parse__();\n                              if (s14 !== peg$FAILED) {\n                                s15 = peg$parsegroup_by_clause();\n                                if (s15 === peg$FAILED) {\n                                  s15 = null;\n                                }\n                                if (s15 !== peg$FAILED) {\n                                  s16 = peg$parse__();\n                                  if (s16 !== peg$FAILED) {\n                                    s17 = peg$parsehaving_clause();\n                                    if (s17 === peg$FAILED) {\n                                      s17 = null;\n                                    }\n                                    if (s17 !== peg$FAILED) {\n                                      s18 = peg$parse__();\n                                      if (s18 !== peg$FAILED) {\n                                        s19 = peg$parseorder_by_clause();\n                                        if (s19 === peg$FAILED) {\n                                          s19 = null;\n                                        }\n                                        if (s19 !== peg$FAILED) {\n                                          s20 = peg$parse__();\n                                          if (s20 !== peg$FAILED) {\n                                            s21 = peg$parselimit_clause();\n                                            if (s21 === peg$FAILED) {\n                                              s21 = null;\n                                            }\n                                            if (s21 !== peg$FAILED) {\n                                              s22 = peg$parse__();\n                                              if (s22 !== peg$FAILED) {\n                                                s23 = peg$parsewindow_clause();\n                                                if (s23 === peg$FAILED) {\n                                                  s23 = null;\n                                                }\n                                                if (s23 !== peg$FAILED) {\n                                                  peg$savedPos = s0;\n                                                  s1 = peg$c19(s3, s5, s7, s9, s11, s13, s15, s17, s19, s21, s23);\n                                                  s0 = s1;\n                                                } else {\n                                                  peg$currPos = s0;\n                                                  s0 = peg$FAILED;\n                                                }\n                                              } else {\n                                                peg$currPos = s0;\n                                                s0 = peg$FAILED;\n                                              }\n                                            } else {\n                                              peg$currPos = s0;\n                                              s0 = peg$FAILED;\n                                            }\n                                          } else {\n                                            peg$currPos = s0;\n                                            s0 = peg$FAILED;\n                                          }\n                                        } else {\n                                          peg$currPos = s0;\n                                          s0 = peg$FAILED;\n                                        }\n                                      } else {\n                                        peg$currPos = s0;\n                                        s0 = peg$FAILED;\n                                      }\n                                    } else {\n                                      peg$currPos = s0;\n                                      s0 = peg$FAILED;\n                                    }\n                                  } else {\n                                    peg$currPos = s0;\n                                    s0 = peg$FAILED;\n                                  }\n                                } else {\n                                  peg$currPos = s0;\n                                  s0 = peg$FAILED;\n                                }\n                              } else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsefor_sys_time_as_of() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c20) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c21); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        if (input.substr(peg$currPos, 11).toLowerCase() === peg$c22) {\n          s3 = input.substr(peg$currPos, 11);\n          peg$currPos += 11;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c23); }\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            if (input.substr(peg$currPos, 2).toLowerCase() === peg$c24) {\n              s5 = input.substr(peg$currPos, 2);\n              peg$currPos += 2;\n            } else {\n              s5 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c25); }\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                if (input.substr(peg$currPos, 2).toLowerCase() === peg$c26) {\n                  s7 = input.substr(peg$currPos, 2);\n                  peg$currPos += 2;\n                } else {\n                  s7 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c27); }\n                }\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseexpr();\n                    if (s9 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s1 = peg$c28(s9);\n                      s0 = s1;\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsestruct_value() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_AS();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_STRUCT();\n        if (s3 === peg$FAILED) {\n          s3 = peg$parseKW_VALUE();\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c29(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseexpr_alias() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseexpr();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsealias_clause();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c30(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecolumn_clause() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n    s0 = peg$currPos;\n    s1 = peg$parseSTAR();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        if (input.substr(peg$currPos, 6).toLowerCase() === peg$c11) {\n          s3 = input.substr(peg$currPos, 6);\n          peg$currPos += 6;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c12); }\n        }\n        if (s3 === peg$FAILED) {\n          if (input.substr(peg$currPos, 7).toLowerCase() === peg$c31) {\n            s3 = input.substr(peg$currPos, 7);\n            peg$currPos += 7;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c32); }\n          }\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseLPAREN();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parsecolumns_list();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseRPAREN();\n                    if (s9 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s1 = peg$c33(s3, s7);\n                      s0 = s1;\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_ALL();\n      if (s1 === peg$FAILED) {\n        s1 = peg$currPos;\n        s2 = peg$parseSTAR();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$currPos;\n          peg$silentFails++;\n          s4 = peg$parseident_start();\n          peg$silentFails--;\n          if (s4 === peg$FAILED) {\n            s3 = void 0;\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n          if (s3 !== peg$FAILED) {\n            s2 = [s2, s3];\n            s1 = s2;\n          } else {\n            peg$currPos = s1;\n            s1 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n        if (s1 === peg$FAILED) {\n          s1 = peg$parseSTAR();\n        }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = [];\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parsecolumn_list_item();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          s3 = peg$currPos;\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseCOMMA();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parsecolumn_list_item();\n                if (s7 !== peg$FAILED) {\n                  s4 = [s4, s5, s6, s7];\n                  s3 = s4;\n                } else {\n                  peg$currPos = s3;\n                  s3 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        }\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parse__();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parseCOMMA();\n            if (s4 === peg$FAILED) {\n              s4 = null;\n            }\n            if (s4 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c34(s1, s2);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parsecolumns_list();\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parse__();\n          if (s2 !== peg$FAILED) {\n            s3 = peg$parseCOMMA();\n            if (s3 === peg$FAILED) {\n              s3 = null;\n            }\n            if (s3 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c35(s1);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsecolumns_list() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsecolumn_list_item();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseCOMMA();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parsecolumn_list_item();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parsecolumn_list_item();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c17(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecolumn_offset_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13;\n\n    s0 = peg$currPos;\n    s1 = peg$parseexpr();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLBRAKE();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseKW_OFFSET();\n            if (s5 === peg$FAILED) {\n              s5 = peg$parseKW_ORDINAL();\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseLPAREN();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseliteral_numeric();\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse__();\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parseRPAREN();\n                        if (s11 !== peg$FAILED) {\n                          s12 = peg$parse__();\n                          if (s12 !== peg$FAILED) {\n                            s13 = peg$parseRBRAKE();\n                            if (s13 !== peg$FAILED) {\n                              peg$savedPos = s0;\n                              s1 = peg$c36(s1, s5, s9);\n                              s0 = s1;\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecolumn_list_item() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseident();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseDOT();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$currPos;\n          s5 = peg$parsecolumn_offset_expr();\n          if (s5 === peg$FAILED) {\n            s5 = peg$parseident();\n          }\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseDOT();\n              if (s7 !== peg$FAILED) {\n                s5 = [s5, s6, s7];\n                s4 = s5;\n              } else {\n                peg$currPos = s4;\n                s4 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s4;\n              s4 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s4;\n            s4 = peg$FAILED;\n          }\n          if (s4 === peg$FAILED) {\n            s4 = null;\n          }\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parse__();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parseSTAR();\n              if (s6 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c37(s1, s4);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parsecolumn_offset_expr();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parsealias_clause();\n          if (s3 === peg$FAILED) {\n            s3 = null;\n          }\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c38(s1, s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseexpr_alias();\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsealias_clause() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_AS();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsealias_ident();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c39(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_AS();\n      if (s1 === peg$FAILED) {\n        s1 = null;\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseident();\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c39(s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsefrom_clause() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_FROM();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        if (input.substr(peg$currPos, 6).toLowerCase() === peg$c40) {\n          s3 = input.substr(peg$currPos, 6);\n          peg$currPos += 6;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c41); }\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseLPAREN();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseexpr();\n                if (s7 === peg$FAILED) {\n                  s7 = null;\n                }\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseRPAREN();\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse__();\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parsealias_clause();\n                        if (s11 === peg$FAILED) {\n                          s11 = null;\n                        }\n                        if (s11 !== peg$FAILED) {\n                          s12 = peg$parse__();\n                          if (s12 !== peg$FAILED) {\n                            s13 = peg$parsewith_offset();\n                            if (s13 === peg$FAILED) {\n                              s13 = null;\n                            }\n                            if (s13 !== peg$FAILED) {\n                              peg$savedPos = s0;\n                              s1 = peg$c42(s7, s11, s13);\n                              s0 = s1;\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_FROM();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parsetable_ref_list();\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c43(s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsewith_offset() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_WITH();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_OFFSET();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsealias_clause();\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c44(s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsetable_to_list() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsetable_to_item();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseCOMMA();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parsetable_to_item();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parsetable_to_item();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c17(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsetable_to_item() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parsetable_name();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_TO();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsetable_name();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c45(s1, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsetable_ref_list() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parsetable_base();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$parsetable_ref();\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$parsetable_ref();\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c46(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsetable_ref() {\n    var s0, s1, s2, s3, s4;\n\n    s0 = peg$currPos;\n    s1 = peg$parse__();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parseCOMMA();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parse__();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parsetable_base();\n          if (s4 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c47(s4);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parse__();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parsetable_join();\n        if (s2 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c47(s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsetable_join() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15;\n\n    s0 = peg$currPos;\n    s1 = peg$parsejoin_op();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsetable_base();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseKW_USING();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseLPAREN();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseident_name();\n                    if (s9 !== peg$FAILED) {\n                      s10 = [];\n                      s11 = peg$currPos;\n                      s12 = peg$parse__();\n                      if (s12 !== peg$FAILED) {\n                        s13 = peg$parseCOMMA();\n                        if (s13 !== peg$FAILED) {\n                          s14 = peg$parse__();\n                          if (s14 !== peg$FAILED) {\n                            s15 = peg$parseident_name();\n                            if (s15 !== peg$FAILED) {\n                              s12 = [s12, s13, s14, s15];\n                              s11 = s12;\n                            } else {\n                              peg$currPos = s11;\n                              s11 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s11;\n                            s11 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s11;\n                          s11 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s11;\n                        s11 = peg$FAILED;\n                      }\n                      while (s11 !== peg$FAILED) {\n                        s10.push(s11);\n                        s11 = peg$currPos;\n                        s12 = peg$parse__();\n                        if (s12 !== peg$FAILED) {\n                          s13 = peg$parseCOMMA();\n                          if (s13 !== peg$FAILED) {\n                            s14 = peg$parse__();\n                            if (s14 !== peg$FAILED) {\n                              s15 = peg$parseident_name();\n                              if (s15 !== peg$FAILED) {\n                                s12 = [s12, s13, s14, s15];\n                                s11 = s12;\n                              } else {\n                                peg$currPos = s11;\n                                s11 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s11;\n                              s11 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s11;\n                            s11 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s11;\n                          s11 = peg$FAILED;\n                        }\n                      }\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parse__();\n                        if (s11 !== peg$FAILED) {\n                          s12 = peg$parseRPAREN();\n                          if (s12 !== peg$FAILED) {\n                            peg$savedPos = s0;\n                            s1 = peg$c48(s1, s3, s9, s10);\n                            s0 = s1;\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parsejoin_op();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parsetable_base();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse__();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parseon_clause();\n              if (s5 === peg$FAILED) {\n                s5 = null;\n              }\n              if (s5 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c49(s1, s3, s5);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parsejoin_op();\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parse__();\n          if (s2 !== peg$FAILED) {\n            s3 = peg$parseLPAREN();\n            if (s3 !== peg$FAILED) {\n              s4 = peg$parse__();\n              if (s4 !== peg$FAILED) {\n                s5 = peg$parseunion_stmt();\n                if (s5 !== peg$FAILED) {\n                  s6 = peg$parse__();\n                  if (s6 !== peg$FAILED) {\n                    s7 = peg$parseRPAREN();\n                    if (s7 !== peg$FAILED) {\n                      s8 = peg$parse__();\n                      if (s8 !== peg$FAILED) {\n                        s9 = peg$parsealias_clause();\n                        if (s9 === peg$FAILED) {\n                          s9 = null;\n                        }\n                        if (s9 !== peg$FAILED) {\n                          s10 = peg$parse__();\n                          if (s10 !== peg$FAILED) {\n                            s11 = peg$parseon_clause();\n                            if (s11 === peg$FAILED) {\n                              s11 = null;\n                            }\n                            if (s11 !== peg$FAILED) {\n                              peg$savedPos = s0;\n                              s1 = peg$c50(s1, s5, s9, s11);\n                              s0 = s1;\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsetable_base() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsetable_name();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsealias_clause();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c51(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseLPAREN();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseunion_stmt();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse__();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parseRPAREN();\n              if (s5 !== peg$FAILED) {\n                s6 = peg$parse__();\n                if (s6 !== peg$FAILED) {\n                  s7 = peg$parsealias_clause();\n                  if (s7 === peg$FAILED) {\n                    s7 = null;\n                  }\n                  if (s7 !== peg$FAILED) {\n                    peg$savedPos = s0;\n                    s1 = peg$c52(s3, s7);\n                    s0 = s1;\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsejoin_op() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_LEFT();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_OUTER();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseKW_JOIN();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c53();\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_RIGHT();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseKW_OUTER();\n          if (s3 === peg$FAILED) {\n            s3 = null;\n          }\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse__();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parseKW_JOIN();\n              if (s5 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c54();\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parseKW_FULL();\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parse__();\n          if (s2 !== peg$FAILED) {\n            s3 = peg$parseKW_OUTER();\n            if (s3 === peg$FAILED) {\n              s3 = null;\n            }\n            if (s3 !== peg$FAILED) {\n              s4 = peg$parse__();\n              if (s4 !== peg$FAILED) {\n                s5 = peg$parseKW_JOIN();\n                if (s5 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c55();\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          s1 = peg$parseKW_CROSS();\n          if (s1 !== peg$FAILED) {\n            s2 = peg$parse__();\n            if (s2 !== peg$FAILED) {\n              s3 = peg$parseKW_JOIN();\n              if (s3 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c56(s1);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n          if (s0 === peg$FAILED) {\n            s0 = peg$currPos;\n            s1 = peg$parseKW_INNER();\n            if (s1 === peg$FAILED) {\n              s1 = null;\n            }\n            if (s1 !== peg$FAILED) {\n              s2 = peg$parse__();\n              if (s2 !== peg$FAILED) {\n                s3 = peg$parseKW_JOIN();\n                if (s3 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c57(s1);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsetable_name() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseident();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      s3 = peg$parse__();\n      if (s3 !== peg$FAILED) {\n        s4 = peg$parseDOT();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parse__();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parseident();\n            if (s6 !== peg$FAILED) {\n              s3 = [s3, s4, s5, s6];\n              s2 = s3;\n            } else {\n              peg$currPos = s2;\n              s2 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s2;\n            s2 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s2;\n          s2 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseDOT();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseident();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c58(s1, s2, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseident();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$currPos;\n        s3 = peg$parse__();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parseDOT();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parse__();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parseident();\n              if (s6 !== peg$FAILED) {\n                s3 = [s3, s4, s5, s6];\n                s2 = s3;\n              } else {\n                peg$currPos = s2;\n                s2 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s2;\n              s2 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s2;\n            s2 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s2;\n          s2 = peg$FAILED;\n        }\n        if (s2 === peg$FAILED) {\n          s2 = null;\n        }\n        if (s2 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c59(s1, s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseon_clause() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_ON();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseexpr();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c60(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsewhere_clause() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_WHERE();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseor_and_where_expr();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c60(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsegroup_by_clause() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_GROUP();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_BY();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseexpr_list();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c61(s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsehaving_clause() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_HAVING();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseexpr();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c60(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsewindow_clause() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_WINDOW();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsenamed_window_expr_list();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c62(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsenamed_window_expr_list() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsenamed_window_expr();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseCOMMA();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parsenamed_window_expr();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parsenamed_window_expr();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c17(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsenamed_window_expr() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseident_name();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_AS();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseas_window_specification();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c63(s1, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseas_window_specification() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseident_name();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c64(s1);\n    }\n    s0 = s1;\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseLPAREN();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parsewindow_specification();\n          if (s3 === peg$FAILED) {\n            s3 = null;\n          }\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse__();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parseRPAREN();\n              if (s5 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c65(s3);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsewindow_specification() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseident();\n    if (s1 === peg$FAILED) {\n      s1 = null;\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsepartition_by_clause();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseorder_by_clause();\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parsewindow_frame_clause();\n                if (s7 === peg$FAILED) {\n                  s7 = null;\n                }\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c66(s1, s3, s5, s7);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsewindow_frame_clause() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c67) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c68); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_BETWEEN();\n        if (s3 !== peg$FAILED) {\n          if (input.substr(peg$currPos, 9).toLowerCase() === peg$c69) {\n            s4 = input.substr(peg$currPos, 9);\n            peg$currPos += 9;\n          } else {\n            s4 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c70); }\n          }\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parse__();\n            if (s5 !== peg$FAILED) {\n              if (input.substr(peg$currPos, 9).toLowerCase() === peg$c71) {\n                s6 = input.substr(peg$currPos, 9);\n                peg$currPos += 9;\n              } else {\n                s6 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c72); }\n              }\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parse__();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parseKW_AND();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parse__();\n                    if (s9 !== peg$FAILED) {\n                      if (input.substr(peg$currPos, 7).toLowerCase() === peg$c73) {\n                        s10 = input.substr(peg$currPos, 7);\n                        peg$currPos += 7;\n                      } else {\n                        s10 = peg$FAILED;\n                        if (peg$silentFails === 0) { peg$fail(peg$c74); }\n                      }\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parse__();\n                        if (s11 !== peg$FAILED) {\n                          if (input.substr(peg$currPos, 3) === peg$c75) {\n                            s12 = peg$c75;\n                            peg$currPos += 3;\n                          } else {\n                            s12 = peg$FAILED;\n                            if (peg$silentFails === 0) { peg$fail(peg$c76); }\n                          }\n                          if (s12 !== peg$FAILED) {\n                            peg$savedPos = s0;\n                            s1 = peg$c77();\n                            s0 = s1;\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      if (input.substr(peg$currPos, 4).toLowerCase() === peg$c78) {\n        s1 = input.substr(peg$currPos, 4);\n        peg$currPos += 4;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c79); }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseKW_BETWEEN();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse__();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parseliteral_numeric();\n              if (s5 !== peg$FAILED) {\n                s6 = peg$parse__();\n                if (s6 !== peg$FAILED) {\n                  if (input.substr(peg$currPos, 9).toLowerCase() === peg$c71) {\n                    s7 = input.substr(peg$currPos, 9);\n                    peg$currPos += 9;\n                  } else {\n                    s7 = peg$FAILED;\n                    if (peg$silentFails === 0) { peg$fail(peg$c72); }\n                  }\n                  if (s7 !== peg$FAILED) {\n                    s8 = peg$parse__();\n                    if (s8 !== peg$FAILED) {\n                      s9 = peg$parseKW_AND();\n                      if (s9 !== peg$FAILED) {\n                        s10 = peg$parse__();\n                        if (s10 !== peg$FAILED) {\n                          s11 = peg$parseliteral_numeric();\n                          if (s11 !== peg$FAILED) {\n                            s12 = peg$parse__();\n                            if (s12 !== peg$FAILED) {\n                              if (input.substr(peg$currPos, 9).toLowerCase() === peg$c80) {\n                                s13 = input.substr(peg$currPos, 9);\n                                peg$currPos += 9;\n                              } else {\n                                s13 = peg$FAILED;\n                                if (peg$silentFails === 0) { peg$fail(peg$c81); }\n                              }\n                              if (s13 !== peg$FAILED) {\n                                peg$savedPos = s0;\n                                s1 = peg$c82(s5, s11);\n                                s0 = s1;\n                              } else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsepartition_by_clause() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_PARTITION();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_BY();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsecolumn_clause();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c83(s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseorder_by_clause() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_ORDER();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_BY();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseorder_by_list();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c43(s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseorder_by_list() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseorder_by_element();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseCOMMA();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseorder_by_element();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseorder_by_element();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c17(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseorder_by_element() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseexpr();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_DESC();\n        if (s3 === peg$FAILED) {\n          s3 = peg$parseKW_ASC();\n        }\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c84(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsenumber_or_param() {\n    var s0;\n\n    s0 = peg$parseliteral_numeric();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseparam();\n    }\n\n    return s0;\n  }\n\n  function peg$parselimit_clause() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_LIMIT();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsenumber_or_param();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$currPos;\n            s6 = peg$parseCOMMA();\n            if (s6 === peg$FAILED) {\n              s6 = peg$parseKW_OFFSET();\n            }\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parse__();\n              if (s7 !== peg$FAILED) {\n                s8 = peg$parsenumber_or_param();\n                if (s8 !== peg$FAILED) {\n                  s6 = [s6, s7, s8];\n                  s5 = s6;\n                } else {\n                  peg$currPos = s5;\n                  s5 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s5;\n                s5 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s5;\n              s5 = peg$FAILED;\n            }\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c85(s3, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseexpr_list() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseexpr();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseCOMMA();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseexpr();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseexpr();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c86(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseexpr() {\n    var s0;\n\n    s0 = peg$parsestruct_expr();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parselogic_operator_expr();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseor_expr();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parseunary_expr();\n          if (s0 === peg$FAILED) {\n            s0 = peg$parseselect_stmt();\n            if (s0 === peg$FAILED) {\n              s0 = peg$parsearray_expr();\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseparentheses_list_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseparentheses_expr();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseCOMMA();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseparentheses_expr();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseparentheses_expr();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c17(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseparentheses_expr() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseLPAREN();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsecolumn_clause();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseRPAREN();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c35(s3);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsearray_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseLBRAKE();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsecolumn_clause();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseRBRAKE();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c87(s3);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parsearray_type();\n      if (s1 === peg$FAILED) {\n        s1 = peg$parseKW_ARRAY();\n      }\n      if (s1 === peg$FAILED) {\n        s1 = null;\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parseLBRAKE();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parse__();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parseliteral_list();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parse__();\n              if (s5 !== peg$FAILED) {\n                s6 = peg$parseRBRAKE();\n                if (s6 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c88(s1, s4);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parsearray_type();\n        if (s1 === peg$FAILED) {\n          s1 = peg$parseKW_ARRAY();\n        }\n        if (s1 === peg$FAILED) {\n          s1 = null;\n        }\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parse__();\n          if (s2 !== peg$FAILED) {\n            s3 = peg$parseLBRAKE();\n            if (s3 === peg$FAILED) {\n              s3 = peg$parseLPAREN();\n            }\n            if (s3 !== peg$FAILED) {\n              s4 = peg$parse__();\n              if (s4 !== peg$FAILED) {\n                s5 = peg$parseparentheses_list_expr();\n                if (s5 === peg$FAILED) {\n                  s5 = peg$parseexpr();\n                }\n                if (s5 !== peg$FAILED) {\n                  s6 = peg$parse__();\n                  if (s6 !== peg$FAILED) {\n                    s7 = peg$parseRBRAKE();\n                    if (s7 === peg$FAILED) {\n                      s7 = peg$parseRPAREN();\n                    }\n                    if (s7 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s1 = peg$c89(s1, s5);\n                      s0 = s1;\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsestruct_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsestruct_type();\n    if (s1 === peg$FAILED) {\n      s1 = peg$parseKW_STRUCT();\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLPAREN();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsecolumn_clause();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseRPAREN();\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c90(s1, s5);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parselogic_operator_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseprimary();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseLOGIC_OPERATOR();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseprimary();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      if (s3 !== peg$FAILED) {\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          s3 = peg$currPos;\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseLOGIC_OPERATOR();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseprimary();\n                if (s7 !== peg$FAILED) {\n                  s4 = [s4, s5, s6, s7];\n                  s3 = s4;\n                } else {\n                  peg$currPos = s3;\n                  s3 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        }\n      } else {\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c91(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseunary_expr() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseadditive_operator();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseprimary();\n        if (s5 !== peg$FAILED) {\n          s4 = [s4, s5];\n          s3 = s4;\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      if (s3 !== peg$FAILED) {\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          s3 = peg$currPos;\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseprimary();\n            if (s5 !== peg$FAILED) {\n              s4 = [s4, s5];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        }\n      } else {\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c92(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseor_and_where_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseexpr();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseKW_AND();\n        if (s5 === peg$FAILED) {\n          s5 = peg$parseKW_OR();\n          if (s5 === peg$FAILED) {\n            s5 = peg$parseCOMMA();\n          }\n        }\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseexpr();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseKW_AND();\n          if (s5 === peg$FAILED) {\n            s5 = peg$parseKW_OR();\n            if (s5 === peg$FAILED) {\n              s5 = peg$parseCOMMA();\n            }\n          }\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseexpr();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c93(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseor_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseand_expr();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse___();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseKW_OR();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseand_expr();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse___();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseKW_OR();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseand_expr();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c94(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseand_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsenot_expr();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse___();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseKW_AND();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parsenot_expr();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse___();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseKW_AND();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parsenot_expr();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c94(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsenot_expr() {\n    var s0, s1, s2, s3, s4;\n\n    s0 = peg$parsecomparison_expr();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseexists_expr();\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parseKW_NOT();\n        if (s1 === peg$FAILED) {\n          s1 = peg$currPos;\n          if (input.charCodeAt(peg$currPos) === 33) {\n            s2 = peg$c95;\n            peg$currPos++;\n          } else {\n            s2 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c96); }\n          }\n          if (s2 !== peg$FAILED) {\n            s3 = peg$currPos;\n            peg$silentFails++;\n            if (input.charCodeAt(peg$currPos) === 61) {\n              s4 = peg$c97;\n              peg$currPos++;\n            } else {\n              s4 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c98); }\n            }\n            peg$silentFails--;\n            if (s4 === peg$FAILED) {\n              s3 = void 0;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n            if (s3 !== peg$FAILED) {\n              s2 = [s2, s3];\n              s1 = s2;\n            } else {\n              peg$currPos = s1;\n              s1 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s1;\n            s1 = peg$FAILED;\n          }\n        }\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parse__();\n          if (s2 !== peg$FAILED) {\n            s3 = peg$parsenot_expr();\n            if (s3 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c99(s3);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsecomparison_expr() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseadditive_expr();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsecomparison_op_right();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c100(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseliteral_string();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parsecolumn_ref();\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseexists_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseexists_op();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLPAREN();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseunion_stmt();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseRPAREN();\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c101(s1, s5);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseexists_op() {\n    var s0, s1, s2, s3, s4;\n\n    s0 = peg$currPos;\n    s1 = peg$currPos;\n    s2 = peg$parseKW_NOT();\n    if (s2 !== peg$FAILED) {\n      s3 = peg$parse__();\n      if (s3 !== peg$FAILED) {\n        s4 = peg$parseKW_EXISTS();\n        if (s4 !== peg$FAILED) {\n          s2 = [s2, s3, s4];\n          s1 = s2;\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s1;\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c102(s1);\n    }\n    s0 = s1;\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseKW_EXISTS();\n    }\n\n    return s0;\n  }\n\n  function peg$parsecomparison_op_right() {\n    var s0;\n\n    s0 = peg$parsearithmetic_op_right();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsein_op_right();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parsebetween_op_right();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parseis_op_right();\n          if (s0 === peg$FAILED) {\n            s0 = peg$parselike_op_right();\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsearithmetic_op_right() {\n    var s0, s1, s2, s3, s4, s5, s6;\n\n    s0 = peg$currPos;\n    s1 = [];\n    s2 = peg$currPos;\n    s3 = peg$parse__();\n    if (s3 !== peg$FAILED) {\n      s4 = peg$parsearithmetic_comparison_operator();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parse__();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parseadditive_expr();\n          if (s6 !== peg$FAILED) {\n            s3 = [s3, s4, s5, s6];\n            s2 = s3;\n          } else {\n            peg$currPos = s2;\n            s2 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s2;\n          s2 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s2;\n      s2 = peg$FAILED;\n    }\n    if (s2 !== peg$FAILED) {\n      while (s2 !== peg$FAILED) {\n        s1.push(s2);\n        s2 = peg$currPos;\n        s3 = peg$parse__();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parsearithmetic_comparison_operator();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parse__();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parseadditive_expr();\n              if (s6 !== peg$FAILED) {\n                s3 = [s3, s4, s5, s6];\n                s2 = s3;\n              } else {\n                peg$currPos = s2;\n                s2 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s2;\n              s2 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s2;\n            s2 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s2;\n          s2 = peg$FAILED;\n        }\n      }\n    } else {\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c103(s1);\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parsearithmetic_comparison_operator() {\n    var s0;\n\n    if (input.substr(peg$currPos, 2) === peg$c104) {\n      s0 = peg$c104;\n      peg$currPos += 2;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c105); }\n    }\n    if (s0 === peg$FAILED) {\n      if (input.charCodeAt(peg$currPos) === 62) {\n        s0 = peg$c106;\n        peg$currPos++;\n      } else {\n        s0 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c107); }\n      }\n      if (s0 === peg$FAILED) {\n        if (input.substr(peg$currPos, 2) === peg$c108) {\n          s0 = peg$c108;\n          peg$currPos += 2;\n        } else {\n          s0 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c109); }\n        }\n        if (s0 === peg$FAILED) {\n          if (input.substr(peg$currPos, 2) === peg$c110) {\n            s0 = peg$c110;\n            peg$currPos += 2;\n          } else {\n            s0 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c111); }\n          }\n          if (s0 === peg$FAILED) {\n            if (input.charCodeAt(peg$currPos) === 60) {\n              s0 = peg$c112;\n              peg$currPos++;\n            } else {\n              s0 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c113); }\n            }\n            if (s0 === peg$FAILED) {\n              if (input.charCodeAt(peg$currPos) === 61) {\n                s0 = peg$c97;\n                peg$currPos++;\n              } else {\n                s0 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c98); }\n              }\n              if (s0 === peg$FAILED) {\n                if (input.substr(peg$currPos, 2) === peg$c114) {\n                  s0 = peg$c114;\n                  peg$currPos += 2;\n                } else {\n                  s0 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c115); }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseis_op_right() {\n    var s0, s1, s2, s3, s4;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_IS();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseadditive_expr();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c116(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$currPos;\n      s2 = peg$parseKW_IS();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parse__();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parseKW_NOT();\n          if (s4 !== peg$FAILED) {\n            s2 = [s2, s3, s4];\n            s1 = s2;\n          } else {\n            peg$currPos = s1;\n            s1 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseadditive_expr();\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c117(s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsebetween_op_right() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsebetween_or_not_between_op();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseadditive_expr();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseKW_AND();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseadditive_expr();\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c118(s1, s3, s7);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsebetween_or_not_between_op() {\n    var s0, s1, s2, s3, s4;\n\n    s0 = peg$currPos;\n    s1 = peg$currPos;\n    s2 = peg$parseKW_NOT();\n    if (s2 !== peg$FAILED) {\n      s3 = peg$parse__();\n      if (s3 !== peg$FAILED) {\n        s4 = peg$parseKW_BETWEEN();\n        if (s4 !== peg$FAILED) {\n          s2 = [s2, s3, s4];\n          s1 = s2;\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s1;\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c102(s1);\n    }\n    s0 = s1;\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseKW_BETWEEN();\n    }\n\n    return s0;\n  }\n\n  function peg$parselike_op() {\n    var s0, s1, s2, s3, s4;\n\n    s0 = peg$currPos;\n    s1 = peg$currPos;\n    s2 = peg$parseKW_NOT();\n    if (s2 !== peg$FAILED) {\n      s3 = peg$parse__();\n      if (s3 !== peg$FAILED) {\n        s4 = peg$parseKW_LIKE();\n        if (s4 !== peg$FAILED) {\n          s2 = [s2, s3, s4];\n          s1 = s2;\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s1;\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c102(s1);\n    }\n    s0 = s1;\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseKW_LIKE();\n    }\n\n    return s0;\n  }\n\n  function peg$parsein_op() {\n    var s0, s1, s2, s3, s4;\n\n    s0 = peg$currPos;\n    s1 = peg$currPos;\n    s2 = peg$parseKW_NOT();\n    if (s2 !== peg$FAILED) {\n      s3 = peg$parse__();\n      if (s3 !== peg$FAILED) {\n        s4 = peg$parseKW_IN();\n        if (s4 !== peg$FAILED) {\n          s2 = [s2, s3, s4];\n          s1 = s2;\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s1;\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c102(s1);\n    }\n    s0 = s1;\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseKW_IN();\n    }\n\n    return s0;\n  }\n\n  function peg$parselike_op_right() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parselike_op();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseliteral();\n        if (s3 === peg$FAILED) {\n          s3 = peg$parsecomparison_expr();\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c119(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsein_op_right() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsein_op();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLPAREN();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseexpr_list();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseRPAREN();\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c120(s1, s5);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parsein_op();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseliteral_string();\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c121(s1, s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseadditive_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsemultiplicative_expr();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseadditive_operator();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parsemultiplicative_expr();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseadditive_operator();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parsemultiplicative_expr();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c94(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseadditive_operator() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 43) {\n      s0 = peg$c122;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c123); }\n    }\n    if (s0 === peg$FAILED) {\n      if (input.charCodeAt(peg$currPos) === 45) {\n        s0 = peg$c124;\n        peg$currPos++;\n      } else {\n        s0 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c125); }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsemultiplicative_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseprimary();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parsemultiplicative_operator();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseprimary();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parsemultiplicative_operator();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseprimary();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c126(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsemultiplicative_operator() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 42) {\n      s0 = peg$c127;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c128); }\n    }\n    if (s0 === peg$FAILED) {\n      if (input.charCodeAt(peg$currPos) === 47) {\n        s0 = peg$c129;\n        peg$currPos++;\n      } else {\n        s0 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c130); }\n      }\n      if (s0 === peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 37) {\n          s0 = peg$c131;\n          peg$currPos++;\n        } else {\n          s0 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c132); }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseprimary() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$parsecast_expr();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseliteral();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseaggr_func();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parsefunc_call();\n          if (s0 === peg$FAILED) {\n            s0 = peg$parsecase_expr();\n            if (s0 === peg$FAILED) {\n              s0 = peg$parseinterval_expr();\n              if (s0 === peg$FAILED) {\n                s0 = peg$parsecolumn_ref();\n                if (s0 === peg$FAILED) {\n                  s0 = peg$parseparam();\n                  if (s0 === peg$FAILED) {\n                    s0 = peg$currPos;\n                    s1 = peg$parseLPAREN();\n                    if (s1 !== peg$FAILED) {\n                      s2 = peg$parse__();\n                      if (s2 !== peg$FAILED) {\n                        s3 = peg$parseor_and_where_expr();\n                        if (s3 !== peg$FAILED) {\n                          s4 = peg$parse__();\n                          if (s4 !== peg$FAILED) {\n                            s5 = peg$parseRPAREN();\n                            if (s5 !== peg$FAILED) {\n                              peg$savedPos = s0;\n                              s1 = peg$c133(s3);\n                              s0 = s1;\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseinterval_expr() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_INTERVAL();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseexpr();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseinterval_unit();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c134(s3, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecase_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_CASE();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = [];\n        s4 = peg$parsecase_when_then();\n        if (s4 !== peg$FAILED) {\n          while (s4 !== peg$FAILED) {\n            s3.push(s4);\n            s4 = peg$parsecase_when_then();\n          }\n        } else {\n          s3 = peg$FAILED;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsecase_else();\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseKW_END();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseKW_CASE();\n                    if (s9 === peg$FAILED) {\n                      s9 = null;\n                    }\n                    if (s9 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s1 = peg$c135(s3, s5);\n                      s0 = s1;\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_CASE();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseexpr();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse__();\n            if (s4 !== peg$FAILED) {\n              s5 = [];\n              s6 = peg$parsecase_when_then();\n              if (s6 !== peg$FAILED) {\n                while (s6 !== peg$FAILED) {\n                  s5.push(s6);\n                  s6 = peg$parsecase_when_then();\n                }\n              } else {\n                s5 = peg$FAILED;\n              }\n              if (s5 !== peg$FAILED) {\n                s6 = peg$parse__();\n                if (s6 !== peg$FAILED) {\n                  s7 = peg$parsecase_else();\n                  if (s7 === peg$FAILED) {\n                    s7 = null;\n                  }\n                  if (s7 !== peg$FAILED) {\n                    s8 = peg$parse__();\n                    if (s8 !== peg$FAILED) {\n                      s9 = peg$parseKW_END();\n                      if (s9 !== peg$FAILED) {\n                        s10 = peg$parse__();\n                        if (s10 !== peg$FAILED) {\n                          s11 = peg$parseKW_CASE();\n                          if (s11 === peg$FAILED) {\n                            s11 = null;\n                          }\n                          if (s11 !== peg$FAILED) {\n                            peg$savedPos = s0;\n                            s1 = peg$c136(s3, s5, s7);\n                            s0 = s1;\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsecase_when_then() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_WHEN();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseor_and_where_expr();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseKW_THEN();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseexpr();\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c137(s3, s7);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecase_else() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_ELSE();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseexpr();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c138(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecolumn_ref() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseident();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseDOT();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsecolumn_without_kw();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c139(s1, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parsecolumn();\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c140(s1);\n      }\n      s0 = s1;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecolumn_list() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsecolumn();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseCOMMA();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parsecolumn();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parsecolumn();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c17(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseident() {\n    var s0, s1, s2;\n\n    s0 = peg$currPos;\n    s1 = peg$parseident_name();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = peg$currPos;\n      s2 = peg$c141(s1);\n      if (s2) {\n        s2 = peg$FAILED;\n      } else {\n        s2 = void 0;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c142(s1);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parsequoted_ident();\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c142(s1);\n      }\n      s0 = s1;\n    }\n\n    return s0;\n  }\n\n  function peg$parsealias_ident() {\n    var s0, s1, s2;\n\n    s0 = peg$currPos;\n    s1 = peg$parseident_name();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = peg$currPos;\n      s2 = peg$c143(s1);\n      if (s2) {\n        s2 = peg$FAILED;\n      } else {\n        s2 = void 0;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c142(s1);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parsequoted_ident();\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c142(s1);\n      }\n      s0 = s1;\n    }\n\n    return s0;\n  }\n\n  function peg$parsequoted_ident() {\n    var s0;\n\n    s0 = peg$parsedouble_quoted_ident();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsesingle_quoted_ident();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parsebackticks_quoted_ident();\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsedouble_quoted_ident() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.charCodeAt(peg$currPos) === 34) {\n      s1 = peg$c144;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c145); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      if (peg$c146.test(input.charAt(peg$currPos))) {\n        s3 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s3 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c147); }\n      }\n      if (s3 !== peg$FAILED) {\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          if (peg$c146.test(input.charAt(peg$currPos))) {\n            s3 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c147); }\n          }\n        }\n      } else {\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 34) {\n          s3 = peg$c144;\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c145); }\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c148(s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsesingle_quoted_ident() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.charCodeAt(peg$currPos) === 39) {\n      s1 = peg$c149;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c150); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      if (peg$c151.test(input.charAt(peg$currPos))) {\n        s3 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s3 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c152); }\n      }\n      if (s3 !== peg$FAILED) {\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          if (peg$c151.test(input.charAt(peg$currPos))) {\n            s3 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c152); }\n          }\n        }\n      } else {\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 39) {\n          s3 = peg$c149;\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c150); }\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c148(s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsebackticks_quoted_ident() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.charCodeAt(peg$currPos) === 96) {\n      s1 = peg$c153;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c154); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      if (peg$c155.test(input.charAt(peg$currPos))) {\n        s3 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s3 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c156); }\n      }\n      if (s3 !== peg$FAILED) {\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          if (peg$c155.test(input.charAt(peg$currPos))) {\n            s3 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c156); }\n          }\n        }\n      } else {\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 96) {\n          s3 = peg$c153;\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c154); }\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c157(s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecolumn_without_kw() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    s1 = peg$parsecolumn_name();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c158(s1);\n    }\n    s0 = s1;\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsequoted_ident();\n    }\n\n    return s0;\n  }\n\n  function peg$parsecolumn() {\n    var s0, s1, s2;\n\n    s0 = peg$currPos;\n    s1 = peg$parsecolumn_name();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = peg$currPos;\n      s2 = peg$c141(s1);\n      if (s2) {\n        s2 = peg$FAILED;\n      } else {\n        s2 = void 0;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c159(s1);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsequoted_ident();\n    }\n\n    return s0;\n  }\n\n  function peg$parsecolumn_name() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseident_start();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$parsecolumn_part();\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$parsecolumn_part();\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c160(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseident_name() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseident_start();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$parseident_part();\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$parseident_part();\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c160(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseident_start() {\n    var s0;\n\n    if (peg$c161.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c162); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseident_part() {\n    var s0;\n\n    if (peg$c163.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c164); }\n    }\n\n    return s0;\n  }\n\n  function peg$parsecolumn_part() {\n    var s0;\n\n    if (peg$c165.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c166); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseparam() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$currPos;\n    if (input.charCodeAt(peg$currPos) === 58) {\n      s2 = peg$c167;\n      peg$currPos++;\n    } else {\n      s2 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c168); }\n    }\n    if (s2 !== peg$FAILED) {\n      s3 = peg$parseident_name();\n      if (s3 !== peg$FAILED) {\n        s2 = [s2, s3];\n        s1 = s2;\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s1;\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c169(s1);\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parseaggr_func() {\n    var s0;\n\n    s0 = peg$parseaggr_fun_count();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseaggr_fun_smma();\n    }\n\n    return s0;\n  }\n\n  function peg$parseaggr_fun_smma() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_SUM_MAX_MIN_AVG();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLPAREN();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseadditive_expr();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseRPAREN();\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c170(s1, s5);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_SUM_MAX_MIN_AVG() {\n    var s0;\n\n    s0 = peg$parseKW_SUM();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseKW_MAX();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseKW_MIN();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parseKW_AVG();\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseon_update_current_timestamp() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_ON();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        if (input.substr(peg$currPos, 6).toLowerCase() === peg$c171) {\n          s3 = input.substr(peg$currPos, 6);\n          peg$currPos += 6;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c172); }\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseKW_CURRENT_TIMESTAMP();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseLPAREN();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseexpr_list();\n                    if (s9 === peg$FAILED) {\n                      s9 = null;\n                    }\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse__();\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parseRPAREN();\n                        if (s11 !== peg$FAILED) {\n                          peg$savedPos = s0;\n                          s1 = peg$c173(s5, s9);\n                          s0 = s1;\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_ON();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          if (input.substr(peg$currPos, 6).toLowerCase() === peg$c171) {\n            s3 = input.substr(peg$currPos, 6);\n            peg$currPos += 6;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c172); }\n          }\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse__();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parseKW_CURRENT_TIMESTAMP();\n              if (s5 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c174(s5);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseover_partition() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_OVER();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseas_window_specification();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c175(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_OVER();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseLPAREN();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse__();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parsepartition_by_clause();\n              if (s5 !== peg$FAILED) {\n                s6 = peg$parse__();\n                if (s6 !== peg$FAILED) {\n                  s7 = peg$parseorder_by_clause();\n                  if (s7 === peg$FAILED) {\n                    s7 = null;\n                  }\n                  if (s7 !== peg$FAILED) {\n                    s8 = peg$parse__();\n                    if (s8 !== peg$FAILED) {\n                      s9 = peg$parseRPAREN();\n                      if (s9 !== peg$FAILED) {\n                        peg$savedPos = s0;\n                        s1 = peg$c176(s5, s7);\n                        s0 = s1;\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseon_update_current_timestamp();\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseaggr_fun_count() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_COUNT();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLPAREN();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsecount_arg();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseRPAREN();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseover_partition();\n                    if (s9 === peg$FAILED) {\n                      s9 = null;\n                    }\n                    if (s9 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s1 = peg$c177(s1, s5, s9);\n                      s0 = s1;\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecount_arg() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n    s0 = peg$currPos;\n    s1 = peg$parsestar_expr();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c178(s1);\n    }\n    s0 = s1;\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_DISTINCT();\n      if (s1 === peg$FAILED) {\n        s1 = null;\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parsecolumn_ref();\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c179(s1, s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parseKW_DISTINCT();\n        if (s1 === peg$FAILED) {\n          s1 = null;\n        }\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parse__();\n          if (s2 !== peg$FAILED) {\n            s3 = peg$parseLPAREN();\n            if (s3 !== peg$FAILED) {\n              s4 = peg$parse__();\n              if (s4 !== peg$FAILED) {\n                s5 = peg$parseexpr();\n                if (s5 !== peg$FAILED) {\n                  s6 = peg$parse__();\n                  if (s6 !== peg$FAILED) {\n                    s7 = peg$parseRPAREN();\n                    if (s7 !== peg$FAILED) {\n                      s8 = peg$parse__();\n                      if (s8 !== peg$FAILED) {\n                        s9 = peg$parseorder_by_clause();\n                        if (s9 === peg$FAILED) {\n                          s9 = null;\n                        }\n                        if (s9 !== peg$FAILED) {\n                          peg$savedPos = s0;\n                          s1 = peg$c180(s1, s5, s9);\n                          s0 = s1;\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsestar_expr() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    if (input.charCodeAt(peg$currPos) === 42) {\n      s1 = peg$c127;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c128); }\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c181();\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parsefunc_call() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n    s0 = peg$parseextract_func();\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseproc_func_name();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseLPAREN();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse__();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parseexpr_list();\n              if (s5 === peg$FAILED) {\n                s5 = null;\n              }\n              if (s5 !== peg$FAILED) {\n                s6 = peg$parse__();\n                if (s6 !== peg$FAILED) {\n                  s7 = peg$parseRPAREN();\n                  if (s7 !== peg$FAILED) {\n                    s8 = peg$parse__();\n                    if (s8 !== peg$FAILED) {\n                      s9 = peg$parseover_partition();\n                      if (s9 === peg$FAILED) {\n                        s9 = null;\n                      }\n                      if (s9 !== peg$FAILED) {\n                        peg$savedPos = s0;\n                        s1 = peg$c182(s1, s5, s9);\n                        s0 = s1;\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parsescalar_func();\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parse__();\n          if (s2 !== peg$FAILED) {\n            s3 = peg$parseLPAREN();\n            if (s3 !== peg$FAILED) {\n              s4 = peg$parse__();\n              if (s4 !== peg$FAILED) {\n                s5 = peg$parseexpr_list();\n                if (s5 === peg$FAILED) {\n                  s5 = null;\n                }\n                if (s5 !== peg$FAILED) {\n                  s6 = peg$parse__();\n                  if (s6 !== peg$FAILED) {\n                    s7 = peg$parseRPAREN();\n                    if (s7 !== peg$FAILED) {\n                      s8 = peg$parse__();\n                      if (s8 !== peg$FAILED) {\n                        s9 = peg$parseover_partition();\n                        if (s9 === peg$FAILED) {\n                          s9 = null;\n                        }\n                        if (s9 !== peg$FAILED) {\n                          peg$savedPos = s0;\n                          s1 = peg$c182(s1, s5, s9);\n                          s0 = s1;\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          s1 = peg$parseKW_CURRENT_TIMESTAMP();\n          if (s1 !== peg$FAILED) {\n            s2 = peg$parse__();\n            if (s2 !== peg$FAILED) {\n              s3 = peg$parseon_update_current_timestamp();\n              if (s3 === peg$FAILED) {\n                s3 = null;\n              }\n              if (s3 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c183(s1, s3);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseproc_func_name() {\n    var s0, s1, s2, s3, s4, s5, s6;\n\n    s0 = peg$currPos;\n    s1 = peg$parseident();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      s3 = peg$parse__();\n      if (s3 !== peg$FAILED) {\n        s4 = peg$parseDOT();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parse__();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parseident();\n            if (s6 !== peg$FAILED) {\n              s3 = [s3, s4, s5, s6];\n              s2 = s3;\n            } else {\n              peg$currPos = s2;\n              s2 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s2;\n            s2 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s2;\n          s2 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 === peg$FAILED) {\n        s2 = null;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c184(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsescalar_func() {\n    var s0;\n\n    s0 = peg$parseKW_CURRENT_DATE();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseKW_CURRENT_TIME();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseKW_CURRENT_TIMESTAMP();\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseextract_filed() {\n    var s0, s1;\n\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c185) {\n      s0 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c186); }\n    }\n    if (s0 === peg$FAILED) {\n      if (input.substr(peg$currPos, 3).toLowerCase() === peg$c187) {\n        s0 = input.substr(peg$currPos, 3);\n        peg$currPos += 3;\n      } else {\n        s0 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c188); }\n      }\n      if (s0 === peg$FAILED) {\n        if (input.substr(peg$currPos, 6).toLowerCase() === peg$c189) {\n          s0 = input.substr(peg$currPos, 6);\n          peg$currPos += 6;\n        } else {\n          s0 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c190); }\n        }\n        if (s0 === peg$FAILED) {\n          if (input.substr(peg$currPos, 3).toLowerCase() === peg$c191) {\n            s0 = input.substr(peg$currPos, 3);\n            peg$currPos += 3;\n          } else {\n            s0 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c192); }\n          }\n          if (s0 === peg$FAILED) {\n            if (input.substr(peg$currPos, 3).toLowerCase() === peg$c193) {\n              s0 = input.substr(peg$currPos, 3);\n              peg$currPos += 3;\n            } else {\n              s0 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c194); }\n            }\n            if (s0 === peg$FAILED) {\n              if (input.substr(peg$currPos, 5).toLowerCase() === peg$c195) {\n                s0 = input.substr(peg$currPos, 5);\n                peg$currPos += 5;\n              } else {\n                s0 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c196); }\n              }\n              if (s0 === peg$FAILED) {\n                if (input.substr(peg$currPos, 4).toLowerCase() === peg$c197) {\n                  s0 = input.substr(peg$currPos, 4);\n                  peg$currPos += 4;\n                } else {\n                  s0 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c198); }\n                }\n                if (s0 === peg$FAILED) {\n                  if (input.substr(peg$currPos, 6).toLowerCase() === peg$c199) {\n                    s0 = input.substr(peg$currPos, 6);\n                    peg$currPos += 6;\n                  } else {\n                    s0 = peg$FAILED;\n                    if (peg$silentFails === 0) { peg$fail(peg$c200); }\n                  }\n                  if (s0 === peg$FAILED) {\n                    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c201) {\n                      s0 = input.substr(peg$currPos, 7);\n                      peg$currPos += 7;\n                    } else {\n                      s0 = peg$FAILED;\n                      if (peg$silentFails === 0) { peg$fail(peg$c202); }\n                    }\n                    if (s0 === peg$FAILED) {\n                      if (input.substr(peg$currPos, 12).toLowerCase() === peg$c203) {\n                        s0 = input.substr(peg$currPos, 12);\n                        peg$currPos += 12;\n                      } else {\n                        s0 = peg$FAILED;\n                        if (peg$silentFails === 0) { peg$fail(peg$c204); }\n                      }\n                      if (s0 === peg$FAILED) {\n                        if (input.substr(peg$currPos, 10).toLowerCase() === peg$c205) {\n                          s0 = input.substr(peg$currPos, 10);\n                          peg$currPos += 10;\n                        } else {\n                          s0 = peg$FAILED;\n                          if (peg$silentFails === 0) { peg$fail(peg$c206); }\n                        }\n                        if (s0 === peg$FAILED) {\n                          if (input.substr(peg$currPos, 12).toLowerCase() === peg$c207) {\n                            s0 = input.substr(peg$currPos, 12);\n                            peg$currPos += 12;\n                          } else {\n                            s0 = peg$FAILED;\n                            if (peg$silentFails === 0) { peg$fail(peg$c208); }\n                          }\n                          if (s0 === peg$FAILED) {\n                            if (input.substr(peg$currPos, 6).toLowerCase() === peg$c209) {\n                              s0 = input.substr(peg$currPos, 6);\n                              peg$currPos += 6;\n                            } else {\n                              s0 = peg$FAILED;\n                              if (peg$silentFails === 0) { peg$fail(peg$c210); }\n                            }\n                            if (s0 === peg$FAILED) {\n                              if (input.substr(peg$currPos, 5).toLowerCase() === peg$c211) {\n                                s0 = input.substr(peg$currPos, 5);\n                                peg$currPos += 5;\n                              } else {\n                                s0 = peg$FAILED;\n                                if (peg$silentFails === 0) { peg$fail(peg$c212); }\n                              }\n                              if (s0 === peg$FAILED) {\n                                if (input.substr(peg$currPos, 7).toLowerCase() === peg$c213) {\n                                  s0 = input.substr(peg$currPos, 7);\n                                  peg$currPos += 7;\n                                } else {\n                                  s0 = peg$FAILED;\n                                  if (peg$silentFails === 0) { peg$fail(peg$c214); }\n                                }\n                                if (s0 === peg$FAILED) {\n                                  if (input.substr(peg$currPos, 6).toLowerCase() === peg$c215) {\n                                    s0 = input.substr(peg$currPos, 6);\n                                    peg$currPos += 6;\n                                  } else {\n                                    s0 = peg$FAILED;\n                                    if (peg$silentFails === 0) { peg$fail(peg$c216); }\n                                  }\n                                  if (s0 === peg$FAILED) {\n                                    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c217) {\n                                      s0 = input.substr(peg$currPos, 8);\n                                      peg$currPos += 8;\n                                    } else {\n                                      s0 = peg$FAILED;\n                                      if (peg$silentFails === 0) { peg$fail(peg$c218); }\n                                    }\n                                    if (s0 === peg$FAILED) {\n                                      if (input.substr(peg$currPos, 13).toLowerCase() === peg$c219) {\n                                        s0 = input.substr(peg$currPos, 13);\n                                        peg$currPos += 13;\n                                      } else {\n                                        s0 = peg$FAILED;\n                                        if (peg$silentFails === 0) { peg$fail(peg$c220); }\n                                      }\n                                      if (s0 === peg$FAILED) {\n                                        if (input.substr(peg$currPos, 15).toLowerCase() === peg$c221) {\n                                          s0 = input.substr(peg$currPos, 15);\n                                          peg$currPos += 15;\n                                        } else {\n                                          s0 = peg$FAILED;\n                                          if (peg$silentFails === 0) { peg$fail(peg$c222); }\n                                        }\n                                        if (s0 === peg$FAILED) {\n                                          if (input.substr(peg$currPos, 4).toLowerCase() === peg$c223) {\n                                            s0 = input.substr(peg$currPos, 4);\n                                            peg$currPos += 4;\n                                          } else {\n                                            s0 = peg$FAILED;\n                                            if (peg$silentFails === 0) { peg$fail(peg$c224); }\n                                          }\n                                          if (s0 === peg$FAILED) {\n                                            s0 = peg$currPos;\n                                            if (input.substr(peg$currPos, 4).toLowerCase() === peg$c225) {\n                                              s1 = input.substr(peg$currPos, 4);\n                                              peg$currPos += 4;\n                                            } else {\n                                              s1 = peg$FAILED;\n                                              if (peg$silentFails === 0) { peg$fail(peg$c226); }\n                                            }\n                                            if (s1 !== peg$FAILED) {\n                                              peg$savedPos = s0;\n                                              s1 = peg$c227();\n                                            }\n                                            s0 = s1;\n                                          }\n                                        }\n                                      }\n                                    }\n                                  }\n                                }\n                              }\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseextract_func() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_EXTRACT();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLPAREN();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseextract_filed();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseKW_FROM();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseKW_TIMESTAMP();\n                    if (s9 === peg$FAILED) {\n                      s9 = peg$parseKW_INTERVAL();\n                      if (s9 === peg$FAILED) {\n                        s9 = peg$parseKW_TIME();\n                        if (s9 === peg$FAILED) {\n                          s9 = peg$parseKW_DATE();\n                        }\n                      }\n                    }\n                    if (s9 === peg$FAILED) {\n                      s9 = null;\n                    }\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse__();\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parseexpr();\n                        if (s11 !== peg$FAILED) {\n                          s12 = peg$parse__();\n                          if (s12 !== peg$FAILED) {\n                            s13 = peg$parseRPAREN();\n                            if (s13 !== peg$FAILED) {\n                              peg$savedPos = s0;\n                              s1 = peg$c228(s1, s5, s9, s11);\n                              s0 = s1;\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecast_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19, s20, s21;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_CAST();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLPAREN();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseexpr();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseKW_AS();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parsedata_type();\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse__();\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parseRPAREN();\n                        if (s11 !== peg$FAILED) {\n                          peg$savedPos = s0;\n                          s1 = peg$c229(s5, s9);\n                          s0 = s1;\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_CAST();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseLPAREN();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse__();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parseexpr();\n              if (s5 !== peg$FAILED) {\n                s6 = peg$parse__();\n                if (s6 !== peg$FAILED) {\n                  s7 = peg$parseKW_AS();\n                  if (s7 !== peg$FAILED) {\n                    s8 = peg$parse__();\n                    if (s8 !== peg$FAILED) {\n                      s9 = peg$parseKW_DECIMAL();\n                      if (s9 !== peg$FAILED) {\n                        s10 = peg$parse__();\n                        if (s10 !== peg$FAILED) {\n                          s11 = peg$parseLPAREN();\n                          if (s11 !== peg$FAILED) {\n                            s12 = peg$parse__();\n                            if (s12 !== peg$FAILED) {\n                              s13 = peg$parseint();\n                              if (s13 !== peg$FAILED) {\n                                s14 = peg$parse__();\n                                if (s14 !== peg$FAILED) {\n                                  s15 = peg$parseRPAREN();\n                                  if (s15 !== peg$FAILED) {\n                                    s16 = peg$parse__();\n                                    if (s16 !== peg$FAILED) {\n                                      s17 = peg$parseRPAREN();\n                                      if (s17 !== peg$FAILED) {\n                                        peg$savedPos = s0;\n                                        s1 = peg$c230(s5, s13);\n                                        s0 = s1;\n                                      } else {\n                                        peg$currPos = s0;\n                                        s0 = peg$FAILED;\n                                      }\n                                    } else {\n                                      peg$currPos = s0;\n                                      s0 = peg$FAILED;\n                                    }\n                                  } else {\n                                    peg$currPos = s0;\n                                    s0 = peg$FAILED;\n                                  }\n                                } else {\n                                  peg$currPos = s0;\n                                  s0 = peg$FAILED;\n                                }\n                              } else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parseKW_CAST();\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parse__();\n          if (s2 !== peg$FAILED) {\n            s3 = peg$parseLPAREN();\n            if (s3 !== peg$FAILED) {\n              s4 = peg$parse__();\n              if (s4 !== peg$FAILED) {\n                s5 = peg$parseexpr();\n                if (s5 !== peg$FAILED) {\n                  s6 = peg$parse__();\n                  if (s6 !== peg$FAILED) {\n                    s7 = peg$parseKW_AS();\n                    if (s7 !== peg$FAILED) {\n                      s8 = peg$parse__();\n                      if (s8 !== peg$FAILED) {\n                        s9 = peg$parseKW_DECIMAL();\n                        if (s9 !== peg$FAILED) {\n                          s10 = peg$parse__();\n                          if (s10 !== peg$FAILED) {\n                            s11 = peg$parseLPAREN();\n                            if (s11 !== peg$FAILED) {\n                              s12 = peg$parse__();\n                              if (s12 !== peg$FAILED) {\n                                s13 = peg$parseint();\n                                if (s13 !== peg$FAILED) {\n                                  s14 = peg$parse__();\n                                  if (s14 !== peg$FAILED) {\n                                    s15 = peg$parseCOMMA();\n                                    if (s15 !== peg$FAILED) {\n                                      s16 = peg$parse__();\n                                      if (s16 !== peg$FAILED) {\n                                        s17 = peg$parseint();\n                                        if (s17 !== peg$FAILED) {\n                                          s18 = peg$parse__();\n                                          if (s18 !== peg$FAILED) {\n                                            s19 = peg$parseRPAREN();\n                                            if (s19 !== peg$FAILED) {\n                                              s20 = peg$parse__();\n                                              if (s20 !== peg$FAILED) {\n                                                s21 = peg$parseRPAREN();\n                                                if (s21 !== peg$FAILED) {\n                                                  peg$savedPos = s0;\n                                                  s1 = peg$c231(s5, s13, s17);\n                                                  s0 = s1;\n                                                } else {\n                                                  peg$currPos = s0;\n                                                  s0 = peg$FAILED;\n                                                }\n                                              } else {\n                                                peg$currPos = s0;\n                                                s0 = peg$FAILED;\n                                              }\n                                            } else {\n                                              peg$currPos = s0;\n                                              s0 = peg$FAILED;\n                                            }\n                                          } else {\n                                            peg$currPos = s0;\n                                            s0 = peg$FAILED;\n                                          }\n                                        } else {\n                                          peg$currPos = s0;\n                                          s0 = peg$FAILED;\n                                        }\n                                      } else {\n                                        peg$currPos = s0;\n                                        s0 = peg$FAILED;\n                                      }\n                                    } else {\n                                      peg$currPos = s0;\n                                      s0 = peg$FAILED;\n                                    }\n                                  } else {\n                                    peg$currPos = s0;\n                                    s0 = peg$FAILED;\n                                  }\n                                } else {\n                                  peg$currPos = s0;\n                                  s0 = peg$FAILED;\n                                }\n                              } else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          s1 = peg$parseKW_CAST();\n          if (s1 !== peg$FAILED) {\n            s2 = peg$parse__();\n            if (s2 !== peg$FAILED) {\n              s3 = peg$parseLPAREN();\n              if (s3 !== peg$FAILED) {\n                s4 = peg$parse__();\n                if (s4 !== peg$FAILED) {\n                  s5 = peg$parseexpr();\n                  if (s5 !== peg$FAILED) {\n                    s6 = peg$parse__();\n                    if (s6 !== peg$FAILED) {\n                      s7 = peg$parseKW_AS();\n                      if (s7 !== peg$FAILED) {\n                        s8 = peg$parse__();\n                        if (s8 !== peg$FAILED) {\n                          s9 = peg$parsesignedness();\n                          if (s9 !== peg$FAILED) {\n                            s10 = peg$parse__();\n                            if (s10 !== peg$FAILED) {\n                              s11 = peg$parseKW_INTEGER();\n                              if (s11 === peg$FAILED) {\n                                s11 = null;\n                              }\n                              if (s11 !== peg$FAILED) {\n                                s12 = peg$parse__();\n                                if (s12 !== peg$FAILED) {\n                                  s13 = peg$parseRPAREN();\n                                  if (s13 !== peg$FAILED) {\n                                    peg$savedPos = s0;\n                                    s1 = peg$c232(s5, s9, s11);\n                                    s0 = s1;\n                                  } else {\n                                    peg$currPos = s0;\n                                    s0 = peg$FAILED;\n                                  }\n                                } else {\n                                  peg$currPos = s0;\n                                  s0 = peg$FAILED;\n                                }\n                              } else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsesignedness() {\n    var s0;\n\n    s0 = peg$parseKW_SIGNED();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseKW_UNSIGNED();\n    }\n\n    return s0;\n  }\n\n  function peg$parseliteral() {\n    var s0;\n\n    s0 = peg$parseliteral_string();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseliteral_numeric();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseliteral_bool();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parseliteral_null();\n          if (s0 === peg$FAILED) {\n            s0 = peg$parseliteral_datetime();\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseliteral_list() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseliteral();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseCOMMA();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseliteral();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseliteral();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c17(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseliteral_null() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_NULL();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c233();\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parseliteral_not_null() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_NOT_NULL();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c234();\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parseliteral_bool() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_TRUE();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c235();\n    }\n    s0 = s1;\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_FALSE();\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c236();\n      }\n      s0 = s1;\n    }\n\n    return s0;\n  }\n\n  function peg$parseliteral_string() {\n    var s0, s1, s2, s3, s4, s5, s6;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 1).toLowerCase() === peg$c237) {\n      s1 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c238); }\n    }\n    if (s1 === peg$FAILED) {\n      s1 = null;\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 39) {\n          s4 = peg$c149;\n          peg$currPos++;\n        } else {\n          s4 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c150); }\n        }\n        if (s4 !== peg$FAILED) {\n          s5 = [];\n          s6 = peg$parsesingle_char();\n          while (s6 !== peg$FAILED) {\n            s5.push(s6);\n            s6 = peg$parsesingle_char();\n          }\n          if (s5 !== peg$FAILED) {\n            if (input.charCodeAt(peg$currPos) === 39) {\n              s6 = peg$c149;\n              peg$currPos++;\n            } else {\n              s6 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c150); }\n            }\n            if (s6 !== peg$FAILED) {\n              s4 = [s4, s5, s6];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c239(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      if (input.substr(peg$currPos, 1).toLowerCase() === peg$c237) {\n        s1 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c238); }\n      }\n      if (s1 === peg$FAILED) {\n        s1 = null;\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$currPos;\n          if (input.charCodeAt(peg$currPos) === 34) {\n            s4 = peg$c144;\n            peg$currPos++;\n          } else {\n            s4 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c145); }\n          }\n          if (s4 !== peg$FAILED) {\n            s5 = [];\n            s6 = peg$parsesingle_quote_char();\n            while (s6 !== peg$FAILED) {\n              s5.push(s6);\n              s6 = peg$parsesingle_quote_char();\n            }\n            if (s5 !== peg$FAILED) {\n              if (input.charCodeAt(peg$currPos) === 34) {\n                s6 = peg$c144;\n                peg$currPos++;\n              } else {\n                s6 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c145); }\n              }\n              if (s6 !== peg$FAILED) {\n                s4 = [s4, s5, s6];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c240(s1, s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseliteral_datetime() {\n    var s0, s1, s2, s3, s4, s5, s6;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_TIME();\n    if (s1 === peg$FAILED) {\n      s1 = peg$parseKW_DATE();\n      if (s1 === peg$FAILED) {\n        s1 = peg$parseKW_TIMESTAMP();\n        if (s1 === peg$FAILED) {\n          s1 = peg$parseKW_DATETIME();\n        }\n      }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 39) {\n          s4 = peg$c149;\n          peg$currPos++;\n        } else {\n          s4 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c150); }\n        }\n        if (s4 !== peg$FAILED) {\n          s5 = [];\n          s6 = peg$parsesingle_char();\n          while (s6 !== peg$FAILED) {\n            s5.push(s6);\n            s6 = peg$parsesingle_char();\n          }\n          if (s5 !== peg$FAILED) {\n            if (input.charCodeAt(peg$currPos) === 39) {\n              s6 = peg$c149;\n              peg$currPos++;\n            } else {\n              s6 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c150); }\n            }\n            if (s6 !== peg$FAILED) {\n              s4 = [s4, s5, s6];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c241(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_TIME();\n      if (s1 === peg$FAILED) {\n        s1 = peg$parseKW_DATE();\n        if (s1 === peg$FAILED) {\n          s1 = peg$parseKW_TIMESTAMP();\n          if (s1 === peg$FAILED) {\n            s1 = peg$parseKW_DATETIME();\n          }\n        }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$currPos;\n          if (input.charCodeAt(peg$currPos) === 34) {\n            s4 = peg$c144;\n            peg$currPos++;\n          } else {\n            s4 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c145); }\n          }\n          if (s4 !== peg$FAILED) {\n            s5 = [];\n            s6 = peg$parsesingle_quote_char();\n            while (s6 !== peg$FAILED) {\n              s5.push(s6);\n              s6 = peg$parsesingle_quote_char();\n            }\n            if (s5 !== peg$FAILED) {\n              if (input.charCodeAt(peg$currPos) === 34) {\n                s6 = peg$c144;\n                peg$currPos++;\n              } else {\n                s6 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c145); }\n              }\n              if (s6 !== peg$FAILED) {\n                s4 = [s4, s5, s6];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c241(s1, s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsesingle_quote_char() {\n    var s0;\n\n    if (peg$c242.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c243); }\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseescape_char();\n    }\n\n    return s0;\n  }\n\n  function peg$parsesingle_char() {\n    var s0;\n\n    if (peg$c244.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c245); }\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseescape_char();\n    }\n\n    return s0;\n  }\n\n  function peg$parseescape_char() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 2) === peg$c246) {\n      s1 = peg$c246;\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c247); }\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c248();\n    }\n    s0 = s1;\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      if (input.substr(peg$currPos, 2) === peg$c249) {\n        s1 = peg$c249;\n        peg$currPos += 2;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c250); }\n      }\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c251();\n      }\n      s0 = s1;\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        if (input.substr(peg$currPos, 2) === peg$c252) {\n          s1 = peg$c252;\n          peg$currPos += 2;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c253); }\n        }\n        if (s1 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c254();\n        }\n        s0 = s1;\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          if (input.substr(peg$currPos, 2) === peg$c255) {\n            s1 = peg$c255;\n            peg$currPos += 2;\n          } else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c256); }\n          }\n          if (s1 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c257();\n          }\n          s0 = s1;\n          if (s0 === peg$FAILED) {\n            s0 = peg$currPos;\n            if (input.substr(peg$currPos, 2) === peg$c258) {\n              s1 = peg$c258;\n              peg$currPos += 2;\n            } else {\n              s1 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c259); }\n            }\n            if (s1 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c260();\n            }\n            s0 = s1;\n            if (s0 === peg$FAILED) {\n              s0 = peg$currPos;\n              if (input.substr(peg$currPos, 2) === peg$c261) {\n                s1 = peg$c261;\n                peg$currPos += 2;\n              } else {\n                s1 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c262); }\n              }\n              if (s1 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c263();\n              }\n              s0 = s1;\n              if (s0 === peg$FAILED) {\n                s0 = peg$currPos;\n                if (input.substr(peg$currPos, 2) === peg$c264) {\n                  s1 = peg$c264;\n                  peg$currPos += 2;\n                } else {\n                  s1 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c265); }\n                }\n                if (s1 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c266();\n                }\n                s0 = s1;\n                if (s0 === peg$FAILED) {\n                  s0 = peg$currPos;\n                  if (input.substr(peg$currPos, 2) === peg$c267) {\n                    s1 = peg$c267;\n                    peg$currPos += 2;\n                  } else {\n                    s1 = peg$FAILED;\n                    if (peg$silentFails === 0) { peg$fail(peg$c268); }\n                  }\n                  if (s1 !== peg$FAILED) {\n                    peg$savedPos = s0;\n                    s1 = peg$c269();\n                  }\n                  s0 = s1;\n                  if (s0 === peg$FAILED) {\n                    s0 = peg$currPos;\n                    if (input.substr(peg$currPos, 2) === peg$c270) {\n                      s1 = peg$c270;\n                      peg$currPos += 2;\n                    } else {\n                      s1 = peg$FAILED;\n                      if (peg$silentFails === 0) { peg$fail(peg$c271); }\n                    }\n                    if (s1 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s1 = peg$c272();\n                    }\n                    s0 = s1;\n                    if (s0 === peg$FAILED) {\n                      s0 = peg$currPos;\n                      if (input.substr(peg$currPos, 2) === peg$c273) {\n                        s1 = peg$c273;\n                        peg$currPos += 2;\n                      } else {\n                        s1 = peg$FAILED;\n                        if (peg$silentFails === 0) { peg$fail(peg$c274); }\n                      }\n                      if (s1 !== peg$FAILED) {\n                        s2 = peg$parsehexDigit();\n                        if (s2 !== peg$FAILED) {\n                          s3 = peg$parsehexDigit();\n                          if (s3 !== peg$FAILED) {\n                            s4 = peg$parsehexDigit();\n                            if (s4 !== peg$FAILED) {\n                              s5 = peg$parsehexDigit();\n                              if (s5 !== peg$FAILED) {\n                                peg$savedPos = s0;\n                                s1 = peg$c275(s2, s3, s4, s5);\n                                s0 = s1;\n                              } else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                      if (s0 === peg$FAILED) {\n                        s0 = peg$currPos;\n                        if (input.charCodeAt(peg$currPos) === 92) {\n                          s1 = peg$c276;\n                          peg$currPos++;\n                        } else {\n                          s1 = peg$FAILED;\n                          if (peg$silentFails === 0) { peg$fail(peg$c277); }\n                        }\n                        if (s1 !== peg$FAILED) {\n                          peg$savedPos = s0;\n                          s1 = peg$c254();\n                        }\n                        s0 = s1;\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseline_terminator() {\n    var s0;\n\n    if (peg$c278.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c279); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseliteral_numeric() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    s1 = peg$parsenumber();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c280(s1);\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parsenumber() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseint();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parsefrac();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseexp();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c281(s1, s2, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseint();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parsefrac();\n        if (s2 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c282(s1, s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parseint();\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parseexp();\n          if (s2 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c283(s1, s2);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          s1 = peg$parseint();\n          if (s1 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c284(s1);\n          }\n          s0 = s1;\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseint() {\n    var s0, s1, s2;\n\n    s0 = peg$parsedigits();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsedigit();\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 45) {\n          s1 = peg$c124;\n          peg$currPos++;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c125); }\n        }\n        if (s1 === peg$FAILED) {\n          if (input.charCodeAt(peg$currPos) === 43) {\n            s1 = peg$c122;\n            peg$currPos++;\n          } else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c123); }\n          }\n        }\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parsedigits();\n          if (s2 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c285(s1, s2);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          if (input.charCodeAt(peg$currPos) === 45) {\n            s1 = peg$c124;\n            peg$currPos++;\n          } else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c125); }\n          }\n          if (s1 === peg$FAILED) {\n            if (input.charCodeAt(peg$currPos) === 43) {\n              s1 = peg$c122;\n              peg$currPos++;\n            } else {\n              s1 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c123); }\n            }\n          }\n          if (s1 !== peg$FAILED) {\n            s2 = peg$parsedigit();\n            if (s2 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c286(s1, s2);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsefrac() {\n    var s0, s1, s2;\n\n    s0 = peg$currPos;\n    if (input.charCodeAt(peg$currPos) === 46) {\n      s1 = peg$c287;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c288); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parsedigits();\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c289(s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseexp() {\n    var s0, s1, s2;\n\n    s0 = peg$currPos;\n    s1 = peg$parsee();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parsedigits();\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c290(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsedigits() {\n    var s0, s1, s2;\n\n    s0 = peg$currPos;\n    s1 = [];\n    s2 = peg$parsedigit();\n    if (s2 !== peg$FAILED) {\n      while (s2 !== peg$FAILED) {\n        s1.push(s2);\n        s2 = peg$parsedigit();\n      }\n    } else {\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c291(s1);\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parsedigit() {\n    var s0;\n\n    if (peg$c292.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c293); }\n    }\n\n    return s0;\n  }\n\n  function peg$parsehexDigit() {\n    var s0;\n\n    if (peg$c294.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c295); }\n    }\n\n    return s0;\n  }\n\n  function peg$parsee() {\n    var s0, s1, s2;\n\n    s0 = peg$currPos;\n    if (peg$c296.test(input.charAt(peg$currPos))) {\n      s1 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c297); }\n    }\n    if (s1 !== peg$FAILED) {\n      if (peg$c298.test(input.charAt(peg$currPos))) {\n        s2 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c299); }\n      }\n      if (s2 === peg$FAILED) {\n        s2 = null;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c300(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_NULL() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c301) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c302); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_DEFAULT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c303) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c304); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_NOT_NULL() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c305) {\n      s1 = input.substr(peg$currPos, 8);\n      peg$currPos += 8;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c306); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_TRUE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c307) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c308); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_TO() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 2).toLowerCase() === peg$c309) {\n      s1 = input.substr(peg$currPos, 2);\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c310); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_FALSE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c311) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c312); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_DROP() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c313) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c314); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c315();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_USE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c316) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c317); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_SELECT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c318) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c319); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_IF_NOT_EXISTS() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 13).toLowerCase() === peg$c320) {\n      s1 = input.substr(peg$currPos, 13);\n      peg$currPos += 13;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c321); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_RECURSIVE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 9) === peg$c322) {\n      s1 = peg$c322;\n      peg$currPos += 9;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c323); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_IGNORE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c324) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c325); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_EXPLAIN() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c326) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c327); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_PARTITION() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 9).toLowerCase() === peg$c328) {\n      s1 = input.substr(peg$currPos, 9);\n      peg$currPos += 9;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c329); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c330();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_INTO() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c331) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c332); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_FROM() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c333) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c334); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_SET() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c335) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c336); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_UNLOCK() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c337) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c338); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_LOCK() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c339) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c340); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_AS() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 2).toLowerCase() === peg$c24) {\n      s1 = input.substr(peg$currPos, 2);\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c25); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_TABLE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c341) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c342); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c343();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_TABLES() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c344) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c345); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c346();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_COLLATE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c347) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c348); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c349();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_ON() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 2).toLowerCase() === peg$c350) {\n      s1 = input.substr(peg$currPos, 2);\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c351); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_LEFT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c352) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c353); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_RIGHT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c354) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c355); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_FULL() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c356) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c357); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_INNER() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c358) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c359); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_CROSS() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c360) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c361); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_JOIN() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c362) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c363); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_OUTER() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c364) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c365); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_OVER() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c366) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c367); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_UNION() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c368) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c369); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_VALUE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c370) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c371); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c372();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_VALUES() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c373) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c374); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_USING() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c375) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c376); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_WHERE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c377) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c378); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_WITH() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c379) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c380); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_GROUP() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c381) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c382); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_BY() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 2).toLowerCase() === peg$c383) {\n      s1 = input.substr(peg$currPos, 2);\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c384); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_ORDER() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c385) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c386); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_HAVING() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c387) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c388); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_WINDOW() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c389) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c390); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_ORDINAL() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c391) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c392); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c393();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_LIMIT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c394) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c395); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_OFFSET() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c396) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c397); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c398();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_ASC() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c399) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c400); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c401();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_DESC() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c402) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c403); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c404();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_ALL() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c405) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c406); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c407();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_DISTINCT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c408) {\n      s1 = input.substr(peg$currPos, 8);\n      peg$currPos += 8;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c409); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c410();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_BETWEEN() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c411) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c412); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c413();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_IN() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 2).toLowerCase() === peg$c414) {\n      s1 = input.substr(peg$currPos, 2);\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c415); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c416();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_IS() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 2).toLowerCase() === peg$c417) {\n      s1 = input.substr(peg$currPos, 2);\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c418); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c419();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_LIKE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c420) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c421); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c422();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_EXISTS() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c423) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c424); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c425();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_NOT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c426) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c427); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c428();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_AND() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c429) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c430); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c431();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_OR() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 2).toLowerCase() === peg$c432) {\n      s1 = input.substr(peg$currPos, 2);\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c433); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c434();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_COUNT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c435) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c436); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c437();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_MAX() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c438) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c439); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c440();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_MIN() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c441) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c442); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c443();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_SUM() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c444) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c445); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c446();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_AVG() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c447) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c448); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c449();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_EXTRACT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c450) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c451); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c452();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_CALL() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c453) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c454); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c455();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_CASE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c456) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c457); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_WHEN() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c458) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c459); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_THEN() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c460) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c461); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_ELSE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c462) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c463); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_END() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c464) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c465); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_CAST() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c466) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c467); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_ARRAY() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c468) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c469); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c470();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_BYTES() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c471) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c472); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c473();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_BOOL() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c474) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c475); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c476();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_CHAR() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c477) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c478); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c479();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_GEOGRAPHY() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 9).toLowerCase() === peg$c480) {\n      s1 = input.substr(peg$currPos, 9);\n      peg$currPos += 9;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c481); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c482();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_VARCHAR() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c483) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c484); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c485();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_NUMERIC() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c486) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c487); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c488();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_DECIMAL() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c489) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c490); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c491();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_SIGNED() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c492) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c493); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c494();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_UNSIGNED() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c495) {\n      s1 = input.substr(peg$currPos, 8);\n      peg$currPos += 8;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c496); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c497();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_INT_64() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c498) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c499); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c500();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_ZEROFILL() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c501) {\n      s1 = input.substr(peg$currPos, 8);\n      peg$currPos += 8;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c502); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c503();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_INTEGER() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c504) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c505); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c506();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_JSON() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c507) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c508); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c509();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_SMALLINT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c510) {\n      s1 = input.substr(peg$currPos, 8);\n      peg$currPos += 8;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c511); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c512();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_STRING() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c513) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c514); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c515();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_STRUCT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c516) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c517); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c518();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_TINYINT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c519) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c520); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c521();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_TINYTEXT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c522) {\n      s1 = input.substr(peg$currPos, 8);\n      peg$currPos += 8;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c523); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c524();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_TEXT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c525) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c526); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c527();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_MEDIUMTEXT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 10).toLowerCase() === peg$c528) {\n      s1 = input.substr(peg$currPos, 10);\n      peg$currPos += 10;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c529); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c530();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_LONGTEXT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c531) {\n      s1 = input.substr(peg$currPos, 8);\n      peg$currPos += 8;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c532); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c533();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_BIGINT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c534) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c535); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c536();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_FLOAT_64() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c537) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c538); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c539();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_DOUBLE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c540) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c541); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c542();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_DATE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c543) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c544); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c545();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_DATETIME() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c546) {\n      s1 = input.substr(peg$currPos, 8);\n      peg$currPos += 8;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c547); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c548();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_TIME() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c549) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c550); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c551();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_TIMESTAMP() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 9).toLowerCase() === peg$c552) {\n      s1 = input.substr(peg$currPos, 9);\n      peg$currPos += 9;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c553); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c554();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_TRUNCATE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c555) {\n      s1 = input.substr(peg$currPos, 8);\n      peg$currPos += 8;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c556); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c557();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_USER() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c558) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c559); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c560();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_CURRENT_DATE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 12).toLowerCase() === peg$c561) {\n      s1 = input.substr(peg$currPos, 12);\n      peg$currPos += 12;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c562); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c563();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_ADD_DATE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c564) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c565); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c566();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_INTERVAL() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c567) {\n      s1 = input.substr(peg$currPos, 8);\n      peg$currPos += 8;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c568); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c569();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_UNIT_YEAR() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c225) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c226); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c570();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_UNIT_MONTH() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c211) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c212); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c571();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_UNIT_DAY() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c187) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c188); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c572();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_UNIT_HOUR() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c197) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c198); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c573();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_UNIT_MINUTE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c209) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c210); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c574();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_UNIT_SECOND() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c215) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c216); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c575();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_CURRENT_TIME() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 12).toLowerCase() === peg$c576) {\n      s1 = input.substr(peg$currPos, 12);\n      peg$currPos += 12;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c577); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c578();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_CURRENT_TIMESTAMP() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 17).toLowerCase() === peg$c579) {\n      s1 = input.substr(peg$currPos, 17);\n      peg$currPos += 17;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c580); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c581();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_GLOBAL() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c582) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c583); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c584();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_SESSION() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c585) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c586); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c587();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_LOCAL() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c588) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c589); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c590();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_PERSIST() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c591) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c592); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c593();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_PERSIST_ONLY() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 12).toLowerCase() === peg$c594) {\n      s1 = input.substr(peg$currPos, 12);\n      peg$currPos += 12;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c595); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c596();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_ADD() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c597) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c598); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c599();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_COLUMN() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c600) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c601); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c602();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_INDEX() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c603) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c604); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c605();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_KEY() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c606) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c607); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c608();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_FULLTEXT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c609) {\n      s1 = input.substr(peg$currPos, 8);\n      peg$currPos += 8;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c610); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c611();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_UNIQUE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c612) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c613); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c614();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_COMMENT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c615) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c616); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c617();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_CONSTRAINT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 10).toLowerCase() === peg$c618) {\n      s1 = input.substr(peg$currPos, 10);\n      peg$currPos += 10;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c619); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c620();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_REFERENCES() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 10).toLowerCase() === peg$c621) {\n      s1 = input.substr(peg$currPos, 10);\n      peg$currPos += 10;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c622); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c623();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseDOT() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 46) {\n      s0 = peg$c287;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c288); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseCOMMA() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 44) {\n      s0 = peg$c624;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c625); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseSTAR() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 42) {\n      s0 = peg$c127;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c128); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseLPAREN() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 40) {\n      s0 = peg$c2;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c3); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseRPAREN() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 41) {\n      s0 = peg$c4;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c5); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseLANGLE() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 60) {\n      s0 = peg$c112;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c113); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseRANGLE() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 62) {\n      s0 = peg$c106;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c107); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseLBRAKE() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 91) {\n      s0 = peg$c626;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c627); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseRBRAKE() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 93) {\n      s0 = peg$c628;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c629); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseSEMICOLON() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 59) {\n      s0 = peg$c630;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c631); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseOPERATOR_CONCATENATION() {\n    var s0;\n\n    if (input.substr(peg$currPos, 2) === peg$c632) {\n      s0 = peg$c632;\n      peg$currPos += 2;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c633); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseOPERATOR_AND() {\n    var s0;\n\n    if (input.substr(peg$currPos, 2) === peg$c634) {\n      s0 = peg$c634;\n      peg$currPos += 2;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c635); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseLOGIC_OPERATOR() {\n    var s0;\n\n    s0 = peg$parseOPERATOR_CONCATENATION();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseOPERATOR_AND();\n    }\n\n    return s0;\n  }\n\n  function peg$parse__() {\n    var s0, s1;\n\n    s0 = [];\n    s1 = peg$parsewhitespace();\n    if (s1 === peg$FAILED) {\n      s1 = peg$parsecomment();\n    }\n    while (s1 !== peg$FAILED) {\n      s0.push(s1);\n      s1 = peg$parsewhitespace();\n      if (s1 === peg$FAILED) {\n        s1 = peg$parsecomment();\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parse___() {\n    var s0, s1;\n\n    s0 = [];\n    s1 = peg$parsewhitespace();\n    if (s1 === peg$FAILED) {\n      s1 = peg$parsecomment();\n    }\n    if (s1 !== peg$FAILED) {\n      while (s1 !== peg$FAILED) {\n        s0.push(s1);\n        s1 = peg$parsewhitespace();\n        if (s1 === peg$FAILED) {\n          s1 = peg$parsecomment();\n        }\n      }\n    } else {\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecomment() {\n    var s0;\n\n    s0 = peg$parseblock_comment();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseline_comment();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parsepound_sign_comment();\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseblock_comment() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 2) === peg$c636) {\n      s1 = peg$c636;\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c637); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$currPos;\n      peg$silentFails++;\n      if (input.substr(peg$currPos, 2) === peg$c638) {\n        s5 = peg$c638;\n        peg$currPos += 2;\n      } else {\n        s5 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c639); }\n      }\n      peg$silentFails--;\n      if (s5 === peg$FAILED) {\n        s4 = void 0;\n      } else {\n        peg$currPos = s4;\n        s4 = peg$FAILED;\n      }\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parsechar();\n        if (s5 !== peg$FAILED) {\n          s4 = [s4, s5];\n          s3 = s4;\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$currPos;\n        peg$silentFails++;\n        if (input.substr(peg$currPos, 2) === peg$c638) {\n          s5 = peg$c638;\n          peg$currPos += 2;\n        } else {\n          s5 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c639); }\n        }\n        peg$silentFails--;\n        if (s5 === peg$FAILED) {\n          s4 = void 0;\n        } else {\n          peg$currPos = s4;\n          s4 = peg$FAILED;\n        }\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parsechar();\n          if (s5 !== peg$FAILED) {\n            s4 = [s4, s5];\n            s3 = s4;\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        if (input.substr(peg$currPos, 2) === peg$c638) {\n          s3 = peg$c638;\n          peg$currPos += 2;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c639); }\n        }\n        if (s3 !== peg$FAILED) {\n          s1 = [s1, s2, s3];\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseline_comment() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 2) === peg$c640) {\n      s1 = peg$c640;\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c641); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$currPos;\n      peg$silentFails++;\n      s5 = peg$parseEOL();\n      peg$silentFails--;\n      if (s5 === peg$FAILED) {\n        s4 = void 0;\n      } else {\n        peg$currPos = s4;\n        s4 = peg$FAILED;\n      }\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parsechar();\n        if (s5 !== peg$FAILED) {\n          s4 = [s4, s5];\n          s3 = s4;\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$currPos;\n        peg$silentFails++;\n        s5 = peg$parseEOL();\n        peg$silentFails--;\n        if (s5 === peg$FAILED) {\n          s4 = void 0;\n        } else {\n          peg$currPos = s4;\n          s4 = peg$FAILED;\n        }\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parsechar();\n          if (s5 !== peg$FAILED) {\n            s4 = [s4, s5];\n            s3 = s4;\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsepound_sign_comment() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    if (input.charCodeAt(peg$currPos) === 35) {\n      s1 = peg$c642;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c643); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$currPos;\n      peg$silentFails++;\n      s5 = peg$parseEOL();\n      peg$silentFails--;\n      if (s5 === peg$FAILED) {\n        s4 = void 0;\n      } else {\n        peg$currPos = s4;\n        s4 = peg$FAILED;\n      }\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parsechar();\n        if (s5 !== peg$FAILED) {\n          s4 = [s4, s5];\n          s3 = s4;\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$currPos;\n        peg$silentFails++;\n        s5 = peg$parseEOL();\n        peg$silentFails--;\n        if (s5 === peg$FAILED) {\n          s4 = void 0;\n        } else {\n          peg$currPos = s4;\n          s4 = peg$FAILED;\n        }\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parsechar();\n          if (s5 !== peg$FAILED) {\n            s4 = [s4, s5];\n            s3 = s4;\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsechar() {\n    var s0;\n\n    if (input.length > peg$currPos) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c644); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseinterval_unit() {\n    var s0;\n\n    s0 = peg$parseKW_UNIT_YEAR();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseKW_UNIT_MONTH();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseKW_UNIT_DAY();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parseKW_UNIT_HOUR();\n          if (s0 === peg$FAILED) {\n            s0 = peg$parseKW_UNIT_MINUTE();\n            if (s0 === peg$FAILED) {\n              s0 = peg$parseKW_UNIT_SECOND();\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsewhitespace() {\n    var s0;\n\n    if (peg$c645.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c646); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseEOL() {\n    var s0, s1;\n\n    s0 = peg$parseEOF();\n    if (s0 === peg$FAILED) {\n      s0 = [];\n      if (peg$c278.test(input.charAt(peg$currPos))) {\n        s1 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c279); }\n      }\n      if (s1 !== peg$FAILED) {\n        while (s1 !== peg$FAILED) {\n          s0.push(s1);\n          if (peg$c278.test(input.charAt(peg$currPos))) {\n            s1 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c279); }\n          }\n        }\n      } else {\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseEOF() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    peg$silentFails++;\n    if (input.length > peg$currPos) {\n      s1 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c644); }\n    }\n    peg$silentFails--;\n    if (s1 === peg$FAILED) {\n      s0 = void 0;\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsedata_type_list() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsedata_type_alias();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseCOMMA();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parsedata_type_alias();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parsedata_type_alias();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c17(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsedata_type_alias() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$currPos;\n    s2 = peg$parseident_name();\n    if (s2 !== peg$FAILED) {\n      peg$savedPos = peg$currPos;\n      s3 = peg$c647(s2);\n      if (s3) {\n        s3 = peg$FAILED;\n      } else {\n        s3 = void 0;\n      }\n      if (s3 !== peg$FAILED) {\n        peg$savedPos = s1;\n        s2 = peg$c648(s2);\n        s1 = s2;\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s1;\n      s1 = peg$FAILED;\n    }\n    if (s1 === peg$FAILED) {\n      s1 = null;\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsedata_type();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c649(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsedata_type() {\n    var s0;\n\n    s0 = peg$parsestruct_type();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsearray_type();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parsecharacter_string_type();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parsenumeric_type();\n          if (s0 === peg$FAILED) {\n            s0 = peg$parsedatetime_type();\n            if (s0 === peg$FAILED) {\n              s0 = peg$parsebool_byte_geography_type();\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsecharacter_string_type() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_STRING();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c650(s1);\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parsenumeric_type() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_NUMERIC();\n    if (s1 === peg$FAILED) {\n      s1 = peg$parseKW_INT_64();\n      if (s1 === peg$FAILED) {\n        s1 = peg$parseKW_FLOAT_64();\n      }\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c650(s1);\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parsedatetime_type() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_DATE();\n    if (s1 === peg$FAILED) {\n      s1 = peg$parseKW_DATETIME();\n      if (s1 === peg$FAILED) {\n        s1 = peg$parseKW_TIME();\n        if (s1 === peg$FAILED) {\n          s1 = peg$parseKW_TIMESTAMP();\n        }\n      }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLPAREN();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = [];\n            if (peg$c292.test(input.charAt(peg$currPos))) {\n              s6 = input.charAt(peg$currPos);\n              peg$currPos++;\n            } else {\n              s6 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c293); }\n            }\n            if (s6 !== peg$FAILED) {\n              while (s6 !== peg$FAILED) {\n                s5.push(s6);\n                if (peg$c292.test(input.charAt(peg$currPos))) {\n                  s6 = input.charAt(peg$currPos);\n                  peg$currPos++;\n                } else {\n                  s6 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c293); }\n                }\n              }\n            } else {\n              s5 = peg$FAILED;\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseRPAREN();\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c651(s1, s5);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_DATE();\n      if (s1 === peg$FAILED) {\n        s1 = peg$parseKW_DATETIME();\n        if (s1 === peg$FAILED) {\n          s1 = peg$parseKW_TIME();\n          if (s1 === peg$FAILED) {\n            s1 = peg$parseKW_TIMESTAMP();\n          }\n        }\n      }\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c650(s1);\n      }\n      s0 = s1;\n    }\n\n    return s0;\n  }\n\n  function peg$parsebool_byte_geography_type() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_BYTES();\n    if (s1 === peg$FAILED) {\n      s1 = peg$parseKW_BOOL();\n      if (s1 === peg$FAILED) {\n        s1 = peg$parseKW_GEOGRAPHY();\n      }\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c650(s1);\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parsearray_type() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_ARRAY();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLANGLE();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsedata_type_list();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseRANGLE();\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c652(s1, s5);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsestruct_type() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_STRUCT();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLANGLE();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsedata_type_list();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseRANGLE();\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c652(s1, s5);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n\n    const reservedMap = {\n      'ARRAY': true,\n      'ALTER': true,\n      'ALL': true,\n      'ADD': true,\n      'AND': true,\n      'AS': true,\n      'ASC': true,\n\n      'BETWEEN': true,\n      'BY': true,\n\n      'CALL': true,\n      'CASE': true,\n      'CREATE': true,\n      'CROSS': true,\n      'CONTAINS': true,\n      'CURRENT_DATE': true,\n      'CURRENT_TIME': true,\n      'CURRENT_TIMESTAMP': true,\n      'CURRENT_USER': true,\n\n      'DELETE': true,\n      'DESC': true,\n      'DISTINCT': true,\n      'DROP': true,\n\n      'ELSE': true,\n      'END': true,\n      'EXISTS': true,\n      'EXPLAIN': true,\n\n      'FALSE': true,\n      'FROM': true,\n      'FULL': true,\n      'FOR': true,\n\n      'GROUP': true,\n\n      'HAVING': true,\n\n      'IN': true,\n      'INNER': true,\n      'INSERT': true,\n      'INTO': true,\n      'IS': true,\n\n      'JOIN': true,\n      'JSON': true,\n\n      'KEY': true,\n\n      'LEFT': true,\n      'LIKE': true,\n      'LIMIT': true,\n      'LOW_PRIORITY': true, // for lock table\n\n      'NOT': true,\n      'NULL': true,\n\n      'ON': true,\n      'OR': true,\n      'ORDER': true,\n      'OUTER': true,\n\n      'PARTITION': true,\n\n      'RECURSIVE': true,\n      'RENAME': true,\n      'READ': true, // for lock table\n      'RIGHT': true,\n\n      'SELECT': true,\n      'SESSION_USER': true,\n      'SET': true,\n      'SHOW': true,\n      'SYSTEM_USER': true,\n\n      'TABLE': true,\n      'THEN': true,\n      'TRUE': true,\n      'TRUNCATE': true,\n      'TYPE': true,   // reserved (MySQL)\n\n      'UNION': true,\n      'UPDATE': true,\n      'USING': true,\n\n      'VALUES': true,\n\n      'WINDOW': true,\n      'WITH': true,\n      'WHEN': true,\n      'WHERE': true,\n      'WRITE': true, // for lock table\n\n      'GLOBAL': true,\n      'SESSION': true,\n      'LOCAL': true,\n      'PERSIST': true,\n      'PERSIST_ONLY': true,\n    };\n\n    const DATA_TYPES = {\n      'BOOL': true,\n      'BYTE': true,\n      'DATE': true,\n      'DATETIME': true,\n      'FLOAT64': true,\n      'INT64': true,\n      'NUMERIC': true,\n      'STRING': true,\n      'TIME': true,\n      'TIMESTAMP': true,\n      'ARRAY': true,\n      'STRUCT': true,\n    }\n\n    function createUnaryExpr(op, e) {\n      return {\n        type: 'unary_expr',\n        operator: op,\n        expr: e\n      };\n    }\n\n    function createBinaryExpr(op, left, right) {\n      return {\n        type: 'binary_expr',\n        operator: op,\n        left: left,\n        right: right\n      };\n    }\n\n    function isBigInt(numberStr) {\n      const previousMaxSafe = BigInt(Number.MAX_SAFE_INTEGER)\n      const num = BigInt(numberStr)\n      if (num < previousMaxSafe) return false\n      return true\n    }\n\n    function createList(head, tail, po = 3) {\n      const result = [head];\n      for (let i = 0; i < tail.length; i++) {\n        result.push(tail[i][po]);\n      }\n      return result;\n    }\n\n    function createBinaryExprChain(head, tail) {\n      let result = head;\n      for (let i = 0; i < tail.length; i++) {\n        result = createBinaryExpr(tail[i][1], result, tail[i][3]);\n      }\n      return result;\n    }\n\n    function queryTableAlias(tableName) {\n      const alias = tableAlias[tableName]\n      if (alias) return alias\n      if (tableName) return tableName\n      return null\n    }\n\n    function columnListTableAlias(columnList) {\n      const newColumnsList = new Set()\n      const symbolChar = '::'\n      for(let column of columnList.keys()) {\n        const columnInfo = column.split(symbolChar)\n        if (!columnInfo) {\n          newColumnsList.add(column)\n          break\n        }\n        if (columnInfo && columnInfo[1]) columnInfo[1] = queryTableAlias(columnInfo[1])\n        newColumnsList.add(columnInfo.join(symbolChar))\n      }\n      return Array.from(newColumnsList)\n    }\n\n    function refreshColumnList(columnList) {\n      const columns = columnListTableAlias(columnList)\n      columnList.clear()\n      columns.forEach(col => columnList.add(col))\n    }\n\n    const cmpPrefixMap = {\n      '+': true,\n      '-': true,\n      '*': true,\n      '/': true,\n      '>': true,\n      '<': true,\n      '!': true,\n      '=': true,\n\n      //between\n      'B': true,\n      'b': true,\n      //for is or in\n      'I': true,\n      'i': true,\n      //for like\n      'L': true,\n      'l': true,\n      //for not\n      'N': true,\n      'n': true\n    };\n\n    // used for dependency analysis\n    let varList = [];\n\n    const tableList = new Set();\n    const columnList = new Set();\n    const tableAlias = {};\n\n\n  peg$result = peg$startRuleFunction();\n\n  if (peg$result !== peg$FAILED && peg$currPos === input.length) {\n    return peg$result;\n  } else {\n    if (peg$result !== peg$FAILED && peg$currPos < input.length) {\n      peg$fail(peg$endExpectation());\n    }\n\n    throw peg$buildStructuredError(\n      peg$maxFailExpected,\n      peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,\n      peg$maxFailPos < input.length\n        ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)\n        : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)\n    );\n  }\n}\n\nmodule.exports = {\n  SyntaxError: peg$SyntaxError,\n  parse:       peg$parse\n};\n","module.exports = require(\"big-integer\");","import { parse } from '../pegjs/mysql.pegjs'\n\nexport default {\n  [PARSER_NAME] : parse,\n}\n","import { columnRefToSQL, columnOrderToSQL } from './column'\n\n// const escapeMap = {\n//   '\\0'   : '\\\\0',\n//   '\\''   : '\\\\\\'',\n//   '\"'    : '\\\\\"',\n//   '\\b'   : '\\\\b',\n//   '\\n'   : '\\\\n',\n//   '\\r'   : '\\\\r',\n//   '\\t'   : '\\\\t',\n//   '\\x1a' : '\\\\Z',\n//   // '\\\\'   : '\\\\\\\\',\n// }\n\nconst DEFAULT_OPT = {\n  database : PARSER_NAME || 'mysql',\n  type     : 'table',\n}\n\nlet parserOpt = DEFAULT_OPT\n\nfunction commonOptionConnector(keyword, action, opt) {\n  if (!opt) return\n  if (!keyword) return action(opt)\n  return `${keyword.toUpperCase()} ${action(opt)}`\n}\n\nfunction connector(keyword, str) {\n  if (!str) return\n  return `${keyword.toUpperCase()} ${str}`\n}\n\n/**\n * @param {(Array|boolean|string|number|null)} value\n * @return {Object}\n */\nfunction createValueExpr(value) {\n  const type = typeof value\n  if (Array.isArray(value)) return { type: 'expr_list', value: value.map(createValueExpr) }\n  if (value === null) return { type: 'null', value: null }\n  switch (type) {\n    case 'boolean':\n      return { type: 'bool', value }\n    case 'string':\n      return { type: 'string', value }\n    case 'number':\n      return { type: 'number', value }\n    default:\n      throw new Error(`Cannot convert value \"${type}\" to SQL`)\n  }\n}\n\n/**\n * @param operator\n * @param left\n * @param right\n * @return {Object}\n */\nfunction createBinaryExpr(operator, left, right) {\n  const expr = { operator, type: 'binary_expr' }\n  expr.left = left.type ? left : createValueExpr(left)\n  if (operator === 'BETWEEN' || operator === 'NOT BETWEEN') {\n    expr.right = {\n      type  : 'expr_list',\n      value : [createValueExpr(right[0]), createValueExpr(right[1])],\n    }\n    return expr\n  }\n  expr.right = right.type ? right : createValueExpr(right)\n  return expr\n}\n\n/**\n * Replace param expressions\n *\n * @param {Object} ast    - AST object\n * @param {Object} keys   - Keys = parameter names, values = parameter values\n * @return {Object}     - Newly created AST object\n */\nfunction replaceParamsInner(ast, keys) {\n  Object.keys(ast)\n    .filter(key => {\n      const value = ast[key]\n      return Array.isArray(value) || (typeof value === 'object' && value !== null)\n    })\n    .forEach(key => {\n      const expr = ast[key]\n      if (!(typeof expr === 'object' && expr.type === 'param')) return replaceParamsInner(expr, keys)\n      if (typeof keys[expr.value] === 'undefined') throw new Error(`no value for parameter :${expr.value} found`)\n      ast[key] = createValueExpr(keys[expr.value])\n      return null\n    })\n\n  return ast\n}\n\nfunction escape(str) {\n  return str\n  // const res = []\n  // for (let i = 0, len = str.length; i < len; ++i) {\n  //   let char = str[i]\n  //   const escaped = escapeMap[char]\n  //   if (escaped) char = escaped\n  //   res.push(char)\n  // }\n  // return res.join('')\n}\n\nfunction getParserOpt() {\n  return parserOpt\n}\n\nfunction setParserOpt(opt) {\n  parserOpt = opt\n}\n\nfunction topToSQL(opt) {\n  if (!opt) return\n  const { value, percent } = opt\n  const prefix = `TOP ${value}`\n  if (!percent) return prefix\n  return `${prefix} ${percent.toUpperCase()}`\n}\n\nfunction columnIdentifierToSql(ident) {\n  const { database } = getParserOpt()\n  if (!ident) return\n  switch (database && database.toLowerCase()) {\n    case 'postgresql':\n    case 'db2':\n      return `\"${ident}\"`\n    case 'transactsql':\n      return `[${ident}]`\n    case 'mysql':\n    case 'mariadb':\n    case 'bigquery':\n    default:\n      return `\\`${ident}\\``\n  }\n}\n\nfunction identifierToSql(ident, isDual) {\n  const { database } = getParserOpt()\n  if (isDual === true) return `'${ident}'`\n  if (!ident) return\n  switch (database && database.toLowerCase()) {\n    case 'mysql':\n    case 'mariadb':\n    case 'sqlite':\n      return `\\`${ident}\\``\n    case 'postgresql':\n      return `\"${ident}\"`\n    case 'transactsql':\n      return `[${ident}]`\n    case 'bigquery':\n    case 'db2':\n      return ident\n    default:\n      return `\\`${ident}\\``\n  }\n}\n\nfunction commonTypeValue(opt) {\n  const result = []\n  if (!opt) return result\n  const { type, symbol, value } = opt\n  result.push(type.toUpperCase())\n  if (symbol) result.push(symbol)\n  result.push(value.toUpperCase())\n  return result\n}\n\nfunction toUpper(val) {\n  if (!val) return\n  return val.toUpperCase()\n}\n\nfunction hasVal(val) {\n  return val\n}\n\nfunction literalToSQL(literal) {\n  if (!literal) return\n  const { type, parentheses, value } = literal\n  let str = value\n  switch (type) {\n    case 'string':\n      str = `'${escape(value)}'`\n      break\n    case 'regex_string':\n      str = `r\"${escape(value)}\"`\n      break\n    case 'hex_string':\n      str = `X'${escape(value)}'`\n      break\n    case 'double_quote_string':\n      str = `\"${escape(value)}\"`\n      break\n    case 'single_quote_string':\n      str = `'${value}'`\n      break\n    case 'boolean':\n    case 'bool':\n      str = value ? 'TRUE' : 'FALSE'\n      break\n    case 'null':\n      str = 'NULL'\n      break\n    case 'star':\n      str = '*'\n      break\n    case 'param':\n      str = `:${value}`\n      break\n    case 'origin':\n      str = value.toUpperCase()\n      break\n    case 'date':\n    case 'datetime':\n    case 'time':\n    case 'timestamp':\n      str = `${type.toUpperCase()} '${value}'`\n      break\n    default:\n      break\n  }\n  const { prefix, suffix } = literal\n  const result = []\n  if (prefix) result.push(toUpper(prefix))\n  result.push(str)\n  if (suffix && suffix.collate) result.push(commonTypeValue(suffix.collate).join(' '))\n  str = result.join(' ')\n  return parentheses ? `(${str})` : str\n}\n\nfunction replaceParams(ast, params) {\n  return replaceParamsInner(JSON.parse(JSON.stringify(ast)), params)\n}\n\nfunction onPartitionsToSQL(expr) {\n  const { type, partitions } = expr\n  const result = [\n    toUpper(type),\n    `(${partitions.map(partition => {\n      const { type: partitionType } = partition\n      if (!(partitionType === 'range')) return literalToSQL(partition)\n      const { start, end, symbol } = partition\n      return `${literalToSQL(start)} ${toUpper(symbol)} ${literalToSQL(end)}`\n    }).join(', ')})`,\n  ]\n  return result.join(' ')\n}\n\nfunction arrayStructTypeToSQL(expr) {\n  if (!expr) return\n  const { dataType, definition, anglebracket } = expr\n  const dataTypeUpper = toUpper(dataType)\n  const isNotArrayOrStruct = dataTypeUpper !== 'ARRAY' && dataTypeUpper !== 'STRUCT'\n  if (isNotArrayOrStruct) return dataTypeUpper\n  const result = definition && definition.map(field => {\n    const {\n      field_name: fieldName, field_type: fieldType,\n    } = field\n    const fieldResult = [fieldName, arrayStructTypeToSQL(fieldType)]\n    return fieldResult.filter(hasVal).join(' ')\n  }).join(', ')\n  return anglebracket ? `${dataTypeUpper}<${result}>` : `${dataTypeUpper} ${result}`\n}\n\nfunction commentToSQL(comment) {\n  if (!comment) return\n  const result = []\n  const { keyword, symbol, value } = comment\n  result.push(keyword.toUpperCase())\n  if (symbol) result.push(symbol)\n  result.push(literalToSQL(value))\n  return result.join(' ')\n}\n\nfunction triggerEventToSQL(events) {\n  return events.map(event => {\n    const { keyword: kw, args } = event\n    const result = [toUpper(kw)]\n    if (args) {\n      const { keyword: kwArgs, columns } = args\n      result.push(toUpper(kwArgs), columns.map(columnRefToSQL).join(', '))\n    }\n    return result.join(' ')\n  }).join(' OR ')\n}\n\nfunction returningToSQL(returning) {\n  if (!returning) return ''\n  const { columns } = returning\n  return ['RETURNING', columns.map(columnRefToSQL).filter(hasVal).join(', ')].join(' ')\n}\n\nfunction commonKeywordArgsToSQL(kwArgs) {\n  if (!kwArgs) return []\n  return [toUpper(kwArgs.keyword), toUpper(kwArgs.args)]\n}\n\nfunction autoIncreatementToSQL(autoIncreatement) {\n  if (!autoIncreatement || typeof autoIncreatement === 'string') return toUpper(autoIncreatement)\n  const { keyword, seed, increment, parentheses } = autoIncreatement\n  let result = toUpper(keyword)\n  if (parentheses) result += `(${literalToSQL(seed)}, ${literalToSQL(increment)})`\n  return result\n}\n\nfunction columnOrderListToSQL(columnOrderList) {\n  if (!columnOrderList) return\n  return columnOrderList.map(columnOrderToSQL).filter(hasVal).join(', ')\n}\n\nexport {\n  arrayStructTypeToSQL, autoIncreatementToSQL,\n  columnOrderListToSQL, commonKeywordArgsToSQL, commonOptionConnector,\n  connector, commonTypeValue,commentToSQL, createBinaryExpr,\n  createValueExpr, DEFAULT_OPT, escape, literalToSQL, columnIdentifierToSql,\n  identifierToSql, onPartitionsToSQL, replaceParams, returningToSQL,\n  hasVal, setParserOpt, toUpper, topToSQL, triggerEventToSQL,\n}\n","import { hasVal, toUpper } from './util'\nimport { exprToSQL, orderOrPartitionByToSQL } from './expr'\nimport { overToSQL } from './over'\n\nfunction windowSpecificationToSQL(windowSpec) {\n  const {\n    name,\n    partitionby,\n    orderby,\n    window_frame_clause: windowFrame,\n  } = windowSpec\n  const result = [\n    name,\n    orderOrPartitionByToSQL(partitionby, 'partition by'),\n    orderOrPartitionByToSQL(orderby, 'order by'),\n    toUpper(windowFrame),\n  ]\n  return result.filter(hasVal).join(' ')\n}\n\nfunction asWindowSpecToSQL(asWindowSpec) {\n  if (typeof asWindowSpec === 'string') return asWindowSpec\n  const { window_specification: windowSpec } = asWindowSpec\n  return `(${windowSpecificationToSQL(windowSpec)})`\n}\n\nfunction namedWindowExprToSQL(namedWindowExpr) {\n  const { name, as_window_specification: asWindowSpec } = namedWindowExpr\n  return `${name} AS ${asWindowSpecToSQL(asWindowSpec)}`\n}\n\nfunction namedWindowExprListToSQL(namedWindowExprInfo) {\n  const { expr } = namedWindowExprInfo\n  return expr.map(namedWindowExprToSQL).join(', ')\n}\n\nfunction isConsiderNullsInArgs(fnName) {\n  // position of IGNORE/RESPECT NULLS varies by function\n  switch (fnName) {\n    case 'NTH_VALUE':\n    case 'LEAD':\n    case 'LAG':\n      return false\n    default:\n      return true\n  }\n}\n\nfunction constructArgsList(expr) {\n  const { args, name, consider_nulls = '' } = expr\n  const argsList = args ? exprToSQL(args).join(', ') : ''\n  // cover Syntax from FN_NAME(...args [RESPECT NULLS]) [RESPECT NULLS]\n  const isConsidernulls = isConsiderNullsInArgs(name)\n  const result = [name, '(', argsList, !isConsidernulls && ')', consider_nulls && ' ', consider_nulls, isConsidernulls && ')']\n  return result.filter(hasVal).join('')\n}\n\nfunction windowFuncToSQL(expr) {\n  const { over } = expr\n  const str = constructArgsList(expr)\n  const overStr = overToSQL(over)\n  return [str, overStr].filter(hasVal).join(' ')\n}\n\nexport {\n  asWindowSpecToSQL,\n  namedWindowExprToSQL,\n  namedWindowExprListToSQL,\n  windowFuncToSQL,\n  windowSpecificationToSQL,\n}\n","import { hasVal, toUpper } from './util'\nimport { exprToSQL, orderOrPartitionByToSQL } from './expr'\nimport { asWindowSpecToSQL } from './window'\n\nfunction overToSQL(over) {\n  if (!over) return\n  const {\n    as_window_specification: asWindowSpec,\n    expr,\n    keyword,\n    orderby,\n    partitionby,\n    type,\n  } = over\n  if (toUpper(type) === 'WINDOW') {\n    const windowSQL = asWindowSpecToSQL(asWindowSpec)\n    return `OVER ${windowSQL}`\n  }\n  if (toUpper(type) === 'ON UPDATE') {\n    let onUpdate = `${toUpper(type)} ${toUpper(keyword)}`\n    const args = exprToSQL(expr)\n    if (args) onUpdate = `${onUpdate}(${args.join(', ')})`\n    return onUpdate\n  }\n  const partition = orderOrPartitionByToSQL(partitionby, 'partition by')\n  const order = orderOrPartitionByToSQL(orderby, 'order by')\n  return `OVER (${[partition, order].filter(hasVal).join(' ')})`\n}\n\nexport {\n  overToSQL,\n}\n","import { exprToSQL } from './expr'\nimport { commonTypeValue, hasVal, identifierToSql, toUpper } from './util'\nimport { overToSQL } from './over'\n\nfunction castToSQL(expr) {\n  const { collate, target, expr: expression, symbol, as: alias } = expr\n  const { length, dataType, parentheses, scale } = target\n  let str = ''\n  if (length != null) str = scale ? `${length}, ${scale}` : length\n  if (parentheses) str = `(${str})`\n  let prefix = exprToSQL(expression)\n  let symbolChar = '::'\n  let suffix = ''\n  if (symbol === 'as') {\n    prefix = `CAST(${prefix}`\n    suffix = ')'\n    symbolChar = ` ${symbol.toUpperCase()} `\n  }\n  if (alias) suffix += ` AS ${identifierToSql(alias)}`\n  if (collate) suffix += ` ${commonTypeValue(collate).join(' ')}`\n  return `${prefix}${symbolChar}${dataType}${str}${suffix}`\n}\n\nfunction extractFunToSQL(stmt) {\n  const { args, type } = stmt\n  const { field, cast_type: castType, source } = args\n  const result = [`${toUpper(type)}(${toUpper(field)}`, 'FROM', toUpper(castType), exprToSQL(source)]\n  return `${result.filter(hasVal).join(' ')})`\n}\n\nfunction funcToSQL(expr) {\n  const { args, name } = expr\n  const { parentheses, over, collate } = expr\n  const collateStr = commonTypeValue(collate).join(' ')\n  const overStr = overToSQL(over)\n  if (!args) return [name, overStr].filter(hasVal).join(' ')\n  const str = `${name}(${exprToSQL(args).join(', ')})`\n  return [parentheses ? `(${str})` : str, collateStr, overStr].filter(hasVal).join(' ')\n}\n\nexport {\n  castToSQL,\n  extractFunToSQL,\n  funcToSQL,\n}\n","import { connector, toUpper, hasVal } from './util'\nimport { exprToSQL } from './expr'\n\nfunction composePrefixValSuffix(stmt) {\n  if (!stmt) return []\n  return [toUpper(stmt.prefix), exprToSQL(stmt.value), toUpper(stmt.suffix)]\n}\n\nfunction fetchOffsetToSQL(stmt) {\n  const { fetch, offset } = stmt\n  const result = [...composePrefixValSuffix(offset), ...composePrefixValSuffix(fetch)]\n  return result.filter(hasVal).join(' ')\n}\n\nfunction limitOffsetToSQL(limit) {\n  const { seperator, value } = limit\n  return connector('LIMIT', value.map(exprToSQL).join(`${seperator === 'offset' ? ' ' : ''}${toUpper(seperator)} `))\n}\n\nfunction limitToSQL(limit) {\n  if (!limit) return ''\n  if (limit.fetch) return fetchOffsetToSQL(limit)\n  return limitOffsetToSQL(limit)\n}\n\nexport {\n  limitToSQL,\n}\n","import { exprToSQL } from './expr'\nimport { literalToSQL } from './util'\n\n/**\n * @param {Array<Object>} withExpr\n */\nfunction withToSQL(withExpr) {\n  if (!withExpr || withExpr.length === 0) return\n  const isRecursive = withExpr[0].recursive ? 'RECURSIVE ' : ''\n  const withExprStr = withExpr.map(cte => {\n    const { name, stmt, columns } = cte\n    const column = Array.isArray(columns) ? `(${columns.join(', ')})` : ''\n    return `${literalToSQL(name)}${column} AS (${exprToSQL(stmt)})`\n  }).join(', ')\n\n  return `WITH ${isRecursive}${withExprStr}`\n}\n\nexport {\n  withToSQL,\n}\n","import { tablesToSQL } from './tables'\nimport { exprToSQL, orderOrPartitionByToSQL } from './expr'\nimport { limitToSQL } from './limit'\nimport { hasVal, identifierToSql, commonOptionConnector, returningToSQL } from './util'\n\n/**\n * @param {Array} sets\n * @return {string}\n */\nfunction setToSQL(sets) {\n  if (!sets || sets.length === 0) return ''\n  const clauses = []\n  for (const set of sets) {\n    const { table, column, value } = set\n    const str = [table, column].filter(hasVal).map(info => identifierToSql(info)).join('.')\n    const setItem = [str]\n    let val = ''\n    if (value) {\n      val = exprToSQL(value)\n      setItem.push('=', val)\n    }\n    clauses.push(setItem.filter(hasVal).join(' '))\n  }\n  return clauses.join(', ')\n}\n\nfunction updateToSQL(stmt) {\n  const { table, set, where, orderby, limit, returning } = stmt\n  const clauses = [\n    'UPDATE',\n    tablesToSQL(table),\n    commonOptionConnector('SET', setToSQL, set),\n    commonOptionConnector('WHERE', exprToSQL, where),\n    orderOrPartitionByToSQL(orderby, 'order by'),\n    limitToSQL(limit),\n    returningToSQL(returning),\n  ]\n  return clauses.filter(hasVal).join(' ')\n}\n\nexport {\n  updateToSQL,\n  setToSQL,\n}\n","import { tablesToSQL } from './tables'\nimport { exprToSQL } from './expr'\nimport { identifierToSql, commonOptionConnector, hasVal, toUpper, returningToSQL } from './util'\nimport { selectToSQL } from './select'\nimport { setToSQL } from './update'\n\n/**\n * @param {Array} values\n * @return {string}\n */\nfunction valuesToSQL(values) {\n  if (values.type === 'select') return selectToSQL(values)\n  const clauses = values.map(exprToSQL)\n  return `(${clauses.join('), (')})`\n}\n\nfunction partitionToSQL(partition) {\n  if (!partition) return ''\n  const partitionArr = ['PARTITION', '(']\n  if (Array.isArray(partition)) {\n    partitionArr.push(partition.map(identifierToSql).join(', '))\n  } else {\n    const { value } = partition\n    partitionArr.push(value.map(exprToSQL).join(', '))\n  }\n  partitionArr.push(')')\n  return partitionArr.filter(hasVal).join('')\n}\n\nfunction insertToSQL(stmt) {\n  const {\n    table,\n    type,\n    prefix = 'into',\n    columns,\n    values,\n    where,\n    on_duplicate_update: onDuplicateUpdate,\n    partition,\n    returning,\n    set,\n  } = stmt\n  const { keyword, set: duplicateSet } = onDuplicateUpdate || {}\n  const clauses = [toUpper(type), toUpper(prefix), tablesToSQL(table), partitionToSQL(partition)]\n  if (Array.isArray(columns)) clauses.push(`(${columns.map(identifierToSql).join(', ')})`)\n  clauses.push(commonOptionConnector(Array.isArray(values) ? 'VALUES' : '', valuesToSQL, values))\n  clauses.push(commonOptionConnector('SET', setToSQL, set))\n  clauses.push(commonOptionConnector('WHERE', exprToSQL, where))\n  clauses.push(returningToSQL(returning))\n  clauses.push(commonOptionConnector(keyword, setToSQL, duplicateSet))\n  return clauses.filter(hasVal).join(' ')\n}\n\nexport {\n  insertToSQL,\n  valuesToSQL,\n}\n","import { exprToSQL } from './expr'\nimport { valuesToSQL } from './insert'\nimport { identifierToSql, hasVal, commonOptionConnector, toUpper } from './util'\n\nfunction tableToSQL(tableInfo) {\n  const { table, db, as, expr, schema } = tableInfo\n  const database = identifierToSql(db)\n  const schemaStr = identifierToSql(schema)\n  let tableName = table && identifierToSql(table)\n  if (expr && expr.type === 'values') tableName = `(${commonOptionConnector('VALUES', valuesToSQL, expr.values)})`\n  if (expr && expr.type !== 'values') tableName = exprToSQL(expr)\n  const str = [database, schemaStr, tableName].filter(hasVal).join('.')\n  if (as) return `${str} AS ${identifierToSql(as)}`\n  return str\n}\n\nfunction unnestToSQL(unnestExpr) {\n  const { type, as, expr, with_offset: withOffset } = unnestExpr\n  const result = [toUpper(type), `(${expr && exprToSQL(expr) || ' '})`, commonOptionConnector('AS', identifierToSql, as), commonOptionConnector(toUpper(withOffset && withOffset.keyword), identifierToSql, withOffset && withOffset.as)]\n  return result.filter(hasVal).join(' ')\n}\n\n/**\n * @param {Array} tables\n * @return {string}\n */\nfunction tablesToSQL(tables) {\n  const { type } = tables\n  if (toUpper(type) === 'UNNEST') return unnestToSQL(tables)\n  const baseTable = tables[0]\n  const clauses = []\n  if (baseTable.type === 'dual') return 'DUAL'\n  clauses.push(tableToSQL(baseTable))\n  for (let i = 1; i < tables.length; ++i) {\n    const joinExpr = tables[i]\n    const { on, using, join } = joinExpr\n    const str = []\n    str.push(join ? ` ${join}` : ',')\n    str.push(tableToSQL(joinExpr))\n    str.push(commonOptionConnector('ON', exprToSQL, on))\n    if (using) str.push(`USING (${using.map(identifierToSql).join(', ')})`)\n    clauses.push(str.filter(hasVal).join(' '))\n  }\n  return clauses.filter(hasVal).join('')\n}\n\nfunction tableOptionToSQL(tableOption) {\n  const { keyword, symbol, value } = tableOption\n  const sql = [keyword.toUpperCase()]\n  if (symbol) sql.push(symbol)\n  sql.push(value)\n  return sql.join(' ')\n}\n\nexport {\n  tablesToSQL,\n  tableOptionToSQL,\n  tableToSQL,\n  unnestToSQL,\n}\n","import { exprToSQL, getExprListSQL, orderOrPartitionByToSQL } from './expr'\nimport { columnsToSQL } from './column'\nimport { limitToSQL } from './limit'\nimport { withToSQL } from './with'\nimport { tablesToSQL } from './tables'\nimport { hasVal, commonOptionConnector, connector, topToSQL, toUpper } from './util'\n\n/**\n * @param {Object}      stmt\n * @param {?Array}      stmt.with\n * @param {?Array}      stmt.options\n * @param {?string}     stmt.distinct\n * @param {?Array|string}   stmt.columns\n * @param {?Array}      stmt.from\n * @param {?Object}     stmt.where\n * @param {?Array}      stmt.groupby\n * @param {?Object}     stmt.having\n * @param {?Array}      stmt.orderby\n * @param {?Array}      stmt.limit\n * @return {string}\n */\n\nfunction selectToSQL(stmt) {\n  const {\n    as_struct_val: asStructVal, columns, distinct, from, for_sys_time_as_of: forSystem = {}, for_update: forUpdate, groupby, having, limit, options, orderby, parentheses_symbol: parentheses, top, window: windowInfo, with: withInfo, where,\n  } = stmt\n  const clauses = [withToSQL(withInfo), 'SELECT', toUpper(asStructVal)]\n  clauses.push(topToSQL(top))\n  if (Array.isArray(options)) clauses.push(options.join(' '))\n  clauses.push(distinct, columnsToSQL(columns, from))\n  // FROM + joins\n  clauses.push(commonOptionConnector('FROM', tablesToSQL, from))\n  const { keyword, expr } = forSystem || {}\n  clauses.push(commonOptionConnector(keyword, exprToSQL, expr))\n  clauses.push(commonOptionConnector('WHERE', exprToSQL, where))\n  clauses.push(connector('GROUP BY', getExprListSQL(groupby).join(', ')))\n  clauses.push(commonOptionConnector('HAVING', exprToSQL, having))\n  clauses.push(commonOptionConnector('WINDOW', exprToSQL, windowInfo))\n  clauses.push(orderOrPartitionByToSQL(orderby, 'order by'))\n  clauses.push(limitToSQL(limit))\n  clauses.push(toUpper(forUpdate))\n  const sql = clauses.filter(hasVal).join(' ')\n  return parentheses ? `(${sql})` : sql\n}\n\nexport {\n  selectToSQL,\n}\n","import { exprToSQL } from './expr'\nimport { limitToSQL } from './limit'\nimport { tablesToSQL } from './tables'\nimport { commonOptionConnector, hasVal, literalToSQL, toUpper } from './util'\n\nfunction showEventToSQL(showEventExpr) {\n  const { in: inClause, from , limit } = showEventExpr\n  return [\n    commonOptionConnector('IN', literalToSQL, inClause && inClause.right),\n    commonOptionConnector('FROM', tablesToSQL, from),\n    limitToSQL(limit),\n  ].filter(hasVal).join(' ')\n}\n\nfunction showLikeAndWhereToSQL(showCharacterSetExpr) {\n  const { expr } = showCharacterSetExpr\n  if (!expr) return\n  const { op } = expr\n  if (toUpper(op) === 'LIKE') return commonOptionConnector('LIKE', literalToSQL, expr.right)\n  return commonOptionConnector('WHERE', exprToSQL, expr)\n}\n\nfunction showGrantsForUser(showGrantsForExpr) {\n  const { for: forExpr } = showGrantsForExpr\n  if (!forExpr) return\n  const { user, host, role_list } = forExpr\n  let userAndHost = `'${user}'`\n  if (host) userAndHost += `@'${host}'`\n  return ['FOR', userAndHost, role_list && 'USING', role_list && role_list.map(role => `'${role}'`).join(', ')].filter(hasVal).join(' ')\n}\n\nfunction showToSQL(showExpr) {\n  const { suffix, keyword } = showExpr\n  let str = ''\n  switch (toUpper(keyword)) {\n    case 'BINLOG':\n      str = showEventToSQL(showExpr)\n      break\n    case 'CHARACTER':\n    case 'COLLATION':\n      str = showLikeAndWhereToSQL(showExpr)\n      break\n    case 'GRANTS':\n      str = showGrantsForUser(showExpr)\n      break\n    default:\n      break\n  }\n  const result = ['SHOW', toUpper(keyword), toUpper(suffix), str]\n  return result.filter(hasVal).join(' ')\n}\n\nexport {\n  showToSQL,\n}\n","import { columnsToSQL } from './column'\nimport { exprToSQL } from './expr'\nimport { arrayStructTypeToSQL, hasVal, toUpper } from './util'\n\nfunction arrayExprListToSQL(expr) {\n  const {\n    array_path: arrayPath,\n    brackets,\n    expr_list: exprList,\n    parentheses,\n  } = expr\n  if (!exprList) return `[${columnsToSQL(arrayPath)}]`\n  if (Array.isArray(exprList)) return `[${exprList.map(col => `(${columnsToSQL(col)})`).filter(hasVal).join(', ')}]`\n  const result = exprToSQL(exprList)\n  if (brackets) return `[${result}]`\n  return parentheses ? `(${result})` : result\n}\n\nfunction arrayStructValueToSQL(expr) {\n  const {\n    expr_list: exprList,\n    type,\n  } = expr\n  switch (toUpper(type)) {\n    case 'STRUCT':\n      return `(${columnsToSQL(exprList)})`\n    case 'ARRAY':\n      return arrayExprListToSQL(expr)\n    default:\n      return ''\n  }\n}\n\nfunction arrayStructExprToSQL(expr) {\n  const { definition, keyword } = expr\n  const result = [toUpper(keyword)]\n  if (definition && typeof definition === 'object') {\n    result.length = 0\n    result.push(arrayStructTypeToSQL(definition))\n  }\n  result.push(arrayStructValueToSQL(expr))\n  return result.filter(hasVal).join('')\n}\n\nexport {\n  arrayStructExprToSQL,\n  arrayStructValueToSQL,\n}\n","import { literalToSQL, toUpper, connector } from './util'\nimport { alterExprToSQL } from './alter'\nimport { aggrToSQL } from './aggregation'\nimport { assignToSQL } from './assign'\nimport { binaryToSQL } from './binary'\nimport { caseToSQL } from './case'\nimport { columnRefToSQL } from './column'\nimport { castToSQL, extractFunToSQL, funcToSQL } from './func'\nimport { intervalToSQL } from './interval'\nimport { selectToSQL } from './select'\nimport { showToSQL } from './show'\nimport { arrayStructExprToSQL } from './array-struct'\nimport { unionToSQL } from './union'\nimport { namedWindowExprListToSQL, windowFuncToSQL } from './window'\n\nconst exprToSQLConvertFn = {\n  alter       : alterExprToSQL,\n  aggr_func   : aggrToSQL,\n  window_func : windowFuncToSQL,\n  'array'     : arrayStructExprToSQL,\n  assign      : assignToSQL,\n  binary_expr : binaryToSQL,\n  case        : caseToSQL,\n  cast        : castToSQL,\n  column_ref  : columnRefToSQL,\n  extract     : extractFunToSQL,\n  function    : funcToSQL,\n  interval    : intervalToSQL,\n  show        : showToSQL,\n  struct      : arrayStructExprToSQL,\n  'window'    : namedWindowExprListToSQL,\n}\n\nfunction varToSQL(expr) {\n  const { prefix = '@', name, members, keyword } = expr\n  const val = []\n  if (keyword) val.push(keyword)\n  const varName = members && members.length > 0 ? `${name}.${members.join('.')}` : name\n  val.push(`${prefix || ''}${varName}`)\n  return val.join(' ')\n}\n\nexprToSQLConvertFn.var = varToSQL\n\nfunction exprToSQL(exprOrigin) {\n  if (!exprOrigin) return\n  const expr = exprOrigin\n  if (exprOrigin.ast) {\n    const { ast } = expr\n    Reflect.deleteProperty(expr, ast)\n    for (const key of Object.keys(ast)) {\n      expr[key] = ast[key]\n    }\n  }\n  return exprToSQLConvertFn[expr.type] ? exprToSQLConvertFn[expr.type](expr) : literalToSQL(expr)\n}\n\nfunction unaryToSQL(unarExpr) {\n  const { operator, parentheses, expr } = unarExpr\n  const space = (operator === '-' || operator === '+') ? '' : ' '\n  const str = `${operator}${space}${exprToSQL(expr)}`\n  return parentheses ? `(${str})` : str\n}\n\nfunction getExprListSQL(exprList) {\n  if (!exprList) return []\n  return exprList.map(exprToSQL)\n}\n\nexprToSQLConvertFn.expr_list = expr => {\n  const str = getExprListSQL(expr.value)\n  return expr.parentheses ? `(${str.join(', ')})` : str\n}\n\nexprToSQLConvertFn.select = expr => {\n  const str = typeof expr._next === 'object' ? unionToSQL(expr) : selectToSQL(expr)\n  return expr.parentheses ? `(${str})` : str\n}\n\nexprToSQLConvertFn.unary_expr = unaryToSQL\n\nfunction orderOrPartitionByToSQL(expr, prefix) {\n  if (!Array.isArray(expr)) return ''\n  let expressions = []\n  const upperPrefix = toUpper(prefix)\n  switch (upperPrefix) {\n    case 'ORDER BY':\n      expressions = expr.map(info => `${exprToSQL(info.expr)} ${info.type}`)\n      break\n    case 'PARTITION BY':\n      expressions = expr.map(info => `${columnRefToSQL(info.expr)}`)\n      break\n    default:\n      expressions = expr.map(info => `${columnRefToSQL(info.expr)}`)\n      break\n  }\n  return connector(upperPrefix, expressions.join(', '))\n}\n\nexport {\n  exprToSQLConvertFn,\n  exprToSQL,\n  getExprListSQL,\n  varToSQL,\n  orderOrPartitionByToSQL,\n}\n","import { exprToSQL, orderOrPartitionByToSQL } from './expr'\nimport { hasVal } from './util'\nimport { overToSQL } from './over'\n\nfunction aggrToSQL(expr) {\n  /** @type {Object} */\n  const { args, over, orderby, within_group_orderby } = expr\n  let str = exprToSQL(args.expr)\n  const fnName = expr.name\n  const overStr = overToSQL(over)\n  if (args.distinct) {\n    const separator = args.expr.parentheses ? '' : ' '\n    str = ['DISTINCT', str].join(separator)\n  }\n  if (args.orderby) str = `${str} ${orderOrPartitionByToSQL(args.orderby, 'order by')}`\n  if (orderby) str = `${str} ${orderOrPartitionByToSQL(orderby, 'order by')}`\n  const withinGroup = within_group_orderby ? `WITHIN GROUP (${orderOrPartitionByToSQL(within_group_orderby, 'order by')})` : ''\n  return [`${fnName}(${str})`, withinGroup, overStr].filter(hasVal).join(' ')\n}\n\nexport {\n  aggrToSQL,\n}\n","import { exprToSQL } from './expr'\n\nfunction assignToSQL(expr) {\n  /** @type {Object} */\n  const { left, right, symbol, keyword } = expr\n  left.keyword = keyword\n  const leftVar = exprToSQL(left)\n  const rightVal = exprToSQL(right)\n  return `${leftVar} ${symbol} ${rightVal}`\n}\n\nexport {\n  assignToSQL,\n}\n","import { exprToSQL } from './expr'\n\nfunction binaryToSQL(expr) {\n  let { operator } = expr\n  let rstr = exprToSQL(expr.right)\n  let isBetween = false\n  if (Array.isArray(rstr)) {\n    switch (operator) {\n      case '=':\n        operator = 'IN'\n        break\n      case '!=':\n        operator = 'NOT IN'\n        break\n      case 'BETWEEN':\n      case 'NOT BETWEEN':\n        isBetween = true\n        rstr = `${rstr[0]} AND ${rstr[1]}`\n        break\n      default:\n        break\n    }\n    if (!isBetween) rstr = `(${rstr.join(', ')})`\n  }\n  const str = [exprToSQL(expr.left), operator, rstr].join(' ')\n  return expr.parentheses ? `(${str})` : str\n}\n\nexport {\n  binaryToSQL,\n}\n","import { exprToSQL } from './expr'\n\nfunction caseToSQL(expr) {\n  const res = ['CASE']\n  const conditions = expr.args\n\n  if (expr.expr) res.push(exprToSQL(expr.expr))\n\n  for (let i = 0, len = conditions.length; i < len; ++i) {\n    res.push(conditions[i].type.toUpperCase())\n    if (conditions[i].cond) {\n      res.push(exprToSQL(conditions[i].cond))\n      res.push('THEN')\n    }\n    res.push(exprToSQL(conditions[i].result))\n  }\n\n  res.push('END')\n\n  return res.join(' ')\n}\n\nexport {\n  caseToSQL,\n}\n","import { toUpper, hasVal } from './util'\nimport { exprToSQL } from './expr'\n\nfunction intervalToSQL(intervalExpr) {\n  const { expr, unit } = intervalExpr\n  const result = ['INTERVAL', exprToSQL(expr), toUpper(unit)]\n  return result.filter(hasVal).join(' ')\n}\n\nexport {\n  intervalToSQL,\n}\n","import {\n  literalToSQL,\n  identifierToSql,\n  toUpper,\n  hasVal,\n  commentToSQL,\n  onPartitionsToSQL,\n} from './util'\nimport { exprToSQL } from './expr'\n\nfunction indexTypeToSQL(indexType) {\n  if (!indexType) return []\n  const { keyword, type } = indexType\n  return [keyword.toUpperCase(), type.toUpperCase()]\n}\n\nfunction indexOptionToSQL(indexOpt) {\n  if (!indexOpt) return\n  const { type, expr, symbol } = indexOpt\n  const upperType = type.toUpperCase()\n  const indexOptArray = []\n  indexOptArray.push(upperType)\n  switch (upperType) {\n    case 'KEY_BLOCK_SIZE':\n      if (symbol) indexOptArray.push(symbol)\n      indexOptArray.push(literalToSQL(expr))\n      break\n    case 'BTREE':\n    case 'HASH':\n      indexOptArray.length = 0\n      indexOptArray.push(...indexTypeToSQL(indexOpt))\n      break\n    case 'WITH PARSER':\n      indexOptArray.push(expr)\n      break\n    case 'VISIBLE':\n    case 'INVISIBLE':\n      break\n    case 'COMMENT':\n      indexOptArray.shift()\n      indexOptArray.push(commentToSQL(indexOpt))\n      break\n    case 'DATA_COMPRESSION':\n      indexOptArray.push(symbol, toUpper(expr.value), onPartitionsToSQL(expr.on))\n      break\n    default:\n      indexOptArray.push(symbol, literalToSQL(expr))\n      break\n  }\n  return indexOptArray.filter(hasVal).join(' ')\n}\n\nfunction indexOptionListToSQL(indexOptList) {\n  if (!indexOptList) return []\n  return indexOptList.map(indexOptionToSQL)\n}\n\nfunction indexTypeAndOptionToSQL(indexDefinition) {\n  const {\n    constraint_type: constraintType,\n    index_type: indexType,\n    index_options: indexOptions = [],\n    definition,\n  } = indexDefinition\n  const dataType = []\n  dataType.push(...indexTypeToSQL(indexType))\n  if (definition && definition.length) {\n    const definitionSQL = toUpper(constraintType) === 'CHECK' ? `(${exprToSQL(definition[0])})` : `(${definition.map(col => identifierToSql(col)).join(', ')})`\n    dataType.push(definitionSQL)\n  }\n  dataType.push(indexOptionListToSQL(indexOptions).join(' '))\n  return dataType\n}\n\nfunction indexDefinitionToSQL(indexDefinition) {\n  const indexSQL = []\n  const {\n    keyword,\n    index,\n  } = indexDefinition\n  indexSQL.push(toUpper(keyword))\n  indexSQL.push(index)\n  indexSQL.push(...indexTypeAndOptionToSQL(indexDefinition))\n  return indexSQL.filter(hasVal).join(' ')\n}\n\nexport {\n  indexDefinitionToSQL,\n  indexTypeToSQL,\n  indexOptionToSQL,\n  indexOptionListToSQL,\n  indexTypeAndOptionToSQL,\n}\n","import {\n  identifierToSql,\n  toUpper,\n  hasVal,\n} from './util'\nimport { indexTypeAndOptionToSQL } from './index-definition'\nimport { columnReferenceDefinitionToSQL } from './column'\n\nfunction constraintDefinitionToSQL(constraintDefinition) {\n  if (!constraintDefinition) return\n  const {\n    constraint,\n    constraint_type: constraintType,\n    enforced,\n    index,\n    keyword,\n    reference_definition: referenceDefinition,\n  } = constraintDefinition\n  const constraintSQL = []\n  constraintSQL.push(toUpper(keyword))\n  constraintSQL.push(identifierToSql(constraint))\n  constraintSQL.push(toUpper(constraintType))\n  constraintSQL.push(identifierToSql(index))\n  constraintSQL.push(...indexTypeAndOptionToSQL(constraintDefinition))\n  constraintSQL.push(...columnReferenceDefinitionToSQL(referenceDefinition))\n  constraintSQL.push(toUpper(enforced))\n  return constraintSQL.filter(hasVal).join(' ')\n}\n\nexport {\n  constraintDefinitionToSQL,\n}\n","import { constraintDefinitionToSQL } from './constrain'\nimport { exprToSQL } from './expr'\nimport { castToSQL } from './func'\nimport { tablesToSQL } from './tables'\nimport {\n  autoIncreatementToSQL,\n  columnIdentifierToSql,\n  commonOptionConnector,\n  commonTypeValue,\n  commentToSQL,\n  hasVal,\n  identifierToSql,\n  literalToSQL,\n  toUpper,\n} from './util'\n\nfunction columnOffsetToSQL(column, isDual) {\n  if (typeof column === 'string') return identifierToSql(column, isDual)\n  const { expr, offset, suffix } = column\n  return [exprToSQL(expr), offset, suffix].filter(hasVal).join('')\n}\nfunction columnRefToSQL(expr) {\n  const {\n    arrow, as, collate, column, isDual, schema, table, parentheses, property,\n    suffix,\n  } = expr\n  let str = column === '*' ? '*' : columnOffsetToSQL(column, isDual)\n  if (table) str = `${identifierToSql(table)}.${str}`\n  if (schema) str = `${identifierToSql(schema)}.${str}`\n  const result = [\n    str,\n    commonOptionConnector('AS', exprToSQL, as),\n    commonOptionConnector(arrow, literalToSQL, property),\n  ]\n  if (collate) result.push(commonTypeValue(collate).join(' '))\n  result.push(toUpper(suffix))\n  const sql = result.filter(hasVal).join(' ')\n  return parentheses ? `(${sql})` : sql\n}\n\nfunction columnDataType(definition) {\n  const { dataType, length, suffix, scale, expr } = definition || {}\n  let result = dataType\n  if (length != null) result += `(${[length, scale].filter(val => val != null).join(', ')})`\n  if (suffix && suffix.length) result += ` ${suffix.join(' ')}`\n  if (expr) result += exprToSQL(expr)\n  return result\n}\n\nfunction columnReferenceDefinitionToSQL(referenceDefinition) {\n  const reference = []\n  if (!referenceDefinition) return reference\n  const {\n    definition,\n    keyword,\n    match,\n    table,\n    on_delete: onDelete,\n    on_update: onUpdate,\n  } = referenceDefinition\n  reference.push(keyword.toUpperCase())\n  reference.push(tablesToSQL(table))\n  reference.push(`(${definition.map(identifierToSql).join(', ')})`)\n  reference.push(toUpper(match))\n  reference.push(...commonTypeValue(onDelete))\n  reference.push(...commonTypeValue(onUpdate))\n  return reference.filter(hasVal)\n}\n\nfunction columnOption(definition) {\n  const columnOpt = []\n  const {\n    nullable, character_set: characterSet, check, comment, collate, storage,\n    default_val: defaultOpt,\n    auto_increment: autoIncrement,\n    unique_or_primary: uniquePrimary,\n    column_format: columnFormat,\n    reference_definition: referenceDefinition,\n  } = definition\n\n  columnOpt.push(toUpper(nullable && nullable.value))\n  if (defaultOpt) {\n    const { type, value } = defaultOpt\n    columnOpt.push(type.toUpperCase(), exprToSQL(value))\n  }\n  columnOpt.push(constraintDefinitionToSQL(check))\n  columnOpt.push(autoIncreatementToSQL(autoIncrement), toUpper(uniquePrimary), commentToSQL(comment))\n  columnOpt.push(...commonTypeValue(characterSet))\n  columnOpt.push(...commonTypeValue(collate))\n  columnOpt.push(...commonTypeValue(columnFormat))\n  columnOpt.push(...commonTypeValue(storage))\n  columnOpt.push(...columnReferenceDefinitionToSQL(referenceDefinition))\n  return columnOpt.filter(hasVal).join(' ')\n}\n\nfunction columnOrderToSQL(columnOrder) {\n  const { column, collate, nulls, opclass, order } = columnOrder\n  const result = [\n    exprToSQL(column),\n    commonOptionConnector(collate && collate.type, identifierToSql, collate && collate.value),\n    opclass,\n    toUpper(order),\n    toUpper(nulls),\n  ]\n  return result.filter(hasVal).join(' ')\n}\n\nfunction columnDefinitionToSQL(columnDefinition) {\n  const column = []\n  const name = columnRefToSQL(columnDefinition.column)\n  const dataType = columnDataType(columnDefinition.definition)\n  column.push(name)\n  column.push(dataType)\n  const columnOpt = columnOption(columnDefinition)\n  column.push(columnOpt)\n  return column.filter(hasVal).join(' ')\n}\n\nfunction columnToSQL(column, isDual) {\n  const { expr, type } = column\n  if (type === 'cast') return castToSQL(column)\n  if (isDual) expr.isDual = isDual\n  let str = exprToSQL(expr)\n  if (expr.parentheses && Reflect.has(expr, 'array_index')) str = `(${str})`\n  if (expr.array_index) str = `${str}[${expr.array_index.number}]`\n  if (column.as !== null) {\n    str = `${str} AS `\n    if (/^(`?)[a-z_][0-9a-z_]*(`?)$/i.test(column.as)) str = `${str}${identifierToSql(column.as)}`\n    else str = `${str}${columnIdentifierToSql(column.as)}`\n  }\n  return str\n}\n\nfunction getDual(tables) {\n  const baseTable = Array.isArray(tables) && tables[0]\n  if (baseTable && baseTable.type === 'dual') return true\n  return false\n}\n/**\n * Stringify column expressions\n *\n * @param {Array} columns\n * @return {string}\n */\nfunction columnsToSQL(columns, tables) {\n  if (!columns || columns === '*') return columns\n  const isDual = getDual(tables)\n  const result = []\n  const { expr_list: exprList, star, type } = columns\n  result.push(star, toUpper(type))\n  const exprListArr = exprList || columns\n  const columnsStr = exprListArr.map(col => columnToSQL(col, isDual)).join(', ')\n  result.push([type && '(', columnsStr, type && ')'].filter(hasVal).join(''))\n  return result.filter(hasVal).join(' ')\n}\n\nexport {\n  columnDefinitionToSQL,\n  columnRefToSQL,\n  columnsToSQL,\n  columnDataType,\n  columnOrderToSQL,\n  columnReferenceDefinitionToSQL,\n}\n","import { alterExprToSQL } from './alter'\nimport { exprToSQL } from './expr'\nimport { indexDefinitionToSQL, indexOptionListToSQL, indexTypeToSQL } from './index-definition'\nimport { columnDefinitionToSQL } from './column'\nimport { constraintDefinitionToSQL } from './constrain'\nimport { funcToSQL } from './func'\nimport { tablesToSQL, tableOptionToSQL, tableToSQL } from './tables'\nimport { unionToSQL } from './union'\nimport { columnIdentifierToSql, columnOrderListToSQL, commonOptionConnector, commonKeywordArgsToSQL, toUpper, hasVal, identifierToSql, triggerEventToSQL, literalToSQL } from './util'\n\nfunction createDefinitionToSQL(definition) {\n  if (!definition) return []\n  const { resource } = definition\n  switch (resource) {\n    case 'column':\n      return columnDefinitionToSQL(definition)\n    case 'index':\n      return indexDefinitionToSQL(definition)\n    case 'constraint':\n      return constraintDefinitionToSQL(definition)\n    case 'sequence':\n      return [toUpper(definition.prefix), exprToSQL(definition.value)].filter(hasVal).join(' ')\n    default:\n      throw new Error(`unknown resource = ${resource} type`)\n  }\n}\n\nfunction createTableToSQL(stmt) {\n  const {\n    type, keyword, table, like, as, temporary,\n    if_not_exists: ifNotExists,\n    create_definitions: createDefinition,\n    table_options: tableOptions,\n    ignore_replace: ignoreReplace,\n    query_expr: queryExpr,\n  } = stmt\n  const sql = [toUpper(type), toUpper(temporary), toUpper(keyword), toUpper(ifNotExists), tablesToSQL(table)]\n  if (like) {\n    const { type: likeType, table: likeTable } = like\n    const likeTableName = tablesToSQL(likeTable)\n    sql.push(toUpper(likeType), likeTableName)\n    return sql.filter(hasVal).join(' ')\n  }\n  if (createDefinition) {\n    sql.push(`(${createDefinition.map(createDefinitionToSQL).join(', ')})`)\n  }\n  if (tableOptions) {\n    sql.push(tableOptions.map(tableOptionToSQL).join(' '))\n  }\n  sql.push(toUpper(ignoreReplace), toUpper(as))\n  if (queryExpr) sql.push(unionToSQL(queryExpr))\n  return sql.filter(hasVal).join(' ')\n}\n\nfunction createTriggerToSQL(stmt) {\n  const {\n    constraint, constraint_kw: constraintKw,\n    deferrable,\n    events, execute,\n    for_each: forEach, from,\n    location,\n    keyword,\n    type, table,\n    when,\n  } = stmt\n  const sql = [toUpper(type), toUpper(constraintKw), toUpper(keyword), identifierToSql(constraint), toUpper(location)]\n  const event = triggerEventToSQL(events)\n  sql.push(event, 'ON', tableToSQL(table))\n  if (from) sql.push('FROM', tableToSQL(from))\n  sql.push(...commonKeywordArgsToSQL(deferrable), ...commonKeywordArgsToSQL(forEach))\n  if (when) sql.push(toUpper(when.type), exprToSQL(when.cond))\n  sql.push(toUpper(execute.keyword), funcToSQL(execute.expr))\n  return sql.filter(hasVal).join(' ')\n}\n\nfunction createExtensionToSQL(stmt) {\n  const {\n    extension, from, if_not_exists: ifNotExists,\n    keyword, schema, type, with: withName, version,\n  } = stmt\n  const sql = [\n    toUpper(type),\n    toUpper(keyword),\n    toUpper(ifNotExists),\n    literalToSQL(extension),\n    toUpper(withName),\n    commonOptionConnector('SCHEMA', literalToSQL, schema),\n    commonOptionConnector('VERSION', literalToSQL, version),\n    commonOptionConnector('FROM', literalToSQL, from),\n  ]\n  return sql.filter(hasVal).join(' ')\n}\n\nfunction createIndexToSQL(stmt) {\n  const {\n    concurrently, filestream_on: fileStream, keyword, include, index_columns: indexColumns,\n    index_type: indexType, index_using: indexUsing, index, on, index_options: indexOpt, algorithm_option: algorithmOpt, lock_option: lockOpt, on_kw: onKw, table, tablespace, type, where,\n    with: withExpr, with_before_where: withBeforeWhere,\n  } = stmt\n  const withIndexOpt = withExpr && `WITH (${indexOptionListToSQL(withExpr).join(', ')})`\n  const includeColumns = include && `${toUpper(include.keyword)} (${include.columns.map(col => identifierToSql(col)).join(', ')})`\n  const sql = [\n    toUpper(type), toUpper(indexType), toUpper(keyword), toUpper(concurrently),\n    identifierToSql(index), toUpper(onKw), tableToSQL(table), ...indexTypeToSQL(indexUsing),\n    `(${columnOrderListToSQL(indexColumns)})`, includeColumns, indexOptionListToSQL(indexOpt).join(' '), alterExprToSQL(algorithmOpt), alterExprToSQL(lockOpt),\n    commonOptionConnector('TABLESPACE', literalToSQL, tablespace),\n  ]\n  if (withBeforeWhere) {\n    sql.push(withIndexOpt, commonOptionConnector('WHERE', exprToSQL, where))\n  } else {\n    sql.push(commonOptionConnector('WHERE', exprToSQL, where), withIndexOpt)\n  }\n  sql.push(commonOptionConnector('ON', exprToSQL, on), commonOptionConnector('FILESTREAM_ON', literalToSQL, fileStream))\n  return sql.filter(hasVal).join(' ')\n}\n\nfunction createSequenceToSQL(stmt) {\n  const {\n    type, keyword, sequence, temporary,\n    if_not_exists: ifNotExists,\n    create_definitions: createDefinition,\n  } = stmt\n  const sql = [\n    toUpper(type),\n    toUpper(temporary),\n    toUpper(keyword),\n    toUpper(ifNotExists),\n    tablesToSQL(sequence),\n  ]\n  if (createDefinition) sql.push(createDefinition.map(createDefinitionToSQL).join(' '))\n  return sql.filter(hasVal).join(' ')\n}\n\nfunction createDatabaseToSQL(stmt) {\n  const {\n    type, keyword, database,\n    if_not_exists: ifNotExists,\n    create_definitions: createDefinition,\n  } = stmt\n  const sql = [\n    toUpper(type),\n    toUpper(keyword),\n    toUpper(ifNotExists),\n    columnIdentifierToSql(database),\n  ]\n  if (createDefinition) sql.push(createDefinition.map(tableOptionToSQL).join(' '))\n  return sql.filter(hasVal).join(' ')\n}\n\nfunction createToSQL(stmt) {\n  const { keyword } = stmt\n  let sql = ''\n  switch (keyword.toLowerCase()) {\n    case 'table':\n      sql = createTableToSQL(stmt)\n      break\n    case 'trigger':\n      sql = createTriggerToSQL(stmt)\n      break\n    case 'extension':\n      sql = createExtensionToSQL(stmt)\n      break\n    case 'index':\n      sql = createIndexToSQL(stmt)\n      break\n    case 'sequence':\n      sql = createSequenceToSQL(stmt)\n      break\n    case 'database':\n      sql = createDatabaseToSQL(stmt)\n      break\n    default:\n      throw new Error(`unknown create resource ${keyword}`)\n  }\n  return sql\n}\n\nexport {\n  createToSQL,\n  createDefinitionToSQL,\n}\n","import { columnDefinitionToSQL, columnRefToSQL } from './column'\nimport { createDefinitionToSQL } from './create'\nimport { indexTypeAndOptionToSQL } from './index-definition'\nimport { tablesToSQL } from './tables'\nimport { exprToSQL } from './expr'\nimport { hasVal, toUpper, identifierToSql } from './util'\n\nfunction alterToSQL(stmt) {\n  const { type, table, expr = [] } = stmt\n  const action = toUpper(type)\n  const tableName = tablesToSQL(table)\n  const exprList = expr.map(exprToSQL)\n  const result = [action, 'TABLE', tableName, exprList.join(', ')]\n  return result.filter(hasVal).join(' ')\n}\n\nfunction alterExprToSQL(expr) {\n  if (!expr) return ''\n  const {\n    action,\n    create_definitions: createDefinition,\n    first_after: firstAfter,\n    if_not_exists: ifNotExists,keyword,\n    old_column: oldColumn,\n    prefix,\n    resource,\n    symbol,\n  } = expr\n  let name = ''\n  let dataType = []\n  switch (resource) {\n    case 'column':\n      dataType = [columnDefinitionToSQL(expr)]\n      break\n    case 'index':\n      dataType = indexTypeAndOptionToSQL(expr)\n      name = expr[resource]\n      break\n    case 'table':\n      name = identifierToSql(expr[resource])\n      break\n    case 'algorithm':\n    case 'lock':\n      name = [symbol, toUpper(expr[resource])].filter(hasVal).join(' ')\n      break\n    case 'constraint':\n      name = identifierToSql(expr[resource])\n      dataType = [createDefinitionToSQL(createDefinition)]\n      break\n    case 'key':\n      name = identifierToSql(expr[resource])\n      break\n    default:\n      break\n  }\n  const alterArray = [\n    toUpper(action),\n    toUpper(keyword),\n    toUpper(ifNotExists),\n    oldColumn && columnRefToSQL(oldColumn),\n    toUpper(prefix),\n    name,\n    dataType.filter(hasVal).join(' '),\n    firstAfter && `${toUpper(firstAfter.keyword)} ${columnRefToSQL(firstAfter.column)}`,\n  ]\n  return alterArray.filter(hasVal).join(' ')\n}\n\nexport {\n  alterToSQL,\n  alterExprToSQL,\n}\n","import { alterExprToSQL } from './alter'\nimport { columnDataType, columnRefToSQL } from './column'\nimport { createDefinitionToSQL } from './create'\nimport { identifierToSql, hasVal, toUpper } from './util'\nimport { exprToSQL } from './expr'\nimport { tablesToSQL, tableToSQL } from './tables'\n\nfunction callToSQL(stmt) {\n  const type = 'CALL'\n  const storeProcessCall = exprToSQL(stmt.expr)\n  return `${type} ${storeProcessCall}`\n}\n\nfunction commonCmdToSQL(stmt) {\n  const { type, keyword, name } = stmt\n  const clauses = [toUpper(type), toUpper(keyword)]\n  switch (keyword) {\n    case 'table':\n      clauses.push(tablesToSQL(name))\n      break\n    case 'procedure':\n      clauses.push(identifierToSql(name))\n      break\n    case 'index':\n      clauses.push(\n        columnRefToSQL(name),\n        'ON',\n        tableToSQL(stmt.table),\n        stmt.options && stmt.options.map(alterExprToSQL).filter(hasVal).join(' ')\n      )\n      break\n    default:\n      break\n  }\n  return clauses.filter(hasVal).join(' ')\n}\n\nfunction descToSQL(stmt) {\n  const { type, table } = stmt\n  const action = toUpper(type)\n  return `${action} ${identifierToSql(table)}`\n}\n\nfunction renameToSQL(stmt) {\n  const { type, table } = stmt\n  const clauses = []\n  const prefix = `${type && type.toUpperCase()} TABLE`\n  if (table) {\n    for (const tables of table) {\n      const renameInfo = tables.map(tableToSQL)\n      clauses.push(renameInfo.join(' TO '))\n    }\n  }\n  return `${prefix} ${clauses.join(', ')}`\n}\n\nfunction useToSQL(stmt) {\n  const { type, db } = stmt\n  const action = toUpper(type)\n  const database = identifierToSql(db)\n  return `${action} ${database}`\n}\n\nfunction setVarToSQL(stmt) {\n  const { expr } = stmt\n  const action = 'SET'\n  const val = exprToSQL(expr)\n  return `${action} ${val}`\n}\n\nfunction pgLock(stmt) {\n  const { lock_mode: lockMode, nowait } = stmt\n  const lockInfo = []\n  if (lockMode) {\n    const { mode } = lockMode\n    lockInfo.push(mode.toUpperCase())\n  }\n  if (nowait) lockInfo.push(nowait.toUpperCase())\n  return lockInfo\n}\n\nfunction lockUnlockToSQL(stmt) {\n  const { type, keyword, tables } = stmt\n  const result = [type.toUpperCase(), toUpper(keyword)]\n  if (type.toUpperCase() === 'UNLOCK') return result.join(' ')\n  const tableStmt = []\n  for (const tableInfo of tables) {\n    const { table, lock_type: lockType } = tableInfo\n    const tableInfoTemp = [tableToSQL(table)]\n    if (lockType) {\n      const lockKeyList = ['prefix', 'type', 'suffix']\n      tableInfoTemp.push(lockKeyList.map(key => toUpper(lockType[key])).filter(hasVal).join(' '))\n    }\n    tableStmt.push(tableInfoTemp.join(' '))\n  }\n  result.push(tableStmt.join(', '), ...pgLock(stmt))\n  return result.filter(hasVal).join(' ')\n}\n\nfunction declareToSQL(stmt) {\n  const { type, declare } = stmt\n  const result = [toUpper(type)]\n  const info = declare.map(dec => {\n    const { at, name, as, prefix, definition, keyword } = dec\n    const declareInfo = [`${at}${name}`, toUpper(as)]\n    switch (keyword) {\n      case 'variable':\n        declareInfo.push(columnDataType(prefix))\n        if (definition) declareInfo.push('=', exprToSQL(definition))\n        break\n      case 'cursor':\n        declareInfo.push(toUpper(prefix))\n        break\n      case 'table':\n        declareInfo.push(toUpper(prefix), `(${definition.map(createDefinitionToSQL).join(', ')})`)\n        break\n      default:\n        break\n    }\n    return declareInfo.filter(hasVal).join(' ')\n  }).join(', ')\n  result.push(info)\n  return result.join(' ')\n}\n\nexport {\n  callToSQL,\n  commonCmdToSQL,\n  declareToSQL,\n  descToSQL,\n  renameToSQL,\n  useToSQL,\n  setVarToSQL,\n  lockUnlockToSQL,\n}\n","import { alterToSQL } from './alter'\nimport { createToSQL } from './create'\nimport { selectToSQL } from './select'\nimport { deleteToSQL } from './delete'\nimport { updateToSQL } from './update'\nimport { insertToSQL } from './insert'\nimport {\n  callToSQL,\n  commonCmdToSQL,\n  declareToSQL,\n  descToSQL,\n  useToSQL,\n  renameToSQL,\n  setVarToSQL,\n  lockUnlockToSQL,\n} from './command'\nimport { orderOrPartitionByToSQL } from './expr'\nimport { limitToSQL } from './limit'\nimport { showToSQL } from './show'\nimport { analyzeToSQL, attachToSQL } from './sqlite'\nimport { withToSQL } from './with'\nimport { hasVal } from './util'\n\nconst typeToSQLFn = {\n  alter    : alterToSQL,\n  analyze  : analyzeToSQL,\n  attach   : attachToSQL,\n  create   : createToSQL,\n  select   : selectToSQL,\n  delete   : deleteToSQL,\n  update   : updateToSQL,\n  insert   : insertToSQL,\n  drop     : commonCmdToSQL,\n  truncate : commonCmdToSQL,\n  replace  : insertToSQL,\n  declare  : declareToSQL,\n  use      : useToSQL,\n  rename   : renameToSQL,\n  call     : callToSQL,\n  desc     : descToSQL,\n  set      : setVarToSQL,\n  lock     : lockUnlockToSQL,\n  unlock   : lockUnlockToSQL,\n  show     : showToSQL,\n}\n\nfunction unionToSQL(stmt) {\n  const fun = typeToSQLFn[stmt.type]\n  const res = [fun(stmt)]\n  const { _orderby, _limit } = stmt\n  while (stmt._next) {\n    const unionKeyword = (stmt.union || 'union').toUpperCase()\n    res.push(unionKeyword, fun(stmt._next))\n    stmt = stmt._next\n  }\n  res.push(orderOrPartitionByToSQL(_orderby, 'order by'), limitToSQL(_limit))\n  return res.filter(hasVal).join(' ')\n}\n\nfunction bigQueryToSQL(stmt) {\n  const { with: withExpr, parentheses, select, orderby, limit } = stmt\n  const result = [withToSQL(withExpr), parentheses && '(', unionToSQL(select), parentheses && ')']\n  // process with, orderby and limit\n  result.push(orderOrPartitionByToSQL(orderby, 'order by'), limitToSQL(limit))\n  return result.filter(val => val).join(' ')\n}\n\nfunction multipleToSQL(stmt) {\n  const res = []\n  for (let i = 0, len = stmt.length; i < len; ++i) {\n    let astInfo = stmt[i] && stmt[i].ast\n    if (!astInfo) astInfo = stmt[i]\n    res.push(unionToSQL(astInfo))\n  }\n  return res.join(' ; ')\n}\n\nexport {\n  bigQueryToSQL,\n  unionToSQL,\n  multipleToSQL,\n}\n","import { exprToSQL } from './expr'\nimport { tableToSQL } from './tables'\nimport { hasVal, identifierToSql, toUpper } from './util'\n\nfunction analyzeToSQL(stmt) {\n  const { type, table } = stmt\n  const action = toUpper(type)\n  const tableName = tableToSQL(table)\n  return [action, tableName].join(' ')\n}\n\nfunction attachToSQL(stmt) {\n  const { type, database, expr, as, schema } = stmt\n  return [toUpper(type), toUpper(database), exprToSQL(expr), toUpper(as), identifierToSql(schema)].filter(hasVal).join(' ')\n}\n\nexport {\n  attachToSQL,\n  analyzeToSQL,\n}\n","import { columnsToSQL } from './column'\nimport { exprToSQL, orderOrPartitionByToSQL } from './expr'\nimport { limitToSQL } from './limit'\nimport { tablesToSQL } from './tables'\nimport { commonOptionConnector, hasVal } from './util'\n\nfunction deleteToSQL(stmt) {\n  const clauses = ['DELETE']\n  const { columns, from, table, where, orderby, limit } = stmt\n  const columnInfo = columnsToSQL(columns, from)\n  clauses.push(columnInfo)\n  if (Array.isArray(table)) {\n    if (!(table.length === 1 && table[0].addition === true)) clauses.push(tablesToSQL(table))\n  }\n  clauses.push(commonOptionConnector('FROM', tablesToSQL, from))\n  clauses.push(commonOptionConnector('WHERE', exprToSQL, where))\n  clauses.push(orderOrPartitionByToSQL(orderby, 'order by'))\n  clauses.push(limitToSQL(limit))\n  return clauses.filter(hasVal).join(' ')\n}\n\nexport {\n  deleteToSQL,\n}\n","import { bigQueryToSQL, unionToSQL, multipleToSQL } from './union'\n\nconst surportedTypes = ['analyze', 'attach', 'select', 'delete', 'update', 'insert', 'drop', 'rename', 'truncate', 'call', 'desc', 'use', 'alter', 'set', 'create', 'lock', 'unlock', 'bigquery', 'declare', 'show', 'replace']\n\nfunction checkSupported(expr) {\n  const ast = expr && expr.ast ? expr.ast : expr\n  if (!surportedTypes.includes(ast.type)) throw new Error(`${ast.type} statements not supported at the moment`)\n}\n\nexport default function toSQL(ast) {\n  if (Array.isArray(ast)) {\n    ast.forEach(checkSupported)\n    return multipleToSQL(ast)\n  }\n  checkSupported(ast)\n  const { type } = ast\n  if (type === 'bigquery') return bigQueryToSQL(ast)\n  return unionToSQL(ast)\n}\n","import parsers from './parser.all'\nimport astToSQL from './sql'\nimport { DEFAULT_OPT, setParserOpt } from './util'\n\nclass Parser {\n  astify(sql, opt = DEFAULT_OPT) {\n    const astInfo = this.parse(sql, opt)\n    return astInfo && astInfo.ast\n  }\n\n  sqlify(ast, opt = DEFAULT_OPT) {\n    setParserOpt(opt)\n    return astToSQL(ast, opt)\n  }\n\n  parse(sql, opt = DEFAULT_OPT) {\n    const { database = (PARSER_NAME || 'mysql') } = opt\n    setParserOpt(opt)\n    const typeCase = database.toLowerCase()\n    if (parsers[typeCase]) return parsers[typeCase](sql.trim())\n    throw new Error(`${database} is not supported currently`)\n  }\n\n  whiteListCheck(sql, whiteList, opt = DEFAULT_OPT) {\n    if (!whiteList || whiteList.length === 0) return\n    const { type = 'table' } = opt\n    if (!this[`${type}List`] || typeof this[`${type}List`] !== 'function') throw new Error(`${type} is not valid check mode`)\n    const checkFun = this[`${type}List`].bind(this)\n    const authorityList = checkFun(sql, opt)\n    let hasAuthority = true\n    let denyInfo = ''\n    for (const authority of authorityList) {\n      let hasCorrespondingAuthority = false\n      for (const whiteAuthority of whiteList) {\n        const regex = new RegExp(whiteAuthority, 'i')\n        if (regex.test(authority)) {\n          hasCorrespondingAuthority = true\n          break\n        }\n      }\n      if (!hasCorrespondingAuthority) {\n        denyInfo = authority\n        hasAuthority = false\n        break\n      }\n    }\n    if (!hasAuthority) throw new Error(`authority = '${denyInfo}' is required in ${type} whiteList to execute SQL = '${sql}'`)\n  }\n\n  tableList(sql, opt) {\n    const astInfo = this.parse(sql, opt)\n    return astInfo && astInfo.tableList\n  }\n\n  columnList(sql, opt) {\n    const astInfo = this.parse(sql, opt)\n    return astInfo && astInfo.columnList\n  }\n}\n\nexport default Parser\n","import Parser from './src/parser'\nimport * as util from './src/util'\n\nexport {\n  Parser,\n  util,\n}\n\nif (global && global.window) {\n  global.window.NodeSQLParser = {\n    Parser,\n    util,\n  }\n}\n"],"sourceRoot":""}