{"version":3,"sources":["/Users/taozhi/learning/node-sql-parser/webpack/universalModuleDefinition","/Users/taozhi/learning/node-sql-parser/webpack/bootstrap","/Users/taozhi/learning/node-sql-parser/src/util.js","/Users/taozhi/learning/node-sql-parser/src/array-struct.js","/Users/taozhi/learning/node-sql-parser/src/expr.js","/Users/taozhi/learning/node-sql-parser/src/aggregation.js","/Users/taozhi/learning/node-sql-parser/src/assign.js","/Users/taozhi/learning/node-sql-parser/src/binary.js","/Users/taozhi/learning/node-sql-parser/src/case.js","/Users/taozhi/learning/node-sql-parser/src/interval.js","/Users/taozhi/learning/node-sql-parser/src/tables.js","/Users/taozhi/learning/node-sql-parser/src/column.js","/Users/taozhi/learning/node-sql-parser/src/limit.js","/Users/taozhi/learning/node-sql-parser/src/alter.js","/Users/taozhi/learning/node-sql-parser/src/index-definition.js","/Users/taozhi/learning/node-sql-parser/src/func.js","/Users/taozhi/learning/node-sql-parser/src/command.js","/Users/taozhi/learning/node-sql-parser/src/union.js","/Users/taozhi/learning/node-sql-parser/src/sqlite.js","/Users/taozhi/learning/node-sql-parser/src/delete.js","/Users/taozhi/learning/node-sql-parser/src/over.js","/Users/taozhi/learning/node-sql-parser/src/select.js","/Users/taozhi/learning/node-sql-parser/src/create.js","/Users/taozhi/learning/node-sql-parser/src/window.js","/Users/taozhi/learning/node-sql-parser/src/insert.js","/Users/taozhi/learning/node-sql-parser/src/update.js","/Users/taozhi/learning/node-sql-parser/src/constrain.js","/Users/taozhi/learning/node-sql-parser/src/with.js","/Users/taozhi/learning/node-sql-parser/src/show.js","/Users/taozhi/learning/node-sql-parser/src/parser.single.js","/Users/taozhi/learning/node-sql-parser/src/sql.js","/Users/taozhi/learning/node-sql-parser/src/parser.js","/Users/taozhi/learning/node-sql-parser/pegjs/bigquery.pegjs","/Users/taozhi/learning/node-sql-parser/index.js","/Users/taozhi/learning/node-sql-parser/(webpack)/buildin/global.js","/Users/taozhi/learning/node-sql-parser/node_modules/big-integer/BigInteger.js","/Users/taozhi/learning/node-sql-parser/(webpack)/buildin/module.js"],"names":["root","factory","exports","module","define","amd","a","i","window","installedModules","__webpack_require__","moduleId","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","DEFAULT_OPT","database","PARSER_NAME","type","parserOpt","commonOptionConnector","keyword","action","opt","toUpperCase","connector","str","createValueExpr","Array","isArray","map","Error","createBinaryExpr","operator","left","right","expr","escape","getParserOpt","setParserOpt","topToSQL","percent","prefix","columnIdentifierToSql","ident","toLowerCase","identifierToSql","isDual","commonTypeValue","result","symbol","push","toUpper","val","hasVal","literalToSQL","literal","parentheses","suffix","collate","join","replaceParams","ast","params","replaceParamsInner","keys","filter","forEach","JSON","parse","stringify","onPartitionsToSQL","partitions","partition","start","end","arrayStructTypeToSQL","dataType","definition","anglebracket","dataTypeUpper","field","field_name","field_type","commentToSQL","comment","triggerEventToSQL","events","event","kw","args","kwArgs","columns","columnRefToSQL","returningToSQL","returning","commonKeywordArgsToSQL","autoIncreatementToSQL","autoIncreatement","seed","increment","columnOrderListToSQL","columnOrderList","columnOrderToSQL","arrayStructValueToSQL","exprList","expr_list","columnsToSQL","arrayPath","array_path","brackets","col","exprToSQL","arrayExprListToSQL","arrayStructExprToSQL","length","exprToSQLConvertFn","alter","alterExprToSQL","aggr_func","over","orderby","within_group_orderby","fnName","overStr","overToSQL","distinct","separator","orderOrPartitionByToSQL","withinGroup","window_func","windowFuncToSQL","assign","leftVar","rightVal","binary_expr","rstr","isBetween","case","res","conditions","len","cond","cast","castToSQL","column_ref","extract","extractFunToSQL","function","funcToSQL","interval","intervalExpr","unit","show","showToSQL","struct","namedWindowExprListToSQL","exprOrigin","Reflect","deleteProperty","getExprListSQL","expressions","upperPrefix","info","members","varName","select","_next","unionToSQL","selectToSQL","unary_expr","unarExpr","space","tableToSQL","tableInfo","table","db","as","schema","schemaStr","tableName","valuesToSQL","values","tablesToSQL","tables","unnestExpr","withOffset","with_offset","unnestToSQL","baseTable","clauses","joinExpr","on","using","tableOptionToSQL","tableOption","sql","arrow","column","offset","columnOffsetToSQL","columnDataType","scale","columnReferenceDefinitionToSQL","referenceDefinition","reference","match","onDelete","on_delete","onUpdate","on_update","columnOrder","nulls","opclass","order","columnDefinitionToSQL","columnDefinition","columnOpt","nullable","characterSet","character_set","check","storage","defaultOpt","default_val","autoIncrement","auto_increment","uniquePrimary","unique_or_primary","columnFormat","column_format","reference_definition","constraintDefinitionToSQL","columnOption","getDual","star","columnsStr","has","array_index","number","test","columnToSQL","composePrefixValSuffix","stmt","limitToSQL","limit","fetch","seperator","limitOffsetToSQL","alterToSQL","createDefinition","create_definitions","firstAfter","first_after","ifNotExists","if_not_exists","oldColumn","old_column","resource","indexTypeAndOptionToSQL","createDefinitionToSQL","indexTypeToSQL","indexType","indexOptionToSQL","indexOpt","upperType","indexOptArray","shift","indexOptionListToSQL","indexOptList","indexDefinition","constraintType","constraint_type","index_type","index_options","indexOptions","definitionSQL","indexDefinitionToSQL","indexSQL","index","target","expression","alias","symbolChar","castType","cast_type","source","collateStr","commonCmdToSQL","options","lockUnlockToSQL","tableStmt","lockType","lock_type","tableInfoTemp","lockMode","lock_mode","nowait","lockInfo","pgLock","typeToSQLFn","analyze","attach","createToSQL","delete","from","where","columnInfo","addition","update","updateToSQL","insert","insertToSQL","drop","truncate","replace","declare","dec","at","declareInfo","use","rename","renameInfo","storeProcessCall","desc","set","lock","unlock","fun","_orderby","_limit","unionKeyword","union","bigQueryToSQL","withExpr","withToSQL","multipleToSQL","astInfo","asWindowSpec","as_window_specification","partitionby","windowSQL","asWindowSpecToSQL","asStructVal","as_struct_val","for_sys_time_as_of","forSystem","forUpdate","for_update","groupby","having","parentheses_symbol","top","windowInfo","withInfo","like","temporary","tableOptions","table_options","ignoreReplace","ignore_replace","queryExpr","query_expr","likeType","likeTable","likeTableName","createTableToSQL","constraint","constraintKw","constraint_kw","deferrable","execute","for_each","location","when","createTriggerToSQL","extension","withName","version","createExtensionToSQL","concurrently","fileStream","filestream_on","include","indexColumns","index_columns","indexUsing","index_using","algorithmOpt","algorithm_option","lockOpt","lock_option","onKw","on_kw","tablespace","withBeforeWhere","with_before_where","withIndexOpt","includeColumns","createIndexToSQL","sequence","createSequenceToSQL","createDatabaseToSQL","windowSpec","window_specification","windowFrame","window_frame_clause","windowSpecificationToSQL","namedWindowExprToSQL","namedWindowExpr","namedWindowExprInfo","consider_nulls","argsList","isConsidernulls","isConsiderNullsInArgs","constructArgsList","partitionToSQL","partitionArr","onDuplicateUpdate","on_duplicate_update","duplicateSet","setToSQL","sets","setItem","constraintDefinition","enforced","constraintSQL","isRecursive","recursive","withExprStr","cte","showExpr","showEventExpr","inClause","showCharacterSetExpr","op","showLikeAndWhereToSQL","showGrantsForExpr","forExpr","user","host","role_list","userAndHost","role","showGrantsForUser","surportedTypes","checkSupported","includes","toSQL","Parser","this","astToSQL","typeCase","parsers","trim","whiteList","checkFun","authorityList","hasAuthority","denyInfo","authority","hasCorrespondingAuthority","whiteAuthority","regex","RegExp","tableList","columnList","BigInt","peg$SyntaxError","message","expected","found","captureStackTrace","child","parent","ctor","constructor","peg$subclass","buildMessage","DESCRIBE_EXPECTATION_FNS","expectation","literalEscape","text","escapedParts","parts","classEscape","inverted","any","other","description","hex","ch","charCodeAt","toString","j","descriptions","sort","slice","describeExpected","describeFound","SyntaxError","input","peg$result","peg$FAILED","peg$startRuleFunctions","peg$parsestart","peg$startRuleFunction","peg$c3","peg$literalExpectation","peg$c5","peg$c10","peg$c12","peg$c17","head","tail","createList","peg$c21","peg$c23","peg$c25","peg$c27","peg$c32","peg$c41","peg$c46","unshift","tableAlias","columnListTableAlias","clear","add","refreshColumnList","peg$c68","peg$c70","peg$c72","peg$c74","peg$c76","peg$c79","peg$c81","peg$c94","createBinaryExprChain","peg$c96","peg$c98","peg$c102","nk","peg$c105","peg$c107","peg$c109","peg$c111","peg$c113","peg$c115","peg$c123","peg$c125","peg$c128","peg$c130","peg$c132","peg$c141","reservedMap","peg$c145","peg$c146","peg$c147","peg$classExpectation","peg$c148","chars","peg$c150","peg$c151","peg$c152","peg$c154","peg$c155","peg$c156","peg$c160","peg$c161","peg$c162","peg$c163","peg$c164","peg$c165","peg$c166","peg$c168","peg$c172","peg$c182","bc","peg$c186","peg$c188","peg$c190","peg$c192","peg$c194","peg$c196","peg$c198","peg$c200","peg$c202","peg$c204","peg$c206","peg$c208","peg$c210","peg$c212","peg$c214","peg$c216","peg$c218","peg$c220","peg$c222","peg$c224","peg$c226","peg$c238","peg$c241","ca","peg$c242","peg$c243","peg$c244","peg$c245","peg$c247","peg$c250","peg$c253","peg$c256","peg$c259","peg$c262","peg$c265","peg$c268","peg$c271","peg$c274","peg$c277","peg$c278","peg$c279","peg$c288","peg$c292","peg$c293","peg$c294","peg$c295","peg$c296","peg$c297","peg$c298","peg$c299","peg$c302","peg$c308","peg$c312","peg$c319","peg$c329","peg$c334","peg$c351","peg$c353","peg$c355","peg$c357","peg$c359","peg$c361","peg$c363","peg$c365","peg$c367","peg$c369","peg$c371","peg$c376","peg$c378","peg$c380","peg$c382","peg$c384","peg$c386","peg$c388","peg$c390","peg$c392","peg$c395","peg$c397","peg$c400","peg$c403","peg$c406","peg$c409","peg$c412","peg$c415","peg$c418","peg$c421","peg$c424","peg$c427","peg$c430","peg$c433","peg$c436","peg$c439","peg$c442","peg$c445","peg$c448","peg$c451","peg$c457","peg$c459","peg$c461","peg$c463","peg$c465","peg$c467","peg$c469","peg$c472","peg$c475","peg$c481","peg$c487","peg$c490","peg$c493","peg$c496","peg$c499","peg$c505","peg$c514","peg$c517","peg$c538","peg$c544","peg$c547","peg$c550","peg$c553","peg$c562","peg$c568","peg$c577","peg$c580","peg$c625","peg$c627","peg$c629","peg$c631","peg$c633","peg$c635","peg$c637","peg$c639","peg$c641","peg$c643","peg$c644","peg$c645","peg$c646","peg$c650","peg$c652","peg$currPos","peg$posDetailsCache","line","peg$maxFailPos","peg$maxFailExpected","peg$silentFails","startRule","ignoreCase","peg$computePosDetails","pos","details","peg$computeLocation","startPos","endPos","startPosDetails","endPosDetails","peg$fail","peg$buildStructuredError","s0","s2","peg$parse__","s1","s3","s4","s5","s6","s7","peg$parsequery_statement","peg$parseSEMICOLON","cur","peg$c1","peg$parsemultiple_stmt","s9","s8","peg$parseKW_WITH","peg$parsecte_definition","peg$parseCOMMA","peg$parsewith_clause","peg$parseunion_stmt","peg$parseorder_by_clause","peg$parselimit_clause","with","peg$parsequery_expr","peg$parseselect_stmt","peg$parseset_op","substr","peg$parseident_start","peg$parseKW_UNION","peg$parseKW_ALL","peg$parseKW_DISTINCT","u","peg$c13","peg$parseunion_stmt_nake","peg$c15","s11","s13","s15","s17","s19","s21","s23","peg$parseKW_SELECT","peg$parse___","peg$parseKW_AS","peg$parseKW_STRUCT","peg$parseKW_VALUE","k","peg$parsestruct_value","peg$parsecolumn_clause","peg$parseKW_FROM","peg$parseLPAREN","peg$parseexpr","peg$parseRPAREN","peg$parsealias_clause","peg$parseKW_OFFSET","peg$parsewith_offset","peg$parsetable_base","peg$parsetable_ref","peg$parsetable_ref_list","peg$parsefrom_clause","peg$parsefor_sys_time_as_of","peg$parseKW_WHERE","peg$parseor_and_where_expr","peg$parsewhere_clause","peg$parseKW_GROUP","peg$parseKW_BY","peg$parseexpr_list","peg$parsegroup_by_clause","peg$parseKW_HAVING","peg$parsehaving_clause","peg$parseKW_WINDOW","peg$parsenamed_window_expr","peg$parsenamed_window_expr_list","peg$parsewindow_clause","sv","f","fs","w","g","h","win","peg$c19","peg$parseselect_stmt_nake","peg$parseliteral_string","peg$parseident_name","peg$parseSTAR","peg$parsecolumns_list","peg$parsecolumn_list_item","peg$parsecolumn_offset_expr","peg$parseLBRAKE","peg$parseKW_ORDINAL","peg$parseliteral_numeric","peg$parseRBRAKE","peg$parseident","peg$parseDOT","tbl","pro","mid","peg$c37","peg$parseexpr_alias","peg$c143","peg$parsequoted_ident","peg$parsealias_ident","s10","s12","s14","peg$parsejoin_op","peg$parseKW_USING","peg$parseon_clause","peg$c49","peg$c50","peg$parsetable_join","peg$parsetable_name","peg$c52","peg$parseKW_LEFT","peg$parseKW_OUTER","peg$parseKW_JOIN","peg$parseKW_RIGHT","peg$parseKW_FULL","peg$parseKW_CROSS","peg$parseKW_INNER","peg$c57","project","dt","obj","peg$c58","peg$c59","peg$parseKW_ON","peg$parseas_window_specification","peg$parsepartition_by_clause","peg$parseKW_BETWEEN","peg$parseKW_AND","e","peg$parsewindow_frame_clause","peg$parsewindow_specification","peg$parseKW_PARTITION","peg$parseKW_ORDER","peg$parseorder_by_element","peg$parseorder_by_list","peg$parseKW_DESC","peg$parseKW_ASC","peg$c84","peg$parsenumber_or_param","peg$parseparam","peg$parseKW_LIMIT","i1","peg$c85","el","peg$c86","peg$parsestruct_type","peg$parsestruct_expr","peg$parseprimary","peg$parseLOGIC_OPERATOR","peg$parselogic_operator_expr","peg$parseand_expr","peg$parseKW_OR","peg$parseor_expr","peg$parseadditive_operator","createUnaryExpr","peg$parseunary_expr","peg$parsearray_type","peg$parseKW_ARRAY","peg$parseliteral","peg$parseliteral_list","peg$c88","peg$parseparentheses_expr","peg$parseparentheses_list_expr","peg$c89","peg$parsearray_expr","peg$c93","peg$parsenot_expr","peg$parsecomparison_expr","peg$parseKW_NOT","peg$parseKW_EXISTS","peg$parseexists_op","peg$parseexists_expr","rh","peg$parseadditive_expr","peg$parsearithmetic_comparison_operator","peg$parsearithmetic_op_right","peg$parsein_op","peg$c121","peg$parsein_op_right","peg$parsebetween_or_not_between_op","peg$parsebetween_op_right","peg$parseKW_IS","peg$c117","peg$parseis_op_right","peg$parseKW_LIKE","peg$parselike_op","peg$parselike_op_right","peg$parsecomparison_op_right","peg$parsecolumn_ref","peg$parseKW_IN","peg$parsemultiplicative_expr","peg$parsemultiplicative_operator","list","peg$parseKW_CAST","peg$parsedata_type","peg$parseKW_DECIMAL","peg$parseint","precision","peg$c230","peg$c231","peg$parseKW_SIGNED","peg$parseKW_UNSIGNED","peg$parsesignedness","peg$parseKW_INTEGER","peg$c232","peg$parsecast_expr","peg$parseKW_COUNT","peg$parsestar_expr","or","peg$c180","peg$parsecount_arg","peg$parseover_partition","peg$parseaggr_fun_count","peg$parseKW_SUM","peg$parseKW_MAX","peg$parseKW_MIN","peg$parseKW_AVG","peg$parseKW_SUM_MAX_MIN_AVG","peg$parseaggr_fun_smma","peg$parseaggr_func","peg$parseKW_EXTRACT","peg$parseextract_filed","peg$parseKW_TIMESTAMP","peg$parseKW_INTERVAL","peg$parseKW_TIME","peg$parseKW_DATE","peg$c228","peg$parseextract_func","peg$c184","peg$parseproc_func_name","peg$parseKW_CURRENT_DATE","peg$parseKW_CURRENT_TIME","peg$parseKW_CURRENT_TIMESTAMP","peg$parsescalar_func","peg$parseon_update_current_timestamp","up","peg$c183","peg$parsefunc_call","peg$parseKW_CASE","peg$parsecase_when_then","peg$parsecase_else","peg$parseKW_END","condition_list","otherwise","peg$c136","peg$parsecase_expr","peg$parseKW_UNIT_YEAR","peg$parseKW_UNIT_MONTH","peg$parseKW_UNIT_DAY","peg$parseKW_UNIT_HOUR","peg$parseKW_UNIT_MINUTE","peg$parseKW_UNIT_SECOND","peg$parseinterval_unit","peg$parseinterval_expr","peg$parseKW_WHEN","peg$parseKW_THEN","peg$parseKW_ELSE","peg$parsecolumn_name","peg$parsecolumn_without_kw","peg$parsecolumn","peg$c140","charAt","peg$parsedouble_quoted_ident","peg$parsesingle_quoted_ident","peg$parsebackticks_quoted_ident","peg$parsecolumn_part","peg$parseident_part","peg$c174","peg$parseKW_OVER","peg$parseKW_TRUE","peg$parseKW_FALSE","peg$parseliteral_bool","peg$parseKW_NULL","peg$parseliteral_null","peg$parseKW_DATETIME","peg$parsesingle_char","peg$parsesingle_quote_char","peg$parseliteral_datetime","peg$c240","peg$parseescape_char","h1","h2","h3","h4","peg$parsehexDigit","String","fromCharCode","parseInt","peg$parsefrac","peg$parseexp","int_","frac","numStr","isBigInt","parseFloat","peg$c282","exp","peg$c283","peg$c284","peg$parsenumber","peg$parsedigits","peg$parsedigit","sign","peg$parsee","peg$parseLANGLE","peg$parseRANGLE","peg$parseOPERATOR_CONCATENATION","peg$parseOPERATOR_AND","peg$parsewhitespace","peg$parsecomment","peg$parsechar","peg$parseblock_comment","peg$parseEOL","peg$parseline_comment","peg$parsepound_sign_comment","peg$parseEOF","peg$parsedata_type_list","peg$parsedata_type_alias","DATA_TYPES","peg$c649","peg$parseKW_STRING","peg$parsecharacter_string_type","peg$parseKW_NUMERIC","peg$parseKW_INT_64","peg$parseKW_FLOAT_64","peg$parsenumeric_type","peg$parsedatetime_type","peg$parseKW_BYTES","peg$parseKW_BOOL","peg$parseKW_GEOGRAPHY","peg$parsebool_byte_geography_type","numberStr","previousMaxSafe","Number","MAX_SAFE_INTEGER","po","queryTableAlias","newColumnsList","Set","split","global","NodeSQLParser","util","Function","BASE","MAX_INT","MAX_INT_ARR","smallToArray","supportsNativeBigInt","Integer","v","radix","alphabet","caseSensitive","parseBase","parseValue","BigInteger","isSmall","SmallInteger","NativeBigInt","isPrecise","Math","floor","arrayToSmall","arr","compareAbs","createArray","x","ceil","b","sum","l_a","l_b","carry","base","addAny","addSmall","subtract","difference","a_l","b_l","borrow","subtractSmall","multiplyLong","product","a_i","multiplySmall","shiftLeft","concat","multiplySmallAndArray","square","divModSmall","lambda","q","remainder","divisor","quotient","divModAny","self","negate","abs","comparison","quotientDigit","divisorMostSignificantDigit","divMod1","guess","xlen","highx","highy","part","reverse","divMod2","qSign","mod","mSign","isBasicPrime","isUnit","equals","isEven","isDivisibleBy","lesser","millerRabinTest","nPrev","prev","divide","next","bigInt","modPow","plus","subtractAny","minus","small","multiply","l1","l2","multiplyKaratsuba","y","max","ac","bd","abcd","times","_multiplyBySmall","divmod","pow","_0","_1","_2","isNegative","isZero","modInv","isPositive","isOdd","compare","Infinity","compareTo","eq","notEquals","neq","greater","gt","lt","greaterOrEquals","geq","lesserOrEquals","leq","isPrime","strict","bits","bitLength","logN","log","toJSNumber","isProbablePrime","iterations","rng","randBetween","lastT","lastR","zero","newT","one","newR","powersOfTwo","powers2Length","highestPower2","shift_isSmall","bitwise","fn","xSign","ySign","xRem","not","yRem","xDigit","yDigit","xDivMod","yDivMod","shiftRight","remQuo","and","xor","roughLOB","min","gcd","integerLogarithm","tmp","absBase","alphabetValues","digits","parseBaseFromArray","toBase","apply","valueOf","neg","out","digit","toBaseString","parseStringValue","decimalPlace","indexOf","parseNumberValue","toArray","toJSON","minusOne","lcm","isInstance","usedRNG","random","low","range","restricted","fromArray","webpackPolyfill","deprecate","paths","children"],"mappings":"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","file":"bigquery.umd.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse {\n\t\tvar a = factory();\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 20);\n","import { columnRefToSQL, columnOrderToSQL } from './column'\n\n// const escapeMap = {\n//   '\\0'   : '\\\\0',\n//   '\\''   : '\\\\\\'',\n//   '\"'    : '\\\\\"',\n//   '\\b'   : '\\\\b',\n//   '\\n'   : '\\\\n',\n//   '\\r'   : '\\\\r',\n//   '\\t'   : '\\\\t',\n//   '\\x1a' : '\\\\Z',\n//   // '\\\\'   : '\\\\\\\\',\n// }\n\nconst DEFAULT_OPT = {\n  database : PARSER_NAME || 'mysql',\n  type     : 'table',\n}\n\nlet parserOpt = DEFAULT_OPT\n\nfunction commonOptionConnector(keyword, action, opt) {\n  if (!opt) return\n  if (!keyword) return action(opt)\n  return `${keyword.toUpperCase()} ${action(opt)}`\n}\n\nfunction connector(keyword, str) {\n  if (!str) return\n  return `${keyword.toUpperCase()} ${str}`\n}\n\n/**\n * @param {(Array|boolean|string|number|null)} value\n * @return {Object}\n */\nfunction createValueExpr(value) {\n  const type = typeof value\n  if (Array.isArray(value)) return { type: 'expr_list', value: value.map(createValueExpr) }\n  if (value === null) return { type: 'null', value: null }\n  switch (type) {\n    case 'boolean':\n      return { type: 'bool', value }\n    case 'string':\n      return { type: 'string', value }\n    case 'number':\n      return { type: 'number', value }\n    default:\n      throw new Error(`Cannot convert value \"${type}\" to SQL`)\n  }\n}\n\n/**\n * @param operator\n * @param left\n * @param right\n * @return {Object}\n */\nfunction createBinaryExpr(operator, left, right) {\n  const expr = { operator, type: 'binary_expr' }\n  expr.left = left.type ? left : createValueExpr(left)\n  if (operator === 'BETWEEN' || operator === 'NOT BETWEEN') {\n    expr.right = {\n      type  : 'expr_list',\n      value : [createValueExpr(right[0]), createValueExpr(right[1])],\n    }\n    return expr\n  }\n  expr.right = right.type ? right : createValueExpr(right)\n  return expr\n}\n\n/**\n * Replace param expressions\n *\n * @param {Object} ast    - AST object\n * @param {Object} keys   - Keys = parameter names, values = parameter values\n * @return {Object}     - Newly created AST object\n */\nfunction replaceParamsInner(ast, keys) {\n  Object.keys(ast)\n    .filter(key => {\n      const value = ast[key]\n      return Array.isArray(value) || (typeof value === 'object' && value !== null)\n    })\n    .forEach(key => {\n      const expr = ast[key]\n      if (!(typeof expr === 'object' && expr.type === 'param')) return replaceParamsInner(expr, keys)\n      if (typeof keys[expr.value] === 'undefined') throw new Error(`no value for parameter :${expr.value} found`)\n      ast[key] = createValueExpr(keys[expr.value])\n      return null\n    })\n\n  return ast\n}\n\nfunction escape(str) {\n  return str\n  // const res = []\n  // for (let i = 0, len = str.length; i < len; ++i) {\n  //   let char = str[i]\n  //   const escaped = escapeMap[char]\n  //   if (escaped) char = escaped\n  //   res.push(char)\n  // }\n  // return res.join('')\n}\n\nfunction getParserOpt() {\n  return parserOpt\n}\n\nfunction setParserOpt(opt) {\n  parserOpt = opt\n}\n\nfunction topToSQL(opt) {\n  if (!opt) return\n  const { value, percent } = opt\n  const prefix = `TOP ${value}`\n  if (!percent) return prefix\n  return `${prefix} ${percent.toUpperCase()}`\n}\n\nfunction columnIdentifierToSql(ident) {\n  const { database } = getParserOpt()\n  if (!ident) return\n  switch (database && database.toLowerCase()) {\n    case 'postgresql':\n    case 'db2':\n      return `\"${ident}\"`\n    case 'transactsql':\n      return `[${ident}]`\n    case 'mysql':\n    case 'mariadb':\n    case 'bigquery':\n    default:\n      return `\\`${ident}\\``\n  }\n}\n\nfunction identifierToSql(ident, isDual) {\n  const { database } = getParserOpt()\n  if (isDual === true) return `'${ident}'`\n  if (!ident) return\n  switch (database && database.toLowerCase()) {\n    case 'mysql':\n    case 'mariadb':\n    case 'sqlite':\n      return `\\`${ident}\\``\n    case 'postgresql':\n      return `\"${ident}\"`\n    case 'transactsql':\n      return `[${ident}]`\n    case 'bigquery':\n    case 'db2':\n      return ident\n    default:\n      return `\\`${ident}\\``\n  }\n}\n\nfunction commonTypeValue(opt) {\n  const result = []\n  if (!opt) return result\n  const { type, symbol, value } = opt\n  result.push(type.toUpperCase())\n  if (symbol) result.push(symbol)\n  result.push(value.toUpperCase())\n  return result\n}\n\nfunction toUpper(val) {\n  if (!val) return\n  return val.toUpperCase()\n}\n\nfunction hasVal(val) {\n  return val\n}\n\nfunction literalToSQL(literal) {\n  if (!literal) return\n  const { type, parentheses, value } = literal\n  let str = value\n  switch (type) {\n    case 'string':\n      str = `'${escape(value)}'`\n      break\n    case 'regex_string':\n      str = `r\"${escape(value)}\"`\n      break\n    case 'hex_string':\n      str = `X'${escape(value)}'`\n      break\n    case 'double_quote_string':\n      str = `\"${escape(value)}\"`\n      break\n    case 'single_quote_string':\n      str = `'${value}'`\n      break\n    case 'boolean':\n    case 'bool':\n      str = value ? 'TRUE' : 'FALSE'\n      break\n    case 'null':\n      str = 'NULL'\n      break\n    case 'star':\n      str = '*'\n      break\n    case 'param':\n      str = `:${value}`\n      break\n    case 'origin':\n      str = value.toUpperCase()\n      break\n    case 'date':\n    case 'datetime':\n    case 'time':\n    case 'timestamp':\n      str = `${type.toUpperCase()} '${value}'`\n      break\n    default:\n      break\n  }\n  const { prefix, suffix } = literal\n  const result = []\n  if (prefix) result.push(toUpper(prefix))\n  result.push(str)\n  if (suffix && suffix.collate) result.push(commonTypeValue(suffix.collate).join(' '))\n  str = result.join(' ')\n  return parentheses ? `(${str})` : str\n}\n\nfunction replaceParams(ast, params) {\n  return replaceParamsInner(JSON.parse(JSON.stringify(ast)), params)\n}\n\nfunction onPartitionsToSQL(expr) {\n  const { type, partitions } = expr\n  const result = [\n    toUpper(type),\n    `(${partitions.map(partition => {\n      const { type: partitionType } = partition\n      if (!(partitionType === 'range')) return literalToSQL(partition)\n      const { start, end, symbol } = partition\n      return `${literalToSQL(start)} ${toUpper(symbol)} ${literalToSQL(end)}`\n    }).join(', ')})`,\n  ]\n  return result.join(' ')\n}\n\nfunction arrayStructTypeToSQL(expr) {\n  if (!expr) return\n  const { dataType, definition, anglebracket } = expr\n  const dataTypeUpper = toUpper(dataType)\n  const isNotArrayOrStruct = dataTypeUpper !== 'ARRAY' && dataTypeUpper !== 'STRUCT'\n  if (isNotArrayOrStruct) return dataTypeUpper\n  const result = definition && definition.map(field => {\n    const {\n      field_name: fieldName, field_type: fieldType,\n    } = field\n    const fieldResult = [fieldName, arrayStructTypeToSQL(fieldType)]\n    return fieldResult.filter(hasVal).join(' ')\n  }).join(', ')\n  return anglebracket ? `${dataTypeUpper}<${result}>` : `${dataTypeUpper} ${result}`\n}\n\nfunction commentToSQL(comment) {\n  if (!comment) return\n  const result = []\n  const { keyword, symbol, value } = comment\n  result.push(keyword.toUpperCase())\n  if (symbol) result.push(symbol)\n  result.push(literalToSQL(value))\n  return result.join(' ')\n}\n\nfunction triggerEventToSQL(events) {\n  return events.map(event => {\n    const { keyword: kw, args } = event\n    const result = [toUpper(kw)]\n    if (args) {\n      const { keyword: kwArgs, columns } = args\n      result.push(toUpper(kwArgs), columns.map(columnRefToSQL).join(', '))\n    }\n    return result.join(' ')\n  }).join(' OR ')\n}\n\nfunction returningToSQL(returning) {\n  if (!returning) return ''\n  const { columns } = returning\n  return ['RETURNING', columns.map(columnRefToSQL).filter(hasVal).join(', ')].join(' ')\n}\n\nfunction commonKeywordArgsToSQL(kwArgs) {\n  if (!kwArgs) return []\n  return [toUpper(kwArgs.keyword), toUpper(kwArgs.args)]\n}\n\nfunction autoIncreatementToSQL(autoIncreatement) {\n  if (!autoIncreatement || typeof autoIncreatement === 'string') return toUpper(autoIncreatement)\n  const { keyword, seed, increment, parentheses } = autoIncreatement\n  let result = toUpper(keyword)\n  if (parentheses) result += `(${literalToSQL(seed)}, ${literalToSQL(increment)})`\n  return result\n}\n\nfunction columnOrderListToSQL(columnOrderList) {\n  if (!columnOrderList) return\n  return columnOrderList.map(columnOrderToSQL).filter(hasVal).join(', ')\n}\n\nexport {\n  arrayStructTypeToSQL, autoIncreatementToSQL,\n  columnOrderListToSQL, commonKeywordArgsToSQL, commonOptionConnector,\n  connector, commonTypeValue,commentToSQL, createBinaryExpr,\n  createValueExpr, DEFAULT_OPT, escape, literalToSQL, columnIdentifierToSql,\n  identifierToSql, onPartitionsToSQL, replaceParams, returningToSQL,\n  hasVal, setParserOpt, toUpper, topToSQL, triggerEventToSQL,\n}\n","import { columnsToSQL } from './column'\nimport { exprToSQL } from './expr'\nimport { arrayStructTypeToSQL, hasVal, toUpper } from './util'\n\nfunction arrayExprListToSQL(expr) {\n  const {\n    array_path: arrayPath,\n    brackets,\n    expr_list: exprList,\n    parentheses,\n  } = expr\n  if (!exprList) return `[${columnsToSQL(arrayPath)}]`\n  if (Array.isArray(exprList)) return `[${exprList.map(col => `(${columnsToSQL(col)})`).filter(hasVal).join(', ')}]`\n  const result = exprToSQL(exprList)\n  if (brackets) return `[${result}]`\n  return parentheses ? `(${result})` : result\n}\n\nfunction arrayStructValueToSQL(expr) {\n  const {\n    expr_list: exprList,\n    type,\n  } = expr\n  switch (toUpper(type)) {\n    case 'STRUCT':\n      return `(${columnsToSQL(exprList)})`\n    case 'ARRAY':\n      return arrayExprListToSQL(expr)\n    default:\n      return ''\n  }\n}\n\nfunction arrayStructExprToSQL(expr) {\n  const { definition, keyword } = expr\n  const result = [toUpper(keyword)]\n  if (definition && typeof definition === 'object') {\n    result.length = 0\n    result.push(arrayStructTypeToSQL(definition))\n  }\n  result.push(arrayStructValueToSQL(expr))\n  return result.filter(hasVal).join('')\n}\n\nexport {\n  arrayStructExprToSQL,\n  arrayStructValueToSQL,\n}\n","import { literalToSQL, toUpper, connector } from './util'\nimport { alterExprToSQL } from './alter'\nimport { aggrToSQL } from './aggregation'\nimport { assignToSQL } from './assign'\nimport { binaryToSQL } from './binary'\nimport { caseToSQL } from './case'\nimport { columnRefToSQL } from './column'\nimport { castToSQL, extractFunToSQL, funcToSQL } from './func'\nimport { intervalToSQL } from './interval'\nimport { selectToSQL } from './select'\nimport { showToSQL } from './show'\nimport { arrayStructExprToSQL } from './array-struct'\nimport { unionToSQL } from './union'\nimport { namedWindowExprListToSQL, windowFuncToSQL } from './window'\n\nconst exprToSQLConvertFn = {\n  alter       : alterExprToSQL,\n  aggr_func   : aggrToSQL,\n  window_func : windowFuncToSQL,\n  'array'     : arrayStructExprToSQL,\n  assign      : assignToSQL,\n  binary_expr : binaryToSQL,\n  case        : caseToSQL,\n  cast        : castToSQL,\n  column_ref  : columnRefToSQL,\n  extract     : extractFunToSQL,\n  function    : funcToSQL,\n  interval    : intervalToSQL,\n  show        : showToSQL,\n  struct      : arrayStructExprToSQL,\n  'window'    : namedWindowExprListToSQL,\n}\n\nfunction varToSQL(expr) {\n  const { prefix = '@', name, members, keyword } = expr\n  const val = []\n  if (keyword) val.push(keyword)\n  const varName = members && members.length > 0 ? `${name}.${members.join('.')}` : name\n  val.push(`${prefix || ''}${varName}`)\n  return val.join(' ')\n}\n\nexprToSQLConvertFn.var = varToSQL\n\nfunction exprToSQL(exprOrigin) {\n  if (!exprOrigin) return\n  const expr = exprOrigin\n  if (exprOrigin.ast) {\n    const { ast } = expr\n    Reflect.deleteProperty(expr, ast)\n    for (const key of Object.keys(ast)) {\n      expr[key] = ast[key]\n    }\n  }\n  return exprToSQLConvertFn[expr.type] ? exprToSQLConvertFn[expr.type](expr) : literalToSQL(expr)\n}\n\nfunction unaryToSQL(unarExpr) {\n  const { operator, parentheses, expr } = unarExpr\n  const space = (operator === '-' || operator === '+') ? '' : ' '\n  const str = `${operator}${space}${exprToSQL(expr)}`\n  return parentheses ? `(${str})` : str\n}\n\nfunction getExprListSQL(exprList) {\n  if (!exprList) return []\n  return exprList.map(exprToSQL)\n}\n\nexprToSQLConvertFn.expr_list = expr => {\n  const str = getExprListSQL(expr.value)\n  return expr.parentheses ? `(${str.join(', ')})` : str\n}\n\nexprToSQLConvertFn.select = expr => {\n  const str = typeof expr._next === 'object' ? unionToSQL(expr) : selectToSQL(expr)\n  return expr.parentheses ? `(${str})` : str\n}\n\nexprToSQLConvertFn.unary_expr = unaryToSQL\n\nfunction orderOrPartitionByToSQL(expr, prefix) {\n  if (!Array.isArray(expr)) return ''\n  let expressions = []\n  const upperPrefix = toUpper(prefix)\n  switch (upperPrefix) {\n    case 'ORDER BY':\n      expressions = expr.map(info => `${exprToSQL(info.expr)} ${info.type}`)\n      break\n    case 'PARTITION BY':\n      expressions = expr.map(info => `${columnRefToSQL(info.expr)}`)\n      break\n    default:\n      expressions = expr.map(info => `${columnRefToSQL(info.expr)}`)\n      break\n  }\n  return connector(upperPrefix, expressions.join(', '))\n}\n\nexport {\n  exprToSQLConvertFn,\n  exprToSQL,\n  getExprListSQL,\n  varToSQL,\n  orderOrPartitionByToSQL,\n}\n","import { exprToSQL, orderOrPartitionByToSQL } from './expr'\nimport { hasVal } from './util'\nimport { overToSQL } from './over'\n\nfunction aggrToSQL(expr) {\n  /** @type {Object} */\n  const { args, over, orderby, within_group_orderby } = expr\n  let str = exprToSQL(args.expr)\n  const fnName = expr.name\n  const overStr = overToSQL(over)\n  if (args.distinct) {\n    const separator = args.expr.parentheses ? '' : ' '\n    str = ['DISTINCT', str].join(separator)\n  }\n  if (args.orderby) str = `${str} ${orderOrPartitionByToSQL(args.orderby, 'order by')}`\n  if (orderby) str = `${str} ${orderOrPartitionByToSQL(orderby, 'order by')}`\n  const withinGroup = within_group_orderby ? `WITHIN GROUP (${orderOrPartitionByToSQL(within_group_orderby, 'order by')})` : ''\n  return [`${fnName}(${str})`, withinGroup, overStr].filter(hasVal).join(' ')\n}\n\nexport {\n  aggrToSQL,\n}\n","import { exprToSQL } from './expr'\n\nfunction assignToSQL(expr) {\n  /** @type {Object} */\n  const { left, right, symbol, keyword } = expr\n  left.keyword = keyword\n  const leftVar = exprToSQL(left)\n  const rightVal = exprToSQL(right)\n  return `${leftVar} ${symbol} ${rightVal}`\n}\n\nexport {\n  assignToSQL,\n}\n","import { exprToSQL } from './expr'\n\nfunction binaryToSQL(expr) {\n  let { operator } = expr\n  let rstr = exprToSQL(expr.right)\n  let isBetween = false\n  if (Array.isArray(rstr)) {\n    switch (operator) {\n      case '=':\n        operator = 'IN'\n        break\n      case '!=':\n        operator = 'NOT IN'\n        break\n      case 'BETWEEN':\n      case 'NOT BETWEEN':\n        isBetween = true\n        rstr = `${rstr[0]} AND ${rstr[1]}`\n        break\n      default:\n        break\n    }\n    if (!isBetween) rstr = `(${rstr.join(', ')})`\n  }\n  const str = [exprToSQL(expr.left), operator, rstr].join(' ')\n  return expr.parentheses ? `(${str})` : str\n}\n\nexport {\n  binaryToSQL,\n}\n","import { exprToSQL } from './expr'\n\nfunction caseToSQL(expr) {\n  const res = ['CASE']\n  const conditions = expr.args\n\n  if (expr.expr) res.push(exprToSQL(expr.expr))\n\n  for (let i = 0, len = conditions.length; i < len; ++i) {\n    res.push(conditions[i].type.toUpperCase())\n    if (conditions[i].cond) {\n      res.push(exprToSQL(conditions[i].cond))\n      res.push('THEN')\n    }\n    res.push(exprToSQL(conditions[i].result))\n  }\n\n  res.push('END')\n\n  return res.join(' ')\n}\n\nexport {\n  caseToSQL,\n}\n","import { toUpper, hasVal } from './util'\nimport { exprToSQL } from './expr'\n\nfunction intervalToSQL(intervalExpr) {\n  const { expr, unit } = intervalExpr\n  const result = ['INTERVAL', exprToSQL(expr), toUpper(unit)]\n  return result.filter(hasVal).join(' ')\n}\n\nexport {\n  intervalToSQL,\n}\n","import { exprToSQL } from './expr'\nimport { valuesToSQL } from './insert'\nimport { identifierToSql, hasVal, commonOptionConnector, toUpper } from './util'\n\nfunction tableToSQL(tableInfo) {\n  const { table, db, as, expr, schema } = tableInfo\n  const database = identifierToSql(db)\n  const schemaStr = identifierToSql(schema)\n  let tableName = table && identifierToSql(table)\n  if (expr && expr.type === 'values') tableName = `(${commonOptionConnector('VALUES', valuesToSQL, expr.values)})`\n  if (expr && expr.type !== 'values') tableName = exprToSQL(expr)\n  const str = [database, schemaStr, tableName].filter(hasVal).join('.')\n  if (as) return `${str} AS ${identifierToSql(as)}`\n  return str\n}\n\nfunction unnestToSQL(unnestExpr) {\n  const { type, as, expr, with_offset: withOffset } = unnestExpr\n  const result = [toUpper(type), `(${expr && exprToSQL(expr) || ' '})`, commonOptionConnector('AS', identifierToSql, as), commonOptionConnector(toUpper(withOffset && withOffset.keyword), identifierToSql, withOffset && withOffset.as)]\n  return result.filter(hasVal).join(' ')\n}\n\n/**\n * @param {Array} tables\n * @return {string}\n */\nfunction tablesToSQL(tables) {\n  const { type } = tables\n  if (toUpper(type) === 'UNNEST') return unnestToSQL(tables)\n  const baseTable = tables[0]\n  const clauses = []\n  if (baseTable.type === 'dual') return 'DUAL'\n  clauses.push(tableToSQL(baseTable))\n  for (let i = 1; i < tables.length; ++i) {\n    const joinExpr = tables[i]\n    const { on, using, join } = joinExpr\n    const str = []\n    str.push(join ? ` ${join}` : ',')\n    str.push(tableToSQL(joinExpr))\n    str.push(commonOptionConnector('ON', exprToSQL, on))\n    if (using) str.push(`USING (${using.map(identifierToSql).join(', ')})`)\n    clauses.push(str.filter(hasVal).join(' '))\n  }\n  return clauses.filter(hasVal).join('')\n}\n\nfunction tableOptionToSQL(tableOption) {\n  const { keyword, symbol, value } = tableOption\n  const sql = [keyword.toUpperCase()]\n  if (symbol) sql.push(symbol)\n  sql.push(value)\n  return sql.join(' ')\n}\n\nexport {\n  tablesToSQL,\n  tableOptionToSQL,\n  tableToSQL,\n  unnestToSQL,\n}\n","import { constraintDefinitionToSQL } from './constrain'\nimport { exprToSQL } from './expr'\nimport { castToSQL } from './func'\nimport { tablesToSQL } from './tables'\nimport {\n  autoIncreatementToSQL,\n  columnIdentifierToSql,\n  commonOptionConnector,\n  commonTypeValue,\n  commentToSQL,\n  hasVal,\n  identifierToSql,\n  literalToSQL,\n  toUpper,\n} from './util'\n\nfunction columnOffsetToSQL(column, isDual) {\n  if (typeof column === 'string') return identifierToSql(column, isDual)\n  const { expr, offset, suffix } = column\n  return [exprToSQL(expr), offset, suffix].filter(hasVal).join('')\n}\nfunction columnRefToSQL(expr) {\n  const {\n    arrow, as, collate, column, isDual, schema, table, parentheses, property,\n    suffix,\n  } = expr\n  let str = column === '*' ? '*' : columnOffsetToSQL(column, isDual)\n  if (table) str = `${identifierToSql(table)}.${str}`\n  if (schema) str = `${identifierToSql(schema)}.${str}`\n  const result = [\n    str,\n    commonOptionConnector('AS', exprToSQL, as),\n    commonOptionConnector(arrow, literalToSQL, property),\n  ]\n  if (collate) result.push(commonTypeValue(collate).join(' '))\n  result.push(toUpper(suffix))\n  const sql = result.filter(hasVal).join(' ')\n  return parentheses ? `(${sql})` : sql\n}\n\nfunction columnDataType(definition) {\n  const { dataType, length, suffix, scale, expr } = definition || {}\n  let result = dataType\n  if (length != null) result += `(${[length, scale].filter(val => val != null).join(', ')})`\n  if (suffix && suffix.length) result += ` ${suffix.join(' ')}`\n  if (expr) result += exprToSQL(expr)\n  return result\n}\n\nfunction columnReferenceDefinitionToSQL(referenceDefinition) {\n  const reference = []\n  if (!referenceDefinition) return reference\n  const {\n    definition,\n    keyword,\n    match,\n    table,\n    on_delete: onDelete,\n    on_update: onUpdate,\n  } = referenceDefinition\n  reference.push(keyword.toUpperCase())\n  reference.push(tablesToSQL(table))\n  reference.push(`(${definition.map(identifierToSql).join(', ')})`)\n  reference.push(toUpper(match))\n  reference.push(...commonTypeValue(onDelete))\n  reference.push(...commonTypeValue(onUpdate))\n  return reference.filter(hasVal)\n}\n\nfunction columnOption(definition) {\n  const columnOpt = []\n  const {\n    nullable, character_set: characterSet, check, comment, collate, storage,\n    default_val: defaultOpt,\n    auto_increment: autoIncrement,\n    unique_or_primary: uniquePrimary,\n    column_format: columnFormat,\n    reference_definition: referenceDefinition,\n  } = definition\n\n  columnOpt.push(toUpper(nullable && nullable.value))\n  if (defaultOpt) {\n    const { type, value } = defaultOpt\n    columnOpt.push(type.toUpperCase(), exprToSQL(value))\n  }\n  columnOpt.push(constraintDefinitionToSQL(check))\n  columnOpt.push(autoIncreatementToSQL(autoIncrement), toUpper(uniquePrimary), commentToSQL(comment))\n  columnOpt.push(...commonTypeValue(characterSet))\n  columnOpt.push(...commonTypeValue(collate))\n  columnOpt.push(...commonTypeValue(columnFormat))\n  columnOpt.push(...commonTypeValue(storage))\n  columnOpt.push(...columnReferenceDefinitionToSQL(referenceDefinition))\n  return columnOpt.filter(hasVal).join(' ')\n}\n\nfunction columnOrderToSQL(columnOrder) {\n  const { column, collate, nulls, opclass, order } = columnOrder\n  const result = [\n    exprToSQL(column),\n    commonOptionConnector(collate && collate.type, identifierToSql, collate && collate.value),\n    opclass,\n    toUpper(order),\n    toUpper(nulls),\n  ]\n  return result.filter(hasVal).join(' ')\n}\n\nfunction columnDefinitionToSQL(columnDefinition) {\n  const column = []\n  const name = columnRefToSQL(columnDefinition.column)\n  const dataType = columnDataType(columnDefinition.definition)\n  column.push(name)\n  column.push(dataType)\n  const columnOpt = columnOption(columnDefinition)\n  column.push(columnOpt)\n  return column.filter(hasVal).join(' ')\n}\n\nfunction columnToSQL(column, isDual) {\n  const { expr, type } = column\n  if (type === 'cast') return castToSQL(column)\n  if (isDual) expr.isDual = isDual\n  let str = exprToSQL(expr)\n  if (expr.parentheses && Reflect.has(expr, 'array_index')) str = `(${str})`\n  if (expr.array_index) str = `${str}[${expr.array_index.number}]`\n  if (column.as !== null) {\n    str = `${str} AS `\n    if (/^(`?)[a-z_][0-9a-z_]*(`?)$/i.test(column.as)) str = `${str}${identifierToSql(column.as)}`\n    else str = `${str}${columnIdentifierToSql(column.as)}`\n  }\n  return str\n}\n\nfunction getDual(tables) {\n  const baseTable = Array.isArray(tables) && tables[0]\n  if (baseTable && baseTable.type === 'dual') return true\n  return false\n}\n/**\n * Stringify column expressions\n *\n * @param {Array} columns\n * @return {string}\n */\nfunction columnsToSQL(columns, tables) {\n  if (!columns || columns === '*') return columns\n  const isDual = getDual(tables)\n  const result = []\n  const { expr_list: exprList, star, type } = columns\n  result.push(star, toUpper(type))\n  const exprListArr = exprList || columns\n  const columnsStr = exprListArr.map(col => columnToSQL(col, isDual)).join(', ')\n  result.push([type && '(', columnsStr, type && ')'].filter(hasVal).join(''))\n  return result.filter(hasVal).join(' ')\n}\n\nexport {\n  columnDefinitionToSQL,\n  columnRefToSQL,\n  columnsToSQL,\n  columnDataType,\n  columnOrderToSQL,\n  columnReferenceDefinitionToSQL,\n}\n","import { connector, toUpper, hasVal } from './util'\nimport { exprToSQL } from './expr'\n\nfunction composePrefixValSuffix(stmt) {\n  if (!stmt) return []\n  return [toUpper(stmt.prefix), exprToSQL(stmt.value), toUpper(stmt.suffix)]\n}\n\nfunction fetchOffsetToSQL(stmt) {\n  const { fetch, offset } = stmt\n  const result = [...composePrefixValSuffix(offset), ...composePrefixValSuffix(fetch)]\n  return result.filter(hasVal).join(' ')\n}\n\nfunction limitOffsetToSQL(limit) {\n  const { seperator, value } = limit\n  return connector('LIMIT', value.map(exprToSQL).join(`${seperator === 'offset' ? ' ' : ''}${toUpper(seperator)} `))\n}\n\nfunction limitToSQL(limit) {\n  if (!limit) return ''\n  if (limit.fetch) return fetchOffsetToSQL(limit)\n  return limitOffsetToSQL(limit)\n}\n\nexport {\n  limitToSQL,\n}\n","import { columnDefinitionToSQL, columnRefToSQL } from './column'\nimport { createDefinitionToSQL } from './create'\nimport { indexTypeAndOptionToSQL } from './index-definition'\nimport { tablesToSQL } from './tables'\nimport { exprToSQL } from './expr'\nimport { hasVal, toUpper, identifierToSql } from './util'\n\nfunction alterToSQL(stmt) {\n  const { type, table, expr = [] } = stmt\n  const action = toUpper(type)\n  const tableName = tablesToSQL(table)\n  const exprList = expr.map(exprToSQL)\n  const result = [action, 'TABLE', tableName, exprList.join(', ')]\n  return result.filter(hasVal).join(' ')\n}\n\nfunction alterExprToSQL(expr) {\n  if (!expr) return ''\n  const {\n    action,\n    create_definitions: createDefinition,\n    first_after: firstAfter,\n    if_not_exists: ifNotExists,keyword,\n    old_column: oldColumn,\n    prefix,\n    resource,\n    symbol,\n  } = expr\n  let name = ''\n  let dataType = []\n  switch (resource) {\n    case 'column':\n      dataType = [columnDefinitionToSQL(expr)]\n      break\n    case 'index':\n      dataType = indexTypeAndOptionToSQL(expr)\n      name = expr[resource]\n      break\n    case 'table':\n      name = identifierToSql(expr[resource])\n      break\n    case 'algorithm':\n    case 'lock':\n      name = [symbol, toUpper(expr[resource])].filter(hasVal).join(' ')\n      break\n    case 'constraint':\n      name = identifierToSql(expr[resource])\n      dataType = [createDefinitionToSQL(createDefinition)]\n      break\n    case 'key':\n      name = identifierToSql(expr[resource])\n      break\n    default:\n      break\n  }\n  const alterArray = [\n    toUpper(action),\n    toUpper(keyword),\n    toUpper(ifNotExists),\n    oldColumn && columnRefToSQL(oldColumn),\n    toUpper(prefix),\n    name,\n    dataType.filter(hasVal).join(' '),\n    firstAfter && `${toUpper(firstAfter.keyword)} ${columnRefToSQL(firstAfter.column)}`,\n  ]\n  return alterArray.filter(hasVal).join(' ')\n}\n\nexport {\n  alterToSQL,\n  alterExprToSQL,\n}\n","import {\n  literalToSQL,\n  identifierToSql,\n  toUpper,\n  hasVal,\n  commentToSQL,\n  onPartitionsToSQL,\n} from './util'\nimport { exprToSQL } from './expr'\n\nfunction indexTypeToSQL(indexType) {\n  if (!indexType) return []\n  const { keyword, type } = indexType\n  return [keyword.toUpperCase(), type.toUpperCase()]\n}\n\nfunction indexOptionToSQL(indexOpt) {\n  if (!indexOpt) return\n  const { type, expr, symbol } = indexOpt\n  const upperType = type.toUpperCase()\n  const indexOptArray = []\n  indexOptArray.push(upperType)\n  switch (upperType) {\n    case 'KEY_BLOCK_SIZE':\n      if (symbol) indexOptArray.push(symbol)\n      indexOptArray.push(literalToSQL(expr))\n      break\n    case 'BTREE':\n    case 'HASH':\n      indexOptArray.length = 0\n      indexOptArray.push(...indexTypeToSQL(indexOpt))\n      break\n    case 'WITH PARSER':\n      indexOptArray.push(expr)\n      break\n    case 'VISIBLE':\n    case 'INVISIBLE':\n      break\n    case 'COMMENT':\n      indexOptArray.shift()\n      indexOptArray.push(commentToSQL(indexOpt))\n      break\n    case 'DATA_COMPRESSION':\n      indexOptArray.push(symbol, toUpper(expr.value), onPartitionsToSQL(expr.on))\n      break\n    default:\n      indexOptArray.push(symbol, literalToSQL(expr))\n      break\n  }\n  return indexOptArray.filter(hasVal).join(' ')\n}\n\nfunction indexOptionListToSQL(indexOptList) {\n  if (!indexOptList) return []\n  return indexOptList.map(indexOptionToSQL)\n}\n\nfunction indexTypeAndOptionToSQL(indexDefinition) {\n  const {\n    constraint_type: constraintType,\n    index_type: indexType,\n    index_options: indexOptions = [],\n    definition,\n  } = indexDefinition\n  const dataType = []\n  dataType.push(...indexTypeToSQL(indexType))\n  if (definition && definition.length) {\n    const definitionSQL = toUpper(constraintType) === 'CHECK' ? `(${exprToSQL(definition[0])})` : `(${definition.map(col => identifierToSql(col)).join(', ')})`\n    dataType.push(definitionSQL)\n  }\n  dataType.push(indexOptionListToSQL(indexOptions).join(' '))\n  return dataType\n}\n\nfunction indexDefinitionToSQL(indexDefinition) {\n  const indexSQL = []\n  const {\n    keyword,\n    index,\n  } = indexDefinition\n  indexSQL.push(toUpper(keyword))\n  indexSQL.push(index)\n  indexSQL.push(...indexTypeAndOptionToSQL(indexDefinition))\n  return indexSQL.filter(hasVal).join(' ')\n}\n\nexport {\n  indexDefinitionToSQL,\n  indexTypeToSQL,\n  indexOptionToSQL,\n  indexOptionListToSQL,\n  indexTypeAndOptionToSQL,\n}\n","import { exprToSQL } from './expr'\nimport { commonTypeValue, hasVal, identifierToSql, toUpper } from './util'\nimport { overToSQL } from './over'\n\nfunction castToSQL(expr) {\n  const { collate, target, expr: expression, symbol, as: alias } = expr\n  const { length, dataType, parentheses, scale } = target\n  let str = ''\n  if (length != null) str = scale ? `${length}, ${scale}` : length\n  if (parentheses) str = `(${str})`\n  let prefix = exprToSQL(expression)\n  let symbolChar = '::'\n  let suffix = ''\n  if (symbol === 'as') {\n    prefix = `CAST(${prefix}`\n    suffix = ')'\n    symbolChar = ` ${symbol.toUpperCase()} `\n  }\n  if (alias) suffix += ` AS ${identifierToSql(alias)}`\n  if (collate) suffix += ` ${commonTypeValue(collate).join(' ')}`\n  return `${prefix}${symbolChar}${dataType}${str}${suffix}`\n}\n\nfunction extractFunToSQL(stmt) {\n  const { args, type } = stmt\n  const { field, cast_type: castType, source } = args\n  const result = [`${toUpper(type)}(${toUpper(field)}`, 'FROM', toUpper(castType), exprToSQL(source)]\n  return `${result.filter(hasVal).join(' ')})`\n}\n\nfunction funcToSQL(expr) {\n  const { args, name } = expr\n  const { parentheses, over, collate } = expr\n  const collateStr = commonTypeValue(collate).join(' ')\n  const overStr = overToSQL(over)\n  if (!args) return [name, overStr].filter(hasVal).join(' ')\n  const str = `${name}(${exprToSQL(args).join(', ')})`\n  return [parentheses ? `(${str})` : str, collateStr, overStr].filter(hasVal).join(' ')\n}\n\nexport {\n  castToSQL,\n  extractFunToSQL,\n  funcToSQL,\n}\n","import { alterExprToSQL } from './alter'\nimport { columnDataType, columnRefToSQL } from './column'\nimport { createDefinitionToSQL } from './create'\nimport { identifierToSql, hasVal, toUpper } from './util'\nimport { exprToSQL } from './expr'\nimport { tablesToSQL, tableToSQL } from './tables'\n\nfunction callToSQL(stmt) {\n  const type = 'CALL'\n  const storeProcessCall = exprToSQL(stmt.expr)\n  return `${type} ${storeProcessCall}`\n}\n\nfunction commonCmdToSQL(stmt) {\n  const { type, keyword, name } = stmt\n  const clauses = [toUpper(type), toUpper(keyword)]\n  switch (keyword) {\n    case 'table':\n      clauses.push(tablesToSQL(name))\n      break\n    case 'procedure':\n      clauses.push(identifierToSql(name))\n      break\n    case 'index':\n      clauses.push(\n        columnRefToSQL(name),\n        'ON',\n        tableToSQL(stmt.table),\n        stmt.options && stmt.options.map(alterExprToSQL).filter(hasVal).join(' ')\n      )\n      break\n    default:\n      break\n  }\n  return clauses.filter(hasVal).join(' ')\n}\n\nfunction descToSQL(stmt) {\n  const { type, table } = stmt\n  const action = toUpper(type)\n  return `${action} ${identifierToSql(table)}`\n}\n\nfunction renameToSQL(stmt) {\n  const { type, table } = stmt\n  const clauses = []\n  const prefix = `${type && type.toUpperCase()} TABLE`\n  if (table) {\n    for (const tables of table) {\n      const renameInfo = tables.map(tableToSQL)\n      clauses.push(renameInfo.join(' TO '))\n    }\n  }\n  return `${prefix} ${clauses.join(', ')}`\n}\n\nfunction useToSQL(stmt) {\n  const { type, db } = stmt\n  const action = toUpper(type)\n  const database = identifierToSql(db)\n  return `${action} ${database}`\n}\n\nfunction setVarToSQL(stmt) {\n  const { expr } = stmt\n  const action = 'SET'\n  const val = exprToSQL(expr)\n  return `${action} ${val}`\n}\n\nfunction pgLock(stmt) {\n  const { lock_mode: lockMode, nowait } = stmt\n  const lockInfo = []\n  if (lockMode) {\n    const { mode } = lockMode\n    lockInfo.push(mode.toUpperCase())\n  }\n  if (nowait) lockInfo.push(nowait.toUpperCase())\n  return lockInfo\n}\n\nfunction lockUnlockToSQL(stmt) {\n  const { type, keyword, tables } = stmt\n  const result = [type.toUpperCase(), toUpper(keyword)]\n  if (type.toUpperCase() === 'UNLOCK') return result.join(' ')\n  const tableStmt = []\n  for (const tableInfo of tables) {\n    const { table, lock_type: lockType } = tableInfo\n    const tableInfoTemp = [tableToSQL(table)]\n    if (lockType) {\n      const lockKeyList = ['prefix', 'type', 'suffix']\n      tableInfoTemp.push(lockKeyList.map(key => toUpper(lockType[key])).filter(hasVal).join(' '))\n    }\n    tableStmt.push(tableInfoTemp.join(' '))\n  }\n  result.push(tableStmt.join(', '), ...pgLock(stmt))\n  return result.filter(hasVal).join(' ')\n}\n\nfunction declareToSQL(stmt) {\n  const { type, declare } = stmt\n  const result = [toUpper(type)]\n  const info = declare.map(dec => {\n    const { at, name, as, prefix, definition, keyword } = dec\n    const declareInfo = [`${at}${name}`, toUpper(as)]\n    switch (keyword) {\n      case 'variable':\n        declareInfo.push(columnDataType(prefix))\n        if (definition) declareInfo.push('=', exprToSQL(definition))\n        break\n      case 'cursor':\n        declareInfo.push(toUpper(prefix))\n        break\n      case 'table':\n        declareInfo.push(toUpper(prefix), `(${definition.map(createDefinitionToSQL).join(', ')})`)\n        break\n      default:\n        break\n    }\n    return declareInfo.filter(hasVal).join(' ')\n  }).join(', ')\n  result.push(info)\n  return result.join(' ')\n}\n\nexport {\n  callToSQL,\n  commonCmdToSQL,\n  declareToSQL,\n  descToSQL,\n  renameToSQL,\n  useToSQL,\n  setVarToSQL,\n  lockUnlockToSQL,\n}\n","import { alterToSQL } from './alter'\nimport { createToSQL } from './create'\nimport { selectToSQL } from './select'\nimport { deleteToSQL } from './delete'\nimport { updateToSQL } from './update'\nimport { insertToSQL } from './insert'\nimport {\n  callToSQL,\n  commonCmdToSQL,\n  declareToSQL,\n  descToSQL,\n  useToSQL,\n  renameToSQL,\n  setVarToSQL,\n  lockUnlockToSQL,\n} from './command'\nimport { orderOrPartitionByToSQL } from './expr'\nimport { limitToSQL } from './limit'\nimport { showToSQL } from './show'\nimport { analyzeToSQL, attachToSQL } from './sqlite'\nimport { withToSQL } from './with'\nimport { hasVal } from './util'\n\nconst typeToSQLFn = {\n  alter    : alterToSQL,\n  analyze  : analyzeToSQL,\n  attach   : attachToSQL,\n  create   : createToSQL,\n  select   : selectToSQL,\n  delete   : deleteToSQL,\n  update   : updateToSQL,\n  insert   : insertToSQL,\n  drop     : commonCmdToSQL,\n  truncate : commonCmdToSQL,\n  replace  : insertToSQL,\n  declare  : declareToSQL,\n  use      : useToSQL,\n  rename   : renameToSQL,\n  call     : callToSQL,\n  desc     : descToSQL,\n  set      : setVarToSQL,\n  lock     : lockUnlockToSQL,\n  unlock   : lockUnlockToSQL,\n  show     : showToSQL,\n}\n\nfunction unionToSQL(stmt) {\n  const fun = typeToSQLFn[stmt.type]\n  const res = [fun(stmt)]\n  const { _orderby, _limit } = stmt\n  while (stmt._next) {\n    const unionKeyword = (stmt.union || 'union').toUpperCase()\n    res.push(unionKeyword, fun(stmt._next))\n    stmt = stmt._next\n  }\n  res.push(orderOrPartitionByToSQL(_orderby, 'order by'), limitToSQL(_limit))\n  return res.filter(hasVal).join(' ')\n}\n\nfunction bigQueryToSQL(stmt) {\n  const { with: withExpr, parentheses, select, orderby, limit } = stmt\n  const result = [withToSQL(withExpr), parentheses && '(', unionToSQL(select), parentheses && ')']\n  // process with, orderby and limit\n  result.push(orderOrPartitionByToSQL(orderby, 'order by'), limitToSQL(limit))\n  return result.filter(val => val).join(' ')\n}\n\nfunction multipleToSQL(stmt) {\n  const res = []\n  for (let i = 0, len = stmt.length; i < len; ++i) {\n    let astInfo = stmt[i] && stmt[i].ast\n    if (!astInfo) astInfo = stmt[i]\n    res.push(unionToSQL(astInfo))\n  }\n  return res.join(' ; ')\n}\n\nexport {\n  bigQueryToSQL,\n  unionToSQL,\n  multipleToSQL,\n}\n","import { exprToSQL } from './expr'\nimport { tableToSQL } from './tables'\nimport { hasVal, identifierToSql, toUpper } from './util'\n\nfunction analyzeToSQL(stmt) {\n  const { type, table } = stmt\n  const action = toUpper(type)\n  const tableName = tableToSQL(table)\n  return [action, tableName].join(' ')\n}\n\nfunction attachToSQL(stmt) {\n  const { type, database, expr, as, schema } = stmt\n  return [toUpper(type), toUpper(database), exprToSQL(expr), toUpper(as), identifierToSql(schema)].filter(hasVal).join(' ')\n}\n\nexport {\n  attachToSQL,\n  analyzeToSQL,\n}\n","import { columnsToSQL } from './column'\nimport { exprToSQL, orderOrPartitionByToSQL } from './expr'\nimport { limitToSQL } from './limit'\nimport { tablesToSQL } from './tables'\nimport { commonOptionConnector, hasVal } from './util'\n\nfunction deleteToSQL(stmt) {\n  const clauses = ['DELETE']\n  const { columns, from, table, where, orderby, limit } = stmt\n  const columnInfo = columnsToSQL(columns, from)\n  clauses.push(columnInfo)\n  if (Array.isArray(table)) {\n    if (!(table.length === 1 && table[0].addition === true)) clauses.push(tablesToSQL(table))\n  }\n  clauses.push(commonOptionConnector('FROM', tablesToSQL, from))\n  clauses.push(commonOptionConnector('WHERE', exprToSQL, where))\n  clauses.push(orderOrPartitionByToSQL(orderby, 'order by'))\n  clauses.push(limitToSQL(limit))\n  return clauses.filter(hasVal).join(' ')\n}\n\nexport {\n  deleteToSQL,\n}\n","import { hasVal, toUpper } from './util'\nimport { exprToSQL, orderOrPartitionByToSQL } from './expr'\nimport { asWindowSpecToSQL } from './window'\n\nfunction overToSQL(over) {\n  if (!over) return\n  const {\n    as_window_specification: asWindowSpec,\n    expr,\n    keyword,\n    orderby,\n    partitionby,\n    type,\n  } = over\n  if (toUpper(type) === 'WINDOW') {\n    const windowSQL = asWindowSpecToSQL(asWindowSpec)\n    return `OVER ${windowSQL}`\n  }\n  if (toUpper(type) === 'ON UPDATE') {\n    let onUpdate = `${toUpper(type)} ${toUpper(keyword)}`\n    const args = exprToSQL(expr)\n    if (args) onUpdate = `${onUpdate}(${args.join(', ')})`\n    return onUpdate\n  }\n  const partition = orderOrPartitionByToSQL(partitionby, 'partition by')\n  const order = orderOrPartitionByToSQL(orderby, 'order by')\n  return `OVER (${[partition, order].filter(hasVal).join(' ')})`\n}\n\nexport {\n  overToSQL,\n}\n","import { exprToSQL, getExprListSQL, orderOrPartitionByToSQL } from './expr'\nimport { columnsToSQL } from './column'\nimport { limitToSQL } from './limit'\nimport { withToSQL } from './with'\nimport { tablesToSQL } from './tables'\nimport { hasVal, commonOptionConnector, connector, topToSQL, toUpper } from './util'\n\n/**\n * @param {Object}      stmt\n * @param {?Array}      stmt.with\n * @param {?Array}      stmt.options\n * @param {?string}     stmt.distinct\n * @param {?Array|string}   stmt.columns\n * @param {?Array}      stmt.from\n * @param {?Object}     stmt.where\n * @param {?Array}      stmt.groupby\n * @param {?Object}     stmt.having\n * @param {?Array}      stmt.orderby\n * @param {?Array}      stmt.limit\n * @return {string}\n */\n\nfunction selectToSQL(stmt) {\n  const {\n    as_struct_val: asStructVal, columns, distinct, from, for_sys_time_as_of: forSystem = {}, for_update: forUpdate, groupby, having, limit, options, orderby, parentheses_symbol: parentheses, top, window: windowInfo, with: withInfo, where,\n  } = stmt\n  const clauses = [withToSQL(withInfo), 'SELECT', toUpper(asStructVal)]\n  clauses.push(topToSQL(top))\n  if (Array.isArray(options)) clauses.push(options.join(' '))\n  clauses.push(distinct, columnsToSQL(columns, from))\n  // FROM + joins\n  clauses.push(commonOptionConnector('FROM', tablesToSQL, from))\n  const { keyword, expr } = forSystem || {}\n  clauses.push(commonOptionConnector(keyword, exprToSQL, expr))\n  clauses.push(commonOptionConnector('WHERE', exprToSQL, where))\n  clauses.push(connector('GROUP BY', getExprListSQL(groupby).join(', ')))\n  clauses.push(commonOptionConnector('HAVING', exprToSQL, having))\n  clauses.push(commonOptionConnector('WINDOW', exprToSQL, windowInfo))\n  clauses.push(orderOrPartitionByToSQL(orderby, 'order by'))\n  clauses.push(limitToSQL(limit))\n  clauses.push(toUpper(forUpdate))\n  const sql = clauses.filter(hasVal).join(' ')\n  return parentheses ? `(${sql})` : sql\n}\n\nexport {\n  selectToSQL,\n}\n","import { alterExprToSQL } from './alter'\nimport { exprToSQL } from './expr'\nimport { indexDefinitionToSQL, indexOptionListToSQL, indexTypeToSQL } from './index-definition'\nimport { columnDefinitionToSQL } from './column'\nimport { constraintDefinitionToSQL } from './constrain'\nimport { funcToSQL } from './func'\nimport { tablesToSQL, tableOptionToSQL, tableToSQL } from './tables'\nimport { unionToSQL } from './union'\nimport { columnIdentifierToSql, columnOrderListToSQL, commonOptionConnector, commonKeywordArgsToSQL, toUpper, hasVal, identifierToSql, triggerEventToSQL, literalToSQL } from './util'\n\nfunction createDefinitionToSQL(definition) {\n  if (!definition) return []\n  const { resource } = definition\n  switch (resource) {\n    case 'column':\n      return columnDefinitionToSQL(definition)\n    case 'index':\n      return indexDefinitionToSQL(definition)\n    case 'constraint':\n      return constraintDefinitionToSQL(definition)\n    case 'sequence':\n      return [toUpper(definition.prefix), exprToSQL(definition.value)].filter(hasVal).join(' ')\n    default:\n      throw new Error(`unknown resource = ${resource} type`)\n  }\n}\n\nfunction createTableToSQL(stmt) {\n  const {\n    type, keyword, table, like, as, temporary,\n    if_not_exists: ifNotExists,\n    create_definitions: createDefinition,\n    table_options: tableOptions,\n    ignore_replace: ignoreReplace,\n    query_expr: queryExpr,\n  } = stmt\n  const sql = [toUpper(type), toUpper(temporary), toUpper(keyword), toUpper(ifNotExists), tablesToSQL(table)]\n  if (like) {\n    const { type: likeType, table: likeTable } = like\n    const likeTableName = tablesToSQL(likeTable)\n    sql.push(toUpper(likeType), likeTableName)\n    return sql.filter(hasVal).join(' ')\n  }\n  if (createDefinition) {\n    sql.push(`(${createDefinition.map(createDefinitionToSQL).join(', ')})`)\n  }\n  if (tableOptions) {\n    sql.push(tableOptions.map(tableOptionToSQL).join(' '))\n  }\n  sql.push(toUpper(ignoreReplace), toUpper(as))\n  if (queryExpr) sql.push(unionToSQL(queryExpr))\n  return sql.filter(hasVal).join(' ')\n}\n\nfunction createTriggerToSQL(stmt) {\n  const {\n    constraint, constraint_kw: constraintKw,\n    deferrable,\n    events, execute,\n    for_each: forEach, from,\n    location,\n    keyword,\n    type, table,\n    when,\n  } = stmt\n  const sql = [toUpper(type), toUpper(constraintKw), toUpper(keyword), identifierToSql(constraint), toUpper(location)]\n  const event = triggerEventToSQL(events)\n  sql.push(event, 'ON', tableToSQL(table))\n  if (from) sql.push('FROM', tableToSQL(from))\n  sql.push(...commonKeywordArgsToSQL(deferrable), ...commonKeywordArgsToSQL(forEach))\n  if (when) sql.push(toUpper(when.type), exprToSQL(when.cond))\n  sql.push(toUpper(execute.keyword), funcToSQL(execute.expr))\n  return sql.filter(hasVal).join(' ')\n}\n\nfunction createExtensionToSQL(stmt) {\n  const {\n    extension, from, if_not_exists: ifNotExists,\n    keyword, schema, type, with: withName, version,\n  } = stmt\n  const sql = [\n    toUpper(type),\n    toUpper(keyword),\n    toUpper(ifNotExists),\n    literalToSQL(extension),\n    toUpper(withName),\n    commonOptionConnector('SCHEMA', literalToSQL, schema),\n    commonOptionConnector('VERSION', literalToSQL, version),\n    commonOptionConnector('FROM', literalToSQL, from),\n  ]\n  return sql.filter(hasVal).join(' ')\n}\n\nfunction createIndexToSQL(stmt) {\n  const {\n    concurrently, filestream_on: fileStream, keyword, include, index_columns: indexColumns,\n    index_type: indexType, index_using: indexUsing, index, on, index_options: indexOpt, algorithm_option: algorithmOpt, lock_option: lockOpt, on_kw: onKw, table, tablespace, type, where,\n    with: withExpr, with_before_where: withBeforeWhere,\n  } = stmt\n  const withIndexOpt = withExpr && `WITH (${indexOptionListToSQL(withExpr).join(', ')})`\n  const includeColumns = include && `${toUpper(include.keyword)} (${include.columns.map(col => identifierToSql(col)).join(', ')})`\n  const sql = [\n    toUpper(type), toUpper(indexType), toUpper(keyword), toUpper(concurrently),\n    identifierToSql(index), toUpper(onKw), tableToSQL(table), ...indexTypeToSQL(indexUsing),\n    `(${columnOrderListToSQL(indexColumns)})`, includeColumns, indexOptionListToSQL(indexOpt).join(' '), alterExprToSQL(algorithmOpt), alterExprToSQL(lockOpt),\n    commonOptionConnector('TABLESPACE', literalToSQL, tablespace),\n  ]\n  if (withBeforeWhere) {\n    sql.push(withIndexOpt, commonOptionConnector('WHERE', exprToSQL, where))\n  } else {\n    sql.push(commonOptionConnector('WHERE', exprToSQL, where), withIndexOpt)\n  }\n  sql.push(commonOptionConnector('ON', exprToSQL, on), commonOptionConnector('FILESTREAM_ON', literalToSQL, fileStream))\n  return sql.filter(hasVal).join(' ')\n}\n\nfunction createSequenceToSQL(stmt) {\n  const {\n    type, keyword, sequence, temporary,\n    if_not_exists: ifNotExists,\n    create_definitions: createDefinition,\n  } = stmt\n  const sql = [\n    toUpper(type),\n    toUpper(temporary),\n    toUpper(keyword),\n    toUpper(ifNotExists),\n    tablesToSQL(sequence),\n  ]\n  if (createDefinition) sql.push(createDefinition.map(createDefinitionToSQL).join(' '))\n  return sql.filter(hasVal).join(' ')\n}\n\nfunction createDatabaseToSQL(stmt) {\n  const {\n    type, keyword, database,\n    if_not_exists: ifNotExists,\n    create_definitions: createDefinition,\n  } = stmt\n  const sql = [\n    toUpper(type),\n    toUpper(keyword),\n    toUpper(ifNotExists),\n    columnIdentifierToSql(database),\n  ]\n  if (createDefinition) sql.push(createDefinition.map(tableOptionToSQL).join(' '))\n  return sql.filter(hasVal).join(' ')\n}\n\nfunction createToSQL(stmt) {\n  const { keyword } = stmt\n  let sql = ''\n  switch (keyword.toLowerCase()) {\n    case 'table':\n      sql = createTableToSQL(stmt)\n      break\n    case 'trigger':\n      sql = createTriggerToSQL(stmt)\n      break\n    case 'extension':\n      sql = createExtensionToSQL(stmt)\n      break\n    case 'index':\n      sql = createIndexToSQL(stmt)\n      break\n    case 'sequence':\n      sql = createSequenceToSQL(stmt)\n      break\n    case 'database':\n      sql = createDatabaseToSQL(stmt)\n      break\n    default:\n      throw new Error(`unknown create resource ${keyword}`)\n  }\n  return sql\n}\n\nexport {\n  createToSQL,\n  createDefinitionToSQL,\n}\n","import { hasVal, toUpper } from './util'\nimport { exprToSQL, orderOrPartitionByToSQL } from './expr'\nimport { overToSQL } from './over'\n\nfunction windowSpecificationToSQL(windowSpec) {\n  const {\n    name,\n    partitionby,\n    orderby,\n    window_frame_clause: windowFrame,\n  } = windowSpec\n  const result = [\n    name,\n    orderOrPartitionByToSQL(partitionby, 'partition by'),\n    orderOrPartitionByToSQL(orderby, 'order by'),\n    toUpper(windowFrame),\n  ]\n  return result.filter(hasVal).join(' ')\n}\n\nfunction asWindowSpecToSQL(asWindowSpec) {\n  if (typeof asWindowSpec === 'string') return asWindowSpec\n  const { window_specification: windowSpec } = asWindowSpec\n  return `(${windowSpecificationToSQL(windowSpec)})`\n}\n\nfunction namedWindowExprToSQL(namedWindowExpr) {\n  const { name, as_window_specification: asWindowSpec } = namedWindowExpr\n  return `${name} AS ${asWindowSpecToSQL(asWindowSpec)}`\n}\n\nfunction namedWindowExprListToSQL(namedWindowExprInfo) {\n  const { expr } = namedWindowExprInfo\n  return expr.map(namedWindowExprToSQL).join(', ')\n}\n\nfunction isConsiderNullsInArgs(fnName) {\n  // position of IGNORE/RESPECT NULLS varies by function\n  switch (fnName) {\n    case 'NTH_VALUE':\n    case 'LEAD':\n    case 'LAG':\n      return false\n    default:\n      return true\n  }\n}\n\nfunction constructArgsList(expr) {\n  const { args, name, consider_nulls = '' } = expr\n  const argsList = args ? exprToSQL(args).join(', ') : ''\n  // cover Syntax from FN_NAME(...args [RESPECT NULLS]) [RESPECT NULLS]\n  const isConsidernulls = isConsiderNullsInArgs(name)\n  const result = [name, '(', argsList, !isConsidernulls && ')', consider_nulls && ' ', consider_nulls, isConsidernulls && ')']\n  return result.filter(hasVal).join('')\n}\n\nfunction windowFuncToSQL(expr) {\n  const { over } = expr\n  const str = constructArgsList(expr)\n  const overStr = overToSQL(over)\n  return [str, overStr].filter(hasVal).join(' ')\n}\n\nexport {\n  asWindowSpecToSQL,\n  namedWindowExprToSQL,\n  namedWindowExprListToSQL,\n  windowFuncToSQL,\n  windowSpecificationToSQL,\n}\n","import { tablesToSQL } from './tables'\nimport { exprToSQL } from './expr'\nimport { identifierToSql, commonOptionConnector, hasVal, toUpper, returningToSQL } from './util'\nimport { selectToSQL } from './select'\nimport { setToSQL } from './update'\n\n/**\n * @param {Array} values\n * @return {string}\n */\nfunction valuesToSQL(values) {\n  if (values.type === 'select') return selectToSQL(values)\n  const clauses = values.map(exprToSQL)\n  return `(${clauses.join('), (')})`\n}\n\nfunction partitionToSQL(partition) {\n  if (!partition) return ''\n  const partitionArr = ['PARTITION', '(']\n  if (Array.isArray(partition)) {\n    partitionArr.push(partition.map(identifierToSql).join(', '))\n  } else {\n    const { value } = partition\n    partitionArr.push(value.map(exprToSQL).join(', '))\n  }\n  partitionArr.push(')')\n  return partitionArr.filter(hasVal).join('')\n}\n\nfunction insertToSQL(stmt) {\n  const {\n    table,\n    type,\n    prefix = 'into',\n    columns,\n    values,\n    where,\n    on_duplicate_update: onDuplicateUpdate,\n    partition,\n    returning,\n    set,\n  } = stmt\n  const { keyword, set: duplicateSet } = onDuplicateUpdate || {}\n  const clauses = [toUpper(type), toUpper(prefix), tablesToSQL(table), partitionToSQL(partition)]\n  if (Array.isArray(columns)) clauses.push(`(${columns.map(identifierToSql).join(', ')})`)\n  clauses.push(commonOptionConnector(Array.isArray(values) ? 'VALUES' : '', valuesToSQL, values))\n  clauses.push(commonOptionConnector('SET', setToSQL, set))\n  clauses.push(commonOptionConnector('WHERE', exprToSQL, where))\n  clauses.push(returningToSQL(returning))\n  clauses.push(commonOptionConnector(keyword, setToSQL, duplicateSet))\n  return clauses.filter(hasVal).join(' ')\n}\n\nexport {\n  insertToSQL,\n  valuesToSQL,\n}\n","import { tablesToSQL } from './tables'\nimport { exprToSQL, orderOrPartitionByToSQL } from './expr'\nimport { limitToSQL } from './limit'\nimport { hasVal, identifierToSql, commonOptionConnector, returningToSQL } from './util'\n\n/**\n * @param {Array} sets\n * @return {string}\n */\nfunction setToSQL(sets) {\n  if (!sets || sets.length === 0) return ''\n  const clauses = []\n  for (const set of sets) {\n    const { table, column, value } = set\n    const str = [table, column].filter(hasVal).map(info => identifierToSql(info)).join('.')\n    const setItem = [str]\n    let val = ''\n    if (value) {\n      val = exprToSQL(value)\n      setItem.push('=', val)\n    }\n    clauses.push(setItem.filter(hasVal).join(' '))\n  }\n  return clauses.join(', ')\n}\n\nfunction updateToSQL(stmt) {\n  const { table, set, where, orderby, limit, returning } = stmt\n  const clauses = [\n    'UPDATE',\n    tablesToSQL(table),\n    commonOptionConnector('SET', setToSQL, set),\n    commonOptionConnector('WHERE', exprToSQL, where),\n    orderOrPartitionByToSQL(orderby, 'order by'),\n    limitToSQL(limit),\n    returningToSQL(returning),\n  ]\n  return clauses.filter(hasVal).join(' ')\n}\n\nexport {\n  updateToSQL,\n  setToSQL,\n}\n","import {\n  identifierToSql,\n  toUpper,\n  hasVal,\n} from './util'\nimport { indexTypeAndOptionToSQL } from './index-definition'\nimport { columnReferenceDefinitionToSQL } from './column'\n\nfunction constraintDefinitionToSQL(constraintDefinition) {\n  if (!constraintDefinition) return\n  const {\n    constraint,\n    constraint_type: constraintType,\n    enforced,\n    index,\n    keyword,\n    reference_definition: referenceDefinition,\n  } = constraintDefinition\n  const constraintSQL = []\n  constraintSQL.push(toUpper(keyword))\n  constraintSQL.push(identifierToSql(constraint))\n  constraintSQL.push(toUpper(constraintType))\n  constraintSQL.push(identifierToSql(index))\n  constraintSQL.push(...indexTypeAndOptionToSQL(constraintDefinition))\n  constraintSQL.push(...columnReferenceDefinitionToSQL(referenceDefinition))\n  constraintSQL.push(toUpper(enforced))\n  return constraintSQL.filter(hasVal).join(' ')\n}\n\nexport {\n  constraintDefinitionToSQL,\n}\n","import { exprToSQL } from './expr'\nimport { literalToSQL } from './util'\n\n/**\n * @param {Array<Object>} withExpr\n */\nfunction withToSQL(withExpr) {\n  if (!withExpr || withExpr.length === 0) return\n  const isRecursive = withExpr[0].recursive ? 'RECURSIVE ' : ''\n  const withExprStr = withExpr.map(cte => {\n    const { name, stmt, columns } = cte\n    const column = Array.isArray(columns) ? `(${columns.join(', ')})` : ''\n    return `${literalToSQL(name)}${column} AS (${exprToSQL(stmt)})`\n  }).join(', ')\n\n  return `WITH ${isRecursive}${withExprStr}`\n}\n\nexport {\n  withToSQL,\n}\n","import { exprToSQL } from './expr'\nimport { limitToSQL } from './limit'\nimport { tablesToSQL } from './tables'\nimport { commonOptionConnector, hasVal, literalToSQL, toUpper } from './util'\n\nfunction showEventToSQL(showEventExpr) {\n  const { in: inClause, from , limit } = showEventExpr\n  return [\n    commonOptionConnector('IN', literalToSQL, inClause && inClause.right),\n    commonOptionConnector('FROM', tablesToSQL, from),\n    limitToSQL(limit),\n  ].filter(hasVal).join(' ')\n}\n\nfunction showLikeAndWhereToSQL(showCharacterSetExpr) {\n  const { expr } = showCharacterSetExpr\n  if (!expr) return\n  const { op } = expr\n  if (toUpper(op) === 'LIKE') return commonOptionConnector('LIKE', literalToSQL, expr.right)\n  return commonOptionConnector('WHERE', exprToSQL, expr)\n}\n\nfunction showGrantsForUser(showGrantsForExpr) {\n  const { for: forExpr } = showGrantsForExpr\n  if (!forExpr) return\n  const { user, host, role_list } = forExpr\n  let userAndHost = `'${user}'`\n  if (host) userAndHost += `@'${host}'`\n  return ['FOR', userAndHost, role_list && 'USING', role_list && role_list.map(role => `'${role}'`).join(', ')].filter(hasVal).join(' ')\n}\n\nfunction showToSQL(showExpr) {\n  const { suffix, keyword } = showExpr\n  let str = ''\n  switch (toUpper(keyword)) {\n    case 'BINLOG':\n      str = showEventToSQL(showExpr)\n      break\n    case 'CHARACTER':\n    case 'COLLATION':\n      str = showLikeAndWhereToSQL(showExpr)\n      break\n    case 'GRANTS':\n      str = showGrantsForUser(showExpr)\n      break\n    default:\n      break\n  }\n  const result = ['SHOW', toUpper(keyword), toUpper(suffix), str]\n  return result.filter(hasVal).join(' ')\n}\n\nexport {\n  showToSQL,\n}\n","import { parse } from '../pegjs/mysql.pegjs'\n\nexport default {\n  [PARSER_NAME] : parse,\n}\n","import { bigQueryToSQL, unionToSQL, multipleToSQL } from './union'\n\nconst surportedTypes = ['analyze', 'attach', 'select', 'delete', 'update', 'insert', 'drop', 'rename', 'truncate', 'call', 'desc', 'use', 'alter', 'set', 'create', 'lock', 'unlock', 'bigquery', 'declare', 'show', 'replace']\n\nfunction checkSupported(expr) {\n  const ast = expr && expr.ast ? expr.ast : expr\n  if (!surportedTypes.includes(ast.type)) throw new Error(`${ast.type} statements not supported at the moment`)\n}\n\nexport default function toSQL(ast) {\n  if (Array.isArray(ast)) {\n    ast.forEach(checkSupported)\n    return multipleToSQL(ast)\n  }\n  checkSupported(ast)\n  const { type } = ast\n  if (type === 'bigquery') return bigQueryToSQL(ast)\n  return unionToSQL(ast)\n}\n","import parsers from './parser.all'\nimport astToSQL from './sql'\nimport { DEFAULT_OPT, setParserOpt } from './util'\n\nclass Parser {\n  astify(sql, opt = DEFAULT_OPT) {\n    const astInfo = this.parse(sql, opt)\n    return astInfo && astInfo.ast\n  }\n\n  sqlify(ast, opt = DEFAULT_OPT) {\n    setParserOpt(opt)\n    return astToSQL(ast, opt)\n  }\n\n  parse(sql, opt = DEFAULT_OPT) {\n    const { database = (PARSER_NAME || 'mysql') } = opt\n    setParserOpt(opt)\n    const typeCase = database.toLowerCase()\n    if (parsers[typeCase]) return parsers[typeCase](sql.trim())\n    throw new Error(`${database} is not supported currently`)\n  }\n\n  whiteListCheck(sql, whiteList, opt = DEFAULT_OPT) {\n    if (!whiteList || whiteList.length === 0) return\n    const { type = 'table' } = opt\n    if (!this[`${type}List`] || typeof this[`${type}List`] !== 'function') throw new Error(`${type} is not valid check mode`)\n    const checkFun = this[`${type}List`].bind(this)\n    const authorityList = checkFun(sql, opt)\n    let hasAuthority = true\n    let denyInfo = ''\n    for (const authority of authorityList) {\n      let hasCorrespondingAuthority = false\n      for (const whiteAuthority of whiteList) {\n        const regex = new RegExp(whiteAuthority, 'i')\n        if (regex.test(authority)) {\n          hasCorrespondingAuthority = true\n          break\n        }\n      }\n      if (!hasCorrespondingAuthority) {\n        denyInfo = authority\n        hasAuthority = false\n        break\n      }\n    }\n    if (!hasAuthority) throw new Error(`authority = '${denyInfo}' is required in ${type} whiteList to execute SQL = '${sql}'`)\n  }\n\n  tableList(sql, opt) {\n    const astInfo = this.parse(sql, opt)\n    return astInfo && astInfo.tableList\n  }\n\n  columnList(sql, opt) {\n    const astInfo = this.parse(sql, opt)\n    return astInfo && astInfo.columnList\n  }\n}\n\nexport default Parser\n","/*\n * Generated by PEG.js 0.10.0.\n *\n * http://pegjs.org/\n */\n\n\"use strict\";\n\nvar BigInt = require(\"big-integer\");\n\nfunction peg$subclass(child, parent) {\n  function ctor() { this.constructor = child; }\n  ctor.prototype = parent.prototype;\n  child.prototype = new ctor();\n}\n\nfunction peg$SyntaxError(message, expected, found, location) {\n  this.message  = message;\n  this.expected = expected;\n  this.found    = found;\n  this.location = location;\n  this.name     = \"SyntaxError\";\n\n  if (typeof Error.captureStackTrace === \"function\") {\n    Error.captureStackTrace(this, peg$SyntaxError);\n  }\n}\n\npeg$subclass(peg$SyntaxError, Error);\n\npeg$SyntaxError.buildMessage = function(expected, found) {\n  var DESCRIBE_EXPECTATION_FNS = {\n        literal: function(expectation) {\n          return \"\\\"\" + literalEscape(expectation.text) + \"\\\"\";\n        },\n\n        \"class\": function(expectation) {\n          var escapedParts = \"\",\n              i;\n\n          for (i = 0; i < expectation.parts.length; i++) {\n            escapedParts += expectation.parts[i] instanceof Array\n              ? classEscape(expectation.parts[i][0]) + \"-\" + classEscape(expectation.parts[i][1])\n              : classEscape(expectation.parts[i]);\n          }\n\n          return \"[\" + (expectation.inverted ? \"^\" : \"\") + escapedParts + \"]\";\n        },\n\n        any: function(expectation) {\n          return \"any character\";\n        },\n\n        end: function(expectation) {\n          return \"end of input\";\n        },\n\n        other: function(expectation) {\n          return expectation.description;\n        }\n      };\n\n  function hex(ch) {\n    return ch.charCodeAt(0).toString(16).toUpperCase();\n  }\n\n  function literalEscape(s) {\n    return s\n      .replace(/\\\\/g, '\\\\\\\\')\n      .replace(/\"/g,  '\\\\\"')\n      .replace(/\\0/g, '\\\\0')\n      .replace(/\\t/g, '\\\\t')\n      .replace(/\\n/g, '\\\\n')\n      .replace(/\\r/g, '\\\\r')\n      .replace(/[\\x00-\\x0F]/g,          function(ch) { return '\\\\x0' + hex(ch); })\n      .replace(/[\\x10-\\x1F\\x7F-\\x9F]/g, function(ch) { return '\\\\x'  + hex(ch); });\n  }\n\n  function classEscape(s) {\n    return s\n      .replace(/\\\\/g, '\\\\\\\\')\n      .replace(/\\]/g, '\\\\]')\n      .replace(/\\^/g, '\\\\^')\n      .replace(/-/g,  '\\\\-')\n      .replace(/\\0/g, '\\\\0')\n      .replace(/\\t/g, '\\\\t')\n      .replace(/\\n/g, '\\\\n')\n      .replace(/\\r/g, '\\\\r')\n      .replace(/[\\x00-\\x0F]/g,          function(ch) { return '\\\\x0' + hex(ch); })\n      .replace(/[\\x10-\\x1F\\x7F-\\x9F]/g, function(ch) { return '\\\\x'  + hex(ch); });\n  }\n\n  function describeExpectation(expectation) {\n    return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);\n  }\n\n  function describeExpected(expected) {\n    var descriptions = new Array(expected.length),\n        i, j;\n\n    for (i = 0; i < expected.length; i++) {\n      descriptions[i] = describeExpectation(expected[i]);\n    }\n\n    descriptions.sort();\n\n    if (descriptions.length > 0) {\n      for (i = 1, j = 1; i < descriptions.length; i++) {\n        if (descriptions[i - 1] !== descriptions[i]) {\n          descriptions[j] = descriptions[i];\n          j++;\n        }\n      }\n      descriptions.length = j;\n    }\n\n    switch (descriptions.length) {\n      case 1:\n        return descriptions[0];\n\n      case 2:\n        return descriptions[0] + \" or \" + descriptions[1];\n\n      default:\n        return descriptions.slice(0, -1).join(\", \")\n          + \", or \"\n          + descriptions[descriptions.length - 1];\n    }\n  }\n\n  function describeFound(found) {\n    return found ? \"\\\"\" + literalEscape(found) + \"\\\"\" : \"end of input\";\n  }\n\n  return \"Expected \" + describeExpected(expected) + \" but \" + describeFound(found) + \" found.\";\n};\n\nfunction peg$parse(input, options) {\n  options = options !== void 0 ? options : {};\n\n  var peg$FAILED = {},\n\n      peg$startRuleFunctions = { start: peg$parsestart },\n      peg$startRuleFunction  = peg$parsestart,\n\n      peg$c0 = function(n) {\n          return n\n        },\n      peg$c1 = function(head, tail) {\n            const cur = [head && head.ast || head];\n            for (let i = 0; i < tail.length; i++) {\n              if(!tail[i][3] || tail[i][3].length === 0) continue;\n              cur.push(tail[i][3] && tail[i][3].ast || tail[i][3]);\n            }\n            return {\n              tableList: Array.from(tableList),\n              columnList: columnListTableAlias(columnList),\n              ast: cur\n            }\n          },\n      peg$c2 = \"(\",\n      peg$c3 = peg$literalExpectation(\"(\", false),\n      peg$c4 = \")\",\n      peg$c5 = peg$literalExpectation(\")\", false),\n      peg$c6 = function(s) {\n            return {\n              ...s[2],\n              parentheses: true,\n            }\n          },\n      peg$c7 = function(cte, s, o, l, se) {\n          return {\n            tableList: Array.from(tableList),\n            columnList: columnListTableAlias(columnList),\n            ast: {\n              type: 'bigquery',\n              with: cte,\n              select: s && s.ast,\n              orderby: o,\n              limit: l,\n              parentheses: s && s.parentheses || false,\n            }\n          }\n        },\n      peg$c8 = function(u, s) {\n          return s ? `union ${s.toLowerCase()}` : 'union'\n        },\n      peg$c9 = \"intersect\",\n      peg$c10 = peg$literalExpectation(\"INTERSECT\", true),\n      peg$c11 = \"except\",\n      peg$c12 = peg$literalExpectation(\"EXCEPT\", true),\n      peg$c13 = function(u, s) {\n          return `${u.toLowerCase()} ${s.toLowerCase()}`\n        },\n      peg$c14 = function(s) {\n            return {\n              ...s[2],\n              parentheses: true\n            }\n          },\n      peg$c15 = function(head, tail) {\n            let cur = head\n            for (let i = 0; i < tail.length; i++) {\n              cur._next = tail[i][3]\n              cur.union = tail[i][1]\n              cur = cur._next\n            }\n            return {\n              tableList: Array.from(tableList),\n              columnList: columnListTableAlias(columnList),\n              ast: head\n            }\n          },\n      peg$c16 = function(s) {\n            return {\n              ...s[2],\n              parentheses_symbol: true\n            }\n          },\n      peg$c17 = function(head, tail) {\n            return createList(head, tail);\n          },\n      peg$c18 = function(name, stmt) {\n          if (typeof name === 'string') name = { type: 'default', value: name }\n          return { name, stmt };\n        },\n      peg$c19 = function(sv, d, c, f, fs, w, g, h, o, l, win) {\n            if(Array.isArray(f)) f.forEach(info => info.table && tableList.add(`select::${info.db}::${info.table}`));\n            return {\n                type: 'select',\n                as_struct_val: sv,\n                distinct: d,\n                columns: c,\n                from: f,\n                for_sys_time_as_of: fs,\n                where: w,\n                groupby: g,\n                having: h,\n                orderby: o,\n                limit: l,\n                window:win,\n            };\n        },\n      peg$c20 = \"for\",\n      peg$c21 = peg$literalExpectation(\"FOR\", true),\n      peg$c22 = \"system_time\",\n      peg$c23 = peg$literalExpectation(\"SYSTEM_TIME\", true),\n      peg$c24 = \"as\",\n      peg$c25 = peg$literalExpectation(\"AS\", true),\n      peg$c26 = \"of\",\n      peg$c27 = peg$literalExpectation(\"OF\", true),\n      peg$c28 = function(e) {\n          return {\n            keyword: 'for system_time as of',\n            expr: e\n          }\n        },\n      peg$c29 = function(a, k) {\n          return `${a[0].toLowerCase()} ${k.toLowerCase()}`\n        },\n      peg$c30 = function(e, alias) {\n            return { expr: e, as:alias };\n          },\n      peg$c31 = \"replace\",\n      peg$c32 = peg$literalExpectation(\"REPLACE\", true),\n      peg$c33 = function(k, c) {\n          columnList.add('select::null::(.*)')\n          return {\n            expr_list: c,\n            parentheses: true,\n            star: '*',\n            type: k.toLowerCase(),\n          }\n        },\n      peg$c34 = function(head, tail) {\n            columnList.add('select::null::(.*)');\n            if (tail && tail.length > 0) {\n              head[0] = {\n                expr: {\n                  type: 'column_ref',\n                  table: null,\n                  column: '*'\n                },\n                as: null\n              };\n              return createList(head[0], tail);\n            }\n            return head[0];\n          },\n      peg$c35 = function(c) {\n          return c\n        },\n      peg$c36 = function(n, t, l) {\n          return {\n            expr: n,\n            offset: `[${t}(${l.value})]`\n          }\n        },\n      peg$c37 = function(tbl, pro) {\n            columnList.add(`select::${tbl}::(.*)`)\n            let column = '*'\n            const mid = pro && pro[0]\n            if (typeof mid === 'string') column = `${mid}.*`\n            if (mid && mid.expr && mid.offset) column = { ...mid, suffix: '.*' }\n            return {\n              expr: {\n                type: 'column_ref',\n                table: tbl,\n                column,\n              },\n              as: null\n            }\n          },\n      peg$c38 = function(c, as) {\n          return {\n              expr: {\n                type: 'column_ref',\n                table: null,\n                column: c\n              },\n              as: as\n            }\n        },\n      peg$c39 = function(i) { return i; },\n      peg$c40 = \"unnest\",\n      peg$c41 = peg$literalExpectation(\"UNNEST\", true),\n      peg$c42 = function(a, alias, wf) {\n          return {\n            type: 'unnest',\n            expr: a,\n            parentheses: true,\n            as:alias,\n            with_offset: wf,\n          }\n        },\n      peg$c43 = function(l) { return l; },\n      peg$c44 = function(alias) {\n          return {\n            keyword: 'with offset as',\n            as: alias\n          }\n        },\n      peg$c45 = function(head, tail) {\n            return [head, tail]\n          },\n      peg$c46 = function(head, tail) {\n            tail.unshift(head);\n            tail.forEach(tableInfo => {\n              const { table, as } = tableInfo\n              tableAlias[table] = table\n              if (as) tableAlias[as] = table\n              refreshColumnList(columnList)\n            })\n            return tail;\n          },\n      peg$c47 = function(t) { return t; },\n      peg$c48 = function(op, t, head, tail) {\n            t.join = op;\n            t.using = createList(head, tail);\n            return t;\n          },\n      peg$c49 = function(op, t, expr) {\n            t.join = op;\n            t.on   = expr;\n            return t;\n          },\n      peg$c50 = function(op, stmt, alias, expr) {\n          stmt.parentheses = true;\n          return {\n            expr: stmt,\n            as: alias,\n            join: op,\n            on: expr\n          };\n        },\n      peg$c51 = function(t, alias) {\n            if (t.type === 'var') {\n              t.as = alias;\n              return t;\n            } else {\n              return {\n                db: t.db,\n                table: t.table,\n                as: alias\n              };\n            }\n          },\n      peg$c52 = function(stmt, alias) {\n            stmt.parentheses = true;\n            return {\n              expr: stmt,\n              as: alias\n            };\n          },\n      peg$c53 = function() { return 'LEFT JOIN'; },\n      peg$c54 = function() { return 'RIGHT JOIN'; },\n      peg$c55 = function() { return 'FULL JOIN'; },\n      peg$c56 = function(k) { return `${k[0].toUpperCase()} JOIN`; },\n      peg$c57 = function(k) { return k ? `${k[0].toUpperCase()} JOIN` : 'JOIN'; },\n      peg$c58 = function(project, dt, tail) {\n            const obj = { db: null, table: project };\n            if (tail !== null) {\n              obj.db = `${project}.${dt[3]}`;\n              obj.table = tail[3];\n            }\n            return obj;\n          },\n      peg$c59 = function(dt, tail) {\n            const obj = { db: null, table: dt };\n            if (tail !== null) {\n              obj.db = dt;\n              obj.table = tail[3];\n            }\n            return obj;\n          },\n      peg$c60 = function(e) { return e; },\n      peg$c61 = function(e) { return e.value; },\n      peg$c62 = function(l) {\n          return {\n            keyword: 'window',\n            type: 'window',\n            expr: l,\n          }\n        },\n      peg$c63 = function(nw, anw) {\n          return {\n            name: nw,\n            as_window_specification: anw,\n          }\n        },\n      peg$c64 = function(n) { return n },\n      peg$c65 = function(ws) {\n          return {\n            window_specification: ws,\n            parentheses: true\n          }\n        },\n      peg$c66 = function(n, bc, l, w) {\n          return {\n            name: n,\n            partitionby: bc,\n            orderby: l,\n            window_frame_clause: w\n          }\n        },\n      peg$c67 = \"range\",\n      peg$c68 = peg$literalExpectation(\"RANGE\", true),\n      peg$c69 = \"unbounded\",\n      peg$c70 = peg$literalExpectation(\"UNBOUNDED\", true),\n      peg$c71 = \"preceding\",\n      peg$c72 = peg$literalExpectation(\"PRECEDING\", true),\n      peg$c73 = \"current\",\n      peg$c74 = peg$literalExpectation(\"CURRENT\", true),\n      peg$c75 = \"ROW\",\n      peg$c76 = peg$literalExpectation(\"ROW\", false),\n      peg$c77 = function() {\n          return 'range between unbounded preceding and current row'\n        },\n      peg$c78 = \"rows\",\n      peg$c79 = peg$literalExpectation(\"ROWS\", true),\n      peg$c80 = \"following\",\n      peg$c81 = peg$literalExpectation(\"FOLLOWING\", true),\n      peg$c82 = function(s, e) {\n          return `rows between ${s.value} preceding and ${e.value} following`\n        },\n      peg$c83 = function(bc) { return bc; },\n      peg$c84 = function(e, d) {\n          const obj = { expr: e, type: 'ASC' };\n          if (d === 'DESC') obj.type = 'DESC';\n          return obj;\n        },\n      peg$c85 = function(i1, tail) {\n            const res = [i1];\n            if (tail) res.push(tail[2]);\n            return {\n              seperator: tail && tail[0] && tail[0].toLowerCase() || '',\n              value: res\n            };\n          },\n      peg$c86 = function(head, tail) {\n            const el = { type: 'expr_list' };\n            el.value = createList(head, tail);\n            return el;\n          },\n      peg$c87 = function(c) {\n          return {\n            array_path: c,\n            type: 'array',\n            keyword: '',\n            parentheses: true\n          }\n        },\n      peg$c88 = function(s, c) {\n          return {\n            definition: s,\n            array_path: c.map(l => ({ expr: l, as: null })),\n            type: 'array',\n            keyword: s && 'array',\n            parentheses: true\n          }\n        },\n      peg$c89 = function(s, c) {\n          return {\n            definition: s,\n            expr_list: c,\n            type: 'array',\n            keyword: s && 'array',\n            parentheses: true\n          }\n        },\n      peg$c90 = function(s, c) {\n          return {\n            definition: s,\n            expr_list: c,\n            type: 'struct',\n            keyword: s && 'struct',\n            parentheses: true\n          }\n        },\n      peg$c91 = function(head, tail) {\n          return createBinaryExprChain(head, tail);\n        },\n      peg$c92 = function(op, tail) {\n          return createUnaryExpr(op, tail[0][1]);\n        },\n      peg$c93 = function(head, tail) {\n          let result = head;\n          let seperator = ''\n          for (let i = 0; i < tail.length; i++) {\n            if (tail[i][1] === ',') {\n              seperator = ','\n              if (i === 0) result = [head]\n              result.push(tail[i][3])\n            } else {\n              result = createBinaryExpr(tail[i][1], result, tail[i][3]);\n            }\n          }\n          if (seperator === ',') {\n            const el = { type: 'expr_list' };\n            el.value = result\n            return el\n          }\n          return result;\n        },\n      peg$c94 = function(head, tail) {\n            return createBinaryExprChain(head, tail);\n          },\n      peg$c95 = \"!\",\n      peg$c96 = peg$literalExpectation(\"!\", false),\n      peg$c97 = \"=\",\n      peg$c98 = peg$literalExpectation(\"=\", false),\n      peg$c99 = function(expr) {\n            return createUnaryExpr('NOT', expr);\n          },\n      peg$c100 = function(left, rh) {\n            if (rh === null) return left;\n            else if (rh.type === 'arithmetic') return createBinaryExprChain(left, rh.tail);\n            else return createBinaryExpr(rh.op, left, rh.right);\n          },\n      peg$c101 = function(op, stmt) {\n          stmt.parentheses = true;\n          return createUnaryExpr(op, stmt);\n        },\n      peg$c102 = function(nk) { return nk[0] + ' ' + nk[2]; },\n      peg$c103 = function(l) {\n            return { type: 'arithmetic', tail: l };\n          },\n      peg$c104 = \">=\",\n      peg$c105 = peg$literalExpectation(\">=\", false),\n      peg$c106 = \">\",\n      peg$c107 = peg$literalExpectation(\">\", false),\n      peg$c108 = \"<=\",\n      peg$c109 = peg$literalExpectation(\"<=\", false),\n      peg$c110 = \"<>\",\n      peg$c111 = peg$literalExpectation(\"<>\", false),\n      peg$c112 = \"<\",\n      peg$c113 = peg$literalExpectation(\"<\", false),\n      peg$c114 = \"!=\",\n      peg$c115 = peg$literalExpectation(\"!=\", false),\n      peg$c116 = function(right) {\n            return { op: 'IS', right: right };\n          },\n      peg$c117 = function(right) {\n            return { op: 'IS NOT', right: right };\n        },\n      peg$c118 = function(op, begin, end) {\n            return {\n              op: op,\n              right: {\n                type: 'expr_list',\n                value: [begin, end]\n              }\n            };\n          },\n      peg$c119 = function(op, right) {\n            return { op: op, right: right };\n          },\n      peg$c120 = function(op, l) {\n            return { op: op, right: l };\n          },\n      peg$c121 = function(op, e) {\n            return { op: op, right: e };\n          },\n      peg$c122 = \"+\",\n      peg$c123 = peg$literalExpectation(\"+\", false),\n      peg$c124 = \"-\",\n      peg$c125 = peg$literalExpectation(\"-\", false),\n      peg$c126 = function(head, tail) {\n            return createBinaryExprChain(head, tail)\n          },\n      peg$c127 = \"*\",\n      peg$c128 = peg$literalExpectation(\"*\", false),\n      peg$c129 = \"/\",\n      peg$c130 = peg$literalExpectation(\"/\", false),\n      peg$c131 = \"%\",\n      peg$c132 = peg$literalExpectation(\"%\", false),\n      peg$c133 = function(list) {\n              list.parentheses = true;\n              return list;\n          },\n      peg$c134 = function(e, u) {\n            return {\n              type: 'interval',\n              expr: e,\n              unit: u.toLowerCase(),\n            }\n          },\n      peg$c135 = function(condition_list, otherwise) {\n            if (otherwise) condition_list.push(otherwise);\n            return {\n              type: 'case',\n              expr: null,\n              args: condition_list\n            };\n          },\n      peg$c136 = function(expr, condition_list, otherwise) {\n            if (otherwise) condition_list.push(otherwise);\n            return {\n              type: 'case',\n              expr: expr,\n              args: condition_list\n            };\n          },\n      peg$c137 = function(condition, result) {\n          return {\n            type: 'when',\n            cond: condition,\n            result: result\n          };\n        },\n      peg$c138 = function(result) {\n          return { type: 'else', result: result };\n        },\n      peg$c139 = function(tbl, col) {\n            columnList.add(`select::${tbl}::${col}`);\n            return {\n              type: 'column_ref',\n              table: tbl,\n              column: col\n            };\n          },\n      peg$c140 = function(col) {\n            columnList.add(`select::null::${col}`);\n            return {\n              type: 'column_ref',\n              table: null,\n              column: col\n            };\n          },\n      peg$c141 = function(name) { return reservedMap[name.toUpperCase()] === true; },\n      peg$c142 = function(name) {\n            return name;\n          },\n      peg$c143 = function(name) {\n            if (reservedMap[name.toUpperCase()] === true) throw new Error(\"Error: \"+ JSON.stringify(name)+\" is a reserved word, can not as alias clause\");\n            return false\n          },\n      peg$c144 = \"\\\"\",\n      peg$c145 = peg$literalExpectation(\"\\\"\", false),\n      peg$c146 = /^[^\"]/,\n      peg$c147 = peg$classExpectation([\"\\\"\"], true, false),\n      peg$c148 = function(chars) { return chars.join(''); },\n      peg$c149 = \"'\",\n      peg$c150 = peg$literalExpectation(\"'\", false),\n      peg$c151 = /^[^']/,\n      peg$c152 = peg$classExpectation([\"'\"], true, false),\n      peg$c153 = \"`\",\n      peg$c154 = peg$literalExpectation(\"`\", false),\n      peg$c155 = /^[^`]/,\n      peg$c156 = peg$classExpectation([\"`\"], true, false),\n      peg$c157 = function(chars) { return `\\`${chars.join('')}\\``; },\n      peg$c158 = function(name) {\n          return name;\n        },\n      peg$c159 = function(name) { return name; },\n      peg$c160 = function(start, parts) { return start + parts.join(''); },\n      peg$c161 = /^[A-Za-z_]/,\n      peg$c162 = peg$classExpectation([[\"A\", \"Z\"], [\"a\", \"z\"], \"_\"], false, false),\n      peg$c163 = /^[A-Za-z0-9_]/,\n      peg$c164 = peg$classExpectation([[\"A\", \"Z\"], [\"a\", \"z\"], [\"0\", \"9\"], \"_\"], false, false),\n      peg$c165 = /^[A-Za-z0-9_:]/,\n      peg$c166 = peg$classExpectation([[\"A\", \"Z\"], [\"a\", \"z\"], [\"0\", \"9\"], \"_\", \":\"], false, false),\n      peg$c167 = \":\",\n      peg$c168 = peg$literalExpectation(\":\", false),\n      peg$c169 = function(l) {\n            return { type: 'param', value: l[1] };\n          },\n      peg$c170 = function(name, e) {\n            return {\n              type: 'aggr_func',\n              name: name,\n              args: {\n                expr: e\n              }\n            };\n          },\n      peg$c171 = \"update\",\n      peg$c172 = peg$literalExpectation(\"UPDATE\", true),\n      peg$c173 = function(kw, l) {\n          return {\n            type: 'on update',\n            keyword: kw,\n            parentheses: true,\n            expr: l\n          }\n        },\n      peg$c174 = function(kw) {\n          return {\n            type: 'on update',\n            keyword: kw,\n          }\n        },\n      peg$c175 = function(aws) {\n          return {\n            type: 'window',\n            as_window_specification: aws,\n          }\n        },\n      peg$c176 = function(bc, l) {\n          return {\n            partitionby: bc,\n            orderby: l\n          }\n        },\n      peg$c177 = function(name, arg, bc) {\n            return {\n              type: 'aggr_func',\n              name: name,\n              args: arg,\n              over: bc\n            };\n          },\n      peg$c178 = function(e) { return { expr: e }; },\n      peg$c179 = function(d, c) { return { distinct: d, expr: c }; },\n      peg$c180 = function(d, c, or) {  c.parentheses = true; return { distinct: d, expr: c, orderby: or }; },\n      peg$c181 = function() { return { type: 'star', value: '*' }; },\n      peg$c182 = function(name, l, bc) {\n            return {\n              type: 'function',\n              name: name,\n              args: l ? l: { type: 'expr_list', value: [] },\n              over: bc\n            };\n          },\n      peg$c183 = function(f, up) {\n          return {\n              type: 'function',\n              name: f,\n              over: up\n          }\n        },\n      peg$c184 = function(dt, tail) {\n            let name = dt\n            if (tail !== null) {\n              name = `${dt}.${tail[3]}`\n            }\n            return name;\n          },\n      peg$c185 = \"century\",\n      peg$c186 = peg$literalExpectation(\"CENTURY\", true),\n      peg$c187 = \"day\",\n      peg$c188 = peg$literalExpectation(\"DAY\", true),\n      peg$c189 = \"decade\",\n      peg$c190 = peg$literalExpectation(\"DECADE\", true),\n      peg$c191 = \"dow\",\n      peg$c192 = peg$literalExpectation(\"DOW\", true),\n      peg$c193 = \"doy\",\n      peg$c194 = peg$literalExpectation(\"DOY\", true),\n      peg$c195 = \"epoch\",\n      peg$c196 = peg$literalExpectation(\"EPOCH\", true),\n      peg$c197 = \"hour\",\n      peg$c198 = peg$literalExpectation(\"HOUR\", true),\n      peg$c199 = \"isodow\",\n      peg$c200 = peg$literalExpectation(\"ISODOW\", true),\n      peg$c201 = \"isoyear\",\n      peg$c202 = peg$literalExpectation(\"ISOYEAR\", true),\n      peg$c203 = \"microseconds\",\n      peg$c204 = peg$literalExpectation(\"MICROSECONDS\", true),\n      peg$c205 = \"millennium\",\n      peg$c206 = peg$literalExpectation(\"MILLENNIUM\", true),\n      peg$c207 = \"milliseconds\",\n      peg$c208 = peg$literalExpectation(\"MILLISECONDS\", true),\n      peg$c209 = \"minute\",\n      peg$c210 = peg$literalExpectation(\"MINUTE\", true),\n      peg$c211 = \"month\",\n      peg$c212 = peg$literalExpectation(\"MONTH\", true),\n      peg$c213 = \"quarter\",\n      peg$c214 = peg$literalExpectation(\"QUARTER\", true),\n      peg$c215 = \"second\",\n      peg$c216 = peg$literalExpectation(\"SECOND\", true),\n      peg$c217 = \"timezone\",\n      peg$c218 = peg$literalExpectation(\"TIMEZONE\", true),\n      peg$c219 = \"timezone_hour\",\n      peg$c220 = peg$literalExpectation(\"TIMEZONE_HOUR\", true),\n      peg$c221 = \"timezone_minute\",\n      peg$c222 = peg$literalExpectation(\"TIMEZONE_MINUTE\", true),\n      peg$c223 = \"week\",\n      peg$c224 = peg$literalExpectation(\"WEEK\", true),\n      peg$c225 = \"year\",\n      peg$c226 = peg$literalExpectation(\"YEAR\", true),\n      peg$c227 = function() {\n          return f\n        },\n      peg$c228 = function(kw, f, t, s) {\n          return {\n              type: kw.toLowerCase(),\n              args: {\n                field: f,\n                cast_type: t,\n                source: s,\n              }\n          }\n        },\n      peg$c229 = function(e, t) {\n          return {\n            type: 'cast',\n            expr: e,\n            symbol: 'as',\n            target: t\n          };\n        },\n      peg$c230 = function(e, precision) {\n          return {\n            type: 'cast',\n            expr: e,\n            symbol: 'as',\n            target: {\n              dataType: 'DECIMAL(' + precision + ')'\n            }\n          };\n        },\n      peg$c231 = function(e, precision, scale) {\n            return {\n              type: 'cast',\n              expr: e,\n              symbol: 'as',\n              target: {\n                dataType: 'DECIMAL(' + precision + ', ' + scale + ')'\n              }\n            };\n          },\n      peg$c232 = function(e, s, t) { /* MySQL cast to un-/signed integer */\n          return {\n            type: 'cast',\n            expr: e,\n            symbol: 'as',\n            target: {\n              dataType: s + (t ? ' ' + t: '')\n            }\n          };\n        },\n      peg$c233 = function() {\n            return { type: 'null', value: null };\n          },\n      peg$c234 = function() {\n          return {\n            type: 'not null',\n            value: 'not null',\n          }\n        },\n      peg$c235 = function() {\n            return { type: 'bool', value: true };\n          },\n      peg$c236 = function() {\n            return { type: 'bool', value: false };\n          },\n      peg$c237 = \"r\",\n      peg$c238 = peg$literalExpectation(\"R\", true),\n      peg$c239 = function(r, ca) {\n            return {\n              type: r ? 'regex_string' : 'single_quote_string',\n              value: ca[1].join('')\n            };\n          },\n      peg$c240 = function(r, ca) {\n            return {\n              type: r ? 'regex_string' : 'string',\n              value: ca[1].join('')\n            };\n          },\n      peg$c241 = function(type, ca) {\n            return {\n              type: type.toLowerCase(),\n              value: ca[1].join('')\n            };\n          },\n      peg$c242 = /^[^\"\\\\\\0-\\x1F\\x7F]/,\n      peg$c243 = peg$classExpectation([\"\\\"\", \"\\\\\", [\"\\0\", \"\\x1F\"], \"\\x7F\"], true, false),\n      peg$c244 = /^[^'\\\\]/,\n      peg$c245 = peg$classExpectation([\"'\", \"\\\\\"], true, false),\n      peg$c246 = \"\\\\'\",\n      peg$c247 = peg$literalExpectation(\"\\\\'\", false),\n      peg$c248 = function() { return \"'\";  },\n      peg$c249 = \"\\\\\\\"\",\n      peg$c250 = peg$literalExpectation(\"\\\\\\\"\", false),\n      peg$c251 = function() { return '\"';  },\n      peg$c252 = \"\\\\\\\\\",\n      peg$c253 = peg$literalExpectation(\"\\\\\\\\\", false),\n      peg$c254 = function() { return \"\\\\\"; },\n      peg$c255 = \"\\\\/\",\n      peg$c256 = peg$literalExpectation(\"\\\\/\", false),\n      peg$c257 = function() { return \"/\";  },\n      peg$c258 = \"\\\\b\",\n      peg$c259 = peg$literalExpectation(\"\\\\b\", false),\n      peg$c260 = function() { return \"\\b\"; },\n      peg$c261 = \"\\\\f\",\n      peg$c262 = peg$literalExpectation(\"\\\\f\", false),\n      peg$c263 = function() { return \"\\f\"; },\n      peg$c264 = \"\\\\n\",\n      peg$c265 = peg$literalExpectation(\"\\\\n\", false),\n      peg$c266 = function() { return \"\\n\"; },\n      peg$c267 = \"\\\\r\",\n      peg$c268 = peg$literalExpectation(\"\\\\r\", false),\n      peg$c269 = function() { return \"\\r\"; },\n      peg$c270 = \"\\\\t\",\n      peg$c271 = peg$literalExpectation(\"\\\\t\", false),\n      peg$c272 = function() { return \"\\t\"; },\n      peg$c273 = \"\\\\u\",\n      peg$c274 = peg$literalExpectation(\"\\\\u\", false),\n      peg$c275 = function(h1, h2, h3, h4) {\n            return String.fromCharCode(parseInt(\"0x\" + h1 + h2 + h3 + h4));\n          },\n      peg$c276 = \"\\\\\",\n      peg$c277 = peg$literalExpectation(\"\\\\\", false),\n      peg$c278 = /^[\\n\\r]/,\n      peg$c279 = peg$classExpectation([\"\\n\", \"\\r\"], false, false),\n      peg$c280 = function(n) {\n            if (n && n.type === 'bigint') return n\n            return { type: 'number', value: n };\n          },\n      peg$c281 = function(int_, frac, exp) {\n          const numStr = int_ + frac + exp\n          return {\n            type: 'bigint',\n            value: numStr\n          }\n        },\n      peg$c282 = function(int_, frac) {\n          const numStr = int_ + frac\n          if (isBigInt(int_)) return {\n            type: 'bigint',\n            value: numStr\n          }\n          return parseFloat(numStr);\n        },\n      peg$c283 = function(int_, exp) {\n          const numStr = int_ + exp\n          return {\n            type: 'bigint',\n            value: numStr\n          }\n        },\n      peg$c284 = function(int_) {\n          if (isBigInt(int_)) return {\n            type: 'bigint',\n            value: int_\n          }\n          return parseFloat(int_);\n        },\n      peg$c285 = function(op, digits) { return \"-\" + digits; },\n      peg$c286 = function(op, digit) { return \"-\" + digit; },\n      peg$c287 = \".\",\n      peg$c288 = peg$literalExpectation(\".\", false),\n      peg$c289 = function(digits) { return \".\" + digits; },\n      peg$c290 = function(e, digits) { return e + digits; },\n      peg$c291 = function(digits) { return digits.join(\"\"); },\n      peg$c292 = /^[0-9]/,\n      peg$c293 = peg$classExpectation([[\"0\", \"9\"]], false, false),\n      peg$c294 = /^[0-9a-fA-F]/,\n      peg$c295 = peg$classExpectation([[\"0\", \"9\"], [\"a\", \"f\"], [\"A\", \"F\"]], false, false),\n      peg$c296 = /^[eE]/,\n      peg$c297 = peg$classExpectation([\"e\", \"E\"], false, false),\n      peg$c298 = /^[+\\-]/,\n      peg$c299 = peg$classExpectation([\"+\", \"-\"], false, false),\n      peg$c300 = function(e, sign) { return e + (sign !== null ? sign: ''); },\n      peg$c301 = \"null\",\n      peg$c302 = peg$literalExpectation(\"NULL\", true),\n      peg$c303 = \"default\",\n      peg$c304 = peg$literalExpectation(\"DEFAULT\", true),\n      peg$c305 = \"not null\",\n      peg$c306 = peg$literalExpectation(\"NOT NULL\", true),\n      peg$c307 = \"true\",\n      peg$c308 = peg$literalExpectation(\"TRUE\", true),\n      peg$c309 = \"to\",\n      peg$c310 = peg$literalExpectation(\"TO\", true),\n      peg$c311 = \"false\",\n      peg$c312 = peg$literalExpectation(\"FALSE\", true),\n      peg$c313 = \"drop\",\n      peg$c314 = peg$literalExpectation(\"DROP\", true),\n      peg$c315 = function() { return 'DROP'; },\n      peg$c316 = \"use\",\n      peg$c317 = peg$literalExpectation(\"USE\", true),\n      peg$c318 = \"select\",\n      peg$c319 = peg$literalExpectation(\"SELECT\", true),\n      peg$c320 = \"if not exists\",\n      peg$c321 = peg$literalExpectation(\"IF NOT EXISTS\", true),\n      peg$c322 = \"RECURSIVE\",\n      peg$c323 = peg$literalExpectation(\"RECURSIVE\", false),\n      peg$c324 = \"ignore\",\n      peg$c325 = peg$literalExpectation(\"IGNORE\", true),\n      peg$c326 = \"explain\",\n      peg$c327 = peg$literalExpectation(\"EXPLAIN\", true),\n      peg$c328 = \"partition\",\n      peg$c329 = peg$literalExpectation(\"PARTITION\", true),\n      peg$c330 = function() { return 'PARTITION' },\n      peg$c331 = \"into\",\n      peg$c332 = peg$literalExpectation(\"INTO\", true),\n      peg$c333 = \"from\",\n      peg$c334 = peg$literalExpectation(\"FROM\", true),\n      peg$c335 = \"set\",\n      peg$c336 = peg$literalExpectation(\"SET\", true),\n      peg$c337 = \"unlock\",\n      peg$c338 = peg$literalExpectation(\"UNLOCK\", true),\n      peg$c339 = \"lock\",\n      peg$c340 = peg$literalExpectation(\"LOCK\", true),\n      peg$c341 = \"table\",\n      peg$c342 = peg$literalExpectation(\"TABLE\", true),\n      peg$c343 = function() { return 'TABLE'; },\n      peg$c344 = \"tables\",\n      peg$c345 = peg$literalExpectation(\"TABLES\", true),\n      peg$c346 = function() { return 'TABLES'; },\n      peg$c347 = \"collate\",\n      peg$c348 = peg$literalExpectation(\"COLLATE\", true),\n      peg$c349 = function() { return 'COLLATE'; },\n      peg$c350 = \"on\",\n      peg$c351 = peg$literalExpectation(\"ON\", true),\n      peg$c352 = \"left\",\n      peg$c353 = peg$literalExpectation(\"LEFT\", true),\n      peg$c354 = \"right\",\n      peg$c355 = peg$literalExpectation(\"RIGHT\", true),\n      peg$c356 = \"full\",\n      peg$c357 = peg$literalExpectation(\"FULL\", true),\n      peg$c358 = \"inner\",\n      peg$c359 = peg$literalExpectation(\"INNER\", true),\n      peg$c360 = \"cross\",\n      peg$c361 = peg$literalExpectation(\"CROSS\", true),\n      peg$c362 = \"join\",\n      peg$c363 = peg$literalExpectation(\"JOIN\", true),\n      peg$c364 = \"outer\",\n      peg$c365 = peg$literalExpectation(\"OUTER\", true),\n      peg$c366 = \"over\",\n      peg$c367 = peg$literalExpectation(\"OVER\", true),\n      peg$c368 = \"union\",\n      peg$c369 = peg$literalExpectation(\"UNION\", true),\n      peg$c370 = \"value\",\n      peg$c371 = peg$literalExpectation(\"VALUE\", true),\n      peg$c372 = function() { return 'VALUE' },\n      peg$c373 = \"values\",\n      peg$c374 = peg$literalExpectation(\"VALUES\", true),\n      peg$c375 = \"using\",\n      peg$c376 = peg$literalExpectation(\"USING\", true),\n      peg$c377 = \"where\",\n      peg$c378 = peg$literalExpectation(\"WHERE\", true),\n      peg$c379 = \"with\",\n      peg$c380 = peg$literalExpectation(\"WITH\", true),\n      peg$c381 = \"group\",\n      peg$c382 = peg$literalExpectation(\"GROUP\", true),\n      peg$c383 = \"by\",\n      peg$c384 = peg$literalExpectation(\"BY\", true),\n      peg$c385 = \"order\",\n      peg$c386 = peg$literalExpectation(\"ORDER\", true),\n      peg$c387 = \"having\",\n      peg$c388 = peg$literalExpectation(\"HAVING\", true),\n      peg$c389 = \"window\",\n      peg$c390 = peg$literalExpectation(\"WINDOW\", true),\n      peg$c391 = \"ordinal\",\n      peg$c392 = peg$literalExpectation(\"ORDINAL\", true),\n      peg$c393 = function() { return 'ORDINAL' },\n      peg$c394 = \"limit\",\n      peg$c395 = peg$literalExpectation(\"LIMIT\", true),\n      peg$c396 = \"offset\",\n      peg$c397 = peg$literalExpectation(\"OFFSET\", true),\n      peg$c398 = function() { return 'OFFSET'; },\n      peg$c399 = \"asc\",\n      peg$c400 = peg$literalExpectation(\"ASC\", true),\n      peg$c401 = function() { return 'ASC'; },\n      peg$c402 = \"desc\",\n      peg$c403 = peg$literalExpectation(\"DESC\", true),\n      peg$c404 = function() { return 'DESC'; },\n      peg$c405 = \"all\",\n      peg$c406 = peg$literalExpectation(\"ALL\", true),\n      peg$c407 = function() { return 'ALL'; },\n      peg$c408 = \"distinct\",\n      peg$c409 = peg$literalExpectation(\"DISTINCT\", true),\n      peg$c410 = function() { return 'DISTINCT';},\n      peg$c411 = \"between\",\n      peg$c412 = peg$literalExpectation(\"BETWEEN\", true),\n      peg$c413 = function() { return 'BETWEEN'; },\n      peg$c414 = \"in\",\n      peg$c415 = peg$literalExpectation(\"IN\", true),\n      peg$c416 = function() { return 'IN'; },\n      peg$c417 = \"is\",\n      peg$c418 = peg$literalExpectation(\"IS\", true),\n      peg$c419 = function() { return 'IS'; },\n      peg$c420 = \"like\",\n      peg$c421 = peg$literalExpectation(\"LIKE\", true),\n      peg$c422 = function() { return 'LIKE'; },\n      peg$c423 = \"exists\",\n      peg$c424 = peg$literalExpectation(\"EXISTS\", true),\n      peg$c425 = function() { return 'EXISTS'; },\n      peg$c426 = \"not\",\n      peg$c427 = peg$literalExpectation(\"NOT\", true),\n      peg$c428 = function() { return 'NOT'; },\n      peg$c429 = \"and\",\n      peg$c430 = peg$literalExpectation(\"AND\", true),\n      peg$c431 = function() { return 'AND'; },\n      peg$c432 = \"or\",\n      peg$c433 = peg$literalExpectation(\"OR\", true),\n      peg$c434 = function() { return 'OR'; },\n      peg$c435 = \"count\",\n      peg$c436 = peg$literalExpectation(\"COUNT\", true),\n      peg$c437 = function() { return 'COUNT'; },\n      peg$c438 = \"max\",\n      peg$c439 = peg$literalExpectation(\"MAX\", true),\n      peg$c440 = function() { return 'MAX'; },\n      peg$c441 = \"min\",\n      peg$c442 = peg$literalExpectation(\"MIN\", true),\n      peg$c443 = function() { return 'MIN'; },\n      peg$c444 = \"sum\",\n      peg$c445 = peg$literalExpectation(\"SUM\", true),\n      peg$c446 = function() { return 'SUM'; },\n      peg$c447 = \"avg\",\n      peg$c448 = peg$literalExpectation(\"AVG\", true),\n      peg$c449 = function() { return 'AVG'; },\n      peg$c450 = \"extract\",\n      peg$c451 = peg$literalExpectation(\"EXTRACT\", true),\n      peg$c452 = function() { return 'EXTRACT'; },\n      peg$c453 = \"call\",\n      peg$c454 = peg$literalExpectation(\"CALL\", true),\n      peg$c455 = function() { return 'CALL'; },\n      peg$c456 = \"case\",\n      peg$c457 = peg$literalExpectation(\"CASE\", true),\n      peg$c458 = \"when\",\n      peg$c459 = peg$literalExpectation(\"WHEN\", true),\n      peg$c460 = \"then\",\n      peg$c461 = peg$literalExpectation(\"THEN\", true),\n      peg$c462 = \"else\",\n      peg$c463 = peg$literalExpectation(\"ELSE\", true),\n      peg$c464 = \"end\",\n      peg$c465 = peg$literalExpectation(\"END\", true),\n      peg$c466 = \"cast\",\n      peg$c467 = peg$literalExpectation(\"CAST\", true),\n      peg$c468 = \"array\",\n      peg$c469 = peg$literalExpectation(\"ARRAY\", true),\n      peg$c470 = function() { return 'ARRAY'; },\n      peg$c471 = \"bytes\",\n      peg$c472 = peg$literalExpectation(\"BYTES\", true),\n      peg$c473 = function() { return 'BYTES'; },\n      peg$c474 = \"bool\",\n      peg$c475 = peg$literalExpectation(\"BOOL\", true),\n      peg$c476 = function() { return 'BOOL'; },\n      peg$c477 = \"char\",\n      peg$c478 = peg$literalExpectation(\"CHAR\", true),\n      peg$c479 = function() { return 'CHAR'; },\n      peg$c480 = \"geography\",\n      peg$c481 = peg$literalExpectation(\"GEOGRAPHY\", true),\n      peg$c482 = function() { return 'GEOGRAPHY'; },\n      peg$c483 = \"varchar\",\n      peg$c484 = peg$literalExpectation(\"VARCHAR\", true),\n      peg$c485 = function() { return 'VARCHAR';},\n      peg$c486 = \"numeric\",\n      peg$c487 = peg$literalExpectation(\"NUMERIC\", true),\n      peg$c488 = function() { return 'NUMERIC'; },\n      peg$c489 = \"decimal\",\n      peg$c490 = peg$literalExpectation(\"DECIMAL\", true),\n      peg$c491 = function() { return 'DECIMAL'; },\n      peg$c492 = \"signed\",\n      peg$c493 = peg$literalExpectation(\"SIGNED\", true),\n      peg$c494 = function() { return 'SIGNED'; },\n      peg$c495 = \"unsigned\",\n      peg$c496 = peg$literalExpectation(\"UNSIGNED\", true),\n      peg$c497 = function() { return 'UNSIGNED'; },\n      peg$c498 = \"int64\",\n      peg$c499 = peg$literalExpectation(\"INT64\", true),\n      peg$c500 = function() { return 'INT64'; },\n      peg$c501 = \"zerofill\",\n      peg$c502 = peg$literalExpectation(\"ZEROFILL\", true),\n      peg$c503 = function() { return 'ZEROFILL'; },\n      peg$c504 = \"integer\",\n      peg$c505 = peg$literalExpectation(\"INTEGER\", true),\n      peg$c506 = function() { return 'INTEGER'; },\n      peg$c507 = \"json\",\n      peg$c508 = peg$literalExpectation(\"JSON\", true),\n      peg$c509 = function() { return 'JSON'; },\n      peg$c510 = \"smallint\",\n      peg$c511 = peg$literalExpectation(\"SMALLINT\", true),\n      peg$c512 = function() { return 'SMALLINT'; },\n      peg$c513 = \"string\",\n      peg$c514 = peg$literalExpectation(\"STRING\", true),\n      peg$c515 = function() { return 'STRING'; },\n      peg$c516 = \"struct\",\n      peg$c517 = peg$literalExpectation(\"STRUCT\", true),\n      peg$c518 = function() { return 'STRUCT'; },\n      peg$c519 = \"tinyint\",\n      peg$c520 = peg$literalExpectation(\"TINYINT\", true),\n      peg$c521 = function() { return 'TINYINT'; },\n      peg$c522 = \"tinytext\",\n      peg$c523 = peg$literalExpectation(\"TINYTEXT\", true),\n      peg$c524 = function() { return 'TINYTEXT'; },\n      peg$c525 = \"text\",\n      peg$c526 = peg$literalExpectation(\"TEXT\", true),\n      peg$c527 = function() { return 'TEXT'; },\n      peg$c528 = \"mediumtext\",\n      peg$c529 = peg$literalExpectation(\"MEDIUMTEXT\", true),\n      peg$c530 = function() { return 'MEDIUMTEXT'; },\n      peg$c531 = \"longtext\",\n      peg$c532 = peg$literalExpectation(\"LONGTEXT\", true),\n      peg$c533 = function() { return 'LONGTEXT'; },\n      peg$c534 = \"bigint\",\n      peg$c535 = peg$literalExpectation(\"BIGINT\", true),\n      peg$c536 = function() { return 'BIGINT'; },\n      peg$c537 = \"float64\",\n      peg$c538 = peg$literalExpectation(\"FLOAT64\", true),\n      peg$c539 = function() { return 'FLOAT64'; },\n      peg$c540 = \"double\",\n      peg$c541 = peg$literalExpectation(\"DOUBLE\", true),\n      peg$c542 = function() { return 'DOUBLE'; },\n      peg$c543 = \"date\",\n      peg$c544 = peg$literalExpectation(\"DATE\", true),\n      peg$c545 = function() { return 'DATE'; },\n      peg$c546 = \"datetime\",\n      peg$c547 = peg$literalExpectation(\"DATETIME\", true),\n      peg$c548 = function() { return 'DATETIME'; },\n      peg$c549 = \"time\",\n      peg$c550 = peg$literalExpectation(\"TIME\", true),\n      peg$c551 = function() { return 'TIME'; },\n      peg$c552 = \"timestamp\",\n      peg$c553 = peg$literalExpectation(\"TIMESTAMP\", true),\n      peg$c554 = function() { return 'TIMESTAMP'; },\n      peg$c555 = \"truncate\",\n      peg$c556 = peg$literalExpectation(\"TRUNCATE\", true),\n      peg$c557 = function() { return 'TRUNCATE'; },\n      peg$c558 = \"user\",\n      peg$c559 = peg$literalExpectation(\"USER\", true),\n      peg$c560 = function() { return 'USER'; },\n      peg$c561 = \"current_date\",\n      peg$c562 = peg$literalExpectation(\"CURRENT_DATE\", true),\n      peg$c563 = function() { return 'CURRENT_DATE'; },\n      peg$c564 = \"adddate\",\n      peg$c565 = peg$literalExpectation(\"ADDDATE\", true),\n      peg$c566 = function() { return 'ADDDATE'; },\n      peg$c567 = \"interval\",\n      peg$c568 = peg$literalExpectation(\"INTERVAL\", true),\n      peg$c569 = function() { return 'INTERVAL'; },\n      peg$c570 = function() { return 'YEAR'; },\n      peg$c571 = function() { return 'MONTH'; },\n      peg$c572 = function() { return 'DAY'; },\n      peg$c573 = function() { return 'HOUR'; },\n      peg$c574 = function() { return 'MINUTE'; },\n      peg$c575 = function() { return 'SECOND'; },\n      peg$c576 = \"current_time\",\n      peg$c577 = peg$literalExpectation(\"CURRENT_TIME\", true),\n      peg$c578 = function() { return 'CURRENT_TIME'; },\n      peg$c579 = \"current_timestamp\",\n      peg$c580 = peg$literalExpectation(\"CURRENT_TIMESTAMP\", true),\n      peg$c581 = function() { return 'CURRENT_TIMESTAMP'; },\n      peg$c582 = \"global\",\n      peg$c583 = peg$literalExpectation(\"GLOBAL\", true),\n      peg$c584 = function() { return 'GLOBAL'; },\n      peg$c585 = \"session\",\n      peg$c586 = peg$literalExpectation(\"SESSION\", true),\n      peg$c587 = function() { return 'SESSION'; },\n      peg$c588 = \"local\",\n      peg$c589 = peg$literalExpectation(\"LOCAL\", true),\n      peg$c590 = function() { return 'LOCAL'; },\n      peg$c591 = \"persist\",\n      peg$c592 = peg$literalExpectation(\"PERSIST\", true),\n      peg$c593 = function() { return 'PERSIST'; },\n      peg$c594 = \"persist_only\",\n      peg$c595 = peg$literalExpectation(\"PERSIST_ONLY\", true),\n      peg$c596 = function() { return 'PERSIST_ONLY'; },\n      peg$c597 = \"add\",\n      peg$c598 = peg$literalExpectation(\"ADD\", true),\n      peg$c599 = function() { return 'ADD'; },\n      peg$c600 = \"column\",\n      peg$c601 = peg$literalExpectation(\"COLUMN\", true),\n      peg$c602 = function() { return 'COLUMN'; },\n      peg$c603 = \"index\",\n      peg$c604 = peg$literalExpectation(\"INDEX\", true),\n      peg$c605 = function() { return 'INDEX'; },\n      peg$c606 = \"key\",\n      peg$c607 = peg$literalExpectation(\"KEY\", true),\n      peg$c608 = function() { return 'KEY'; },\n      peg$c609 = \"fulltext\",\n      peg$c610 = peg$literalExpectation(\"FULLTEXT\", true),\n      peg$c611 = function() { return 'FULLTEXT'; },\n      peg$c612 = \"unique\",\n      peg$c613 = peg$literalExpectation(\"UNIQUE\", true),\n      peg$c614 = function() { return 'UNIQUE'; },\n      peg$c615 = \"comment\",\n      peg$c616 = peg$literalExpectation(\"COMMENT\", true),\n      peg$c617 = function() { return 'COMMENT'; },\n      peg$c618 = \"constraint\",\n      peg$c619 = peg$literalExpectation(\"CONSTRAINT\", true),\n      peg$c620 = function() { return 'CONSTRAINT'; },\n      peg$c621 = \"references\",\n      peg$c622 = peg$literalExpectation(\"REFERENCES\", true),\n      peg$c623 = function() { return 'REFERENCES'; },\n      peg$c624 = \",\",\n      peg$c625 = peg$literalExpectation(\",\", false),\n      peg$c626 = \"[\",\n      peg$c627 = peg$literalExpectation(\"[\", false),\n      peg$c628 = \"]\",\n      peg$c629 = peg$literalExpectation(\"]\", false),\n      peg$c630 = \";\",\n      peg$c631 = peg$literalExpectation(\";\", false),\n      peg$c632 = \"||\",\n      peg$c633 = peg$literalExpectation(\"||\", false),\n      peg$c634 = \"&&\",\n      peg$c635 = peg$literalExpectation(\"&&\", false),\n      peg$c636 = \"/*\",\n      peg$c637 = peg$literalExpectation(\"/*\", false),\n      peg$c638 = \"*/\",\n      peg$c639 = peg$literalExpectation(\"*/\", false),\n      peg$c640 = \"--\",\n      peg$c641 = peg$literalExpectation(\"--\", false),\n      peg$c642 = \"#\",\n      peg$c643 = peg$literalExpectation(\"#\", false),\n      peg$c644 = peg$anyExpectation(),\n      peg$c645 = /^[ \\t\\n\\r]/,\n      peg$c646 = peg$classExpectation([\" \", \"\\t\", \"\\n\", \"\\r\"], false, false),\n      peg$c647 = function(n) { return DATA_TYPES[n.toUpperCase()] === true; },\n      peg$c648 = function(n) {\n            return n\n          },\n      peg$c649 = function(n, t) {\n          return {\n            field_name: n,\n            field_type: t,\n          }\n        },\n      peg$c650 = function(t) { return { dataType: t }; },\n      peg$c651 = function(t, l) { return { dataType: t, length: parseInt(l.join(''), 10) }; },\n      peg$c652 = function(t, a) {\n          return {\n            dataType: t,\n            definition: a,\n            anglebracket: true\n          }\n        },\n\n      peg$currPos          = 0,\n      peg$savedPos         = 0,\n      peg$posDetailsCache  = [{ line: 1, column: 1 }],\n      peg$maxFailPos       = 0,\n      peg$maxFailExpected  = [],\n      peg$silentFails      = 0,\n\n      peg$result;\n\n  if (\"startRule\" in options) {\n    if (!(options.startRule in peg$startRuleFunctions)) {\n      throw new Error(\"Can't start parsing from rule \\\"\" + options.startRule + \"\\\".\");\n    }\n\n    peg$startRuleFunction = peg$startRuleFunctions[options.startRule];\n  }\n\n  function text() {\n    return input.substring(peg$savedPos, peg$currPos);\n  }\n\n  function location() {\n    return peg$computeLocation(peg$savedPos, peg$currPos);\n  }\n\n  function expected(description, location) {\n    location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)\n\n    throw peg$buildStructuredError(\n      [peg$otherExpectation(description)],\n      input.substring(peg$savedPos, peg$currPos),\n      location\n    );\n  }\n\n  function error(message, location) {\n    location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)\n\n    throw peg$buildSimpleError(message, location);\n  }\n\n  function peg$literalExpectation(text, ignoreCase) {\n    return { type: \"literal\", text: text, ignoreCase: ignoreCase };\n  }\n\n  function peg$classExpectation(parts, inverted, ignoreCase) {\n    return { type: \"class\", parts: parts, inverted: inverted, ignoreCase: ignoreCase };\n  }\n\n  function peg$anyExpectation() {\n    return { type: \"any\" };\n  }\n\n  function peg$endExpectation() {\n    return { type: \"end\" };\n  }\n\n  function peg$otherExpectation(description) {\n    return { type: \"other\", description: description };\n  }\n\n  function peg$computePosDetails(pos) {\n    var details = peg$posDetailsCache[pos], p;\n\n    if (details) {\n      return details;\n    } else {\n      p = pos - 1;\n      while (!peg$posDetailsCache[p]) {\n        p--;\n      }\n\n      details = peg$posDetailsCache[p];\n      details = {\n        line:   details.line,\n        column: details.column\n      };\n\n      while (p < pos) {\n        if (input.charCodeAt(p) === 10) {\n          details.line++;\n          details.column = 1;\n        } else {\n          details.column++;\n        }\n\n        p++;\n      }\n\n      peg$posDetailsCache[pos] = details;\n      return details;\n    }\n  }\n\n  function peg$computeLocation(startPos, endPos) {\n    var startPosDetails = peg$computePosDetails(startPos),\n        endPosDetails   = peg$computePosDetails(endPos);\n\n    return {\n      start: {\n        offset: startPos,\n        line:   startPosDetails.line,\n        column: startPosDetails.column\n      },\n      end: {\n        offset: endPos,\n        line:   endPosDetails.line,\n        column: endPosDetails.column\n      }\n    };\n  }\n\n  function peg$fail(expected) {\n    if (peg$currPos < peg$maxFailPos) { return; }\n\n    if (peg$currPos > peg$maxFailPos) {\n      peg$maxFailPos = peg$currPos;\n      peg$maxFailExpected = [];\n    }\n\n    peg$maxFailExpected.push(expected);\n  }\n\n  function peg$buildSimpleError(message, location) {\n    return new peg$SyntaxError(message, null, null, location);\n  }\n\n  function peg$buildStructuredError(expected, found, location) {\n    return new peg$SyntaxError(\n      peg$SyntaxError.buildMessage(expected, found),\n      expected,\n      found,\n      location\n    );\n  }\n\n  function peg$parsestart() {\n    var s0, s1, s2;\n\n    s0 = peg$currPos;\n    s1 = peg$parse__();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parsemultiple_stmt();\n      if (s2 === peg$FAILED) {\n        s2 = peg$parsequery_statement();\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c0(s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsemultiple_stmt() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsequery_statement();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseSEMICOLON();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parsequery_statement();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      if (s3 !== peg$FAILED) {\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          s3 = peg$currPos;\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseSEMICOLON();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parsequery_statement();\n                if (s7 !== peg$FAILED) {\n                  s4 = [s4, s5, s6, s7];\n                  s3 = s4;\n                } else {\n                  peg$currPos = s3;\n                  s3 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        }\n      } else {\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c1(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsequery_statement() {\n    var s0, s1, s2, s3, s4, s5, s6;\n\n    s0 = peg$parsequery_expr();\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$currPos;\n      if (input.charCodeAt(peg$currPos) === 40) {\n        s2 = peg$c2;\n        peg$currPos++;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c3); }\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parse__();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parseselect_stmt();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parse__();\n            if (s5 !== peg$FAILED) {\n              if (input.charCodeAt(peg$currPos) === 41) {\n                s6 = peg$c4;\n                peg$currPos++;\n              } else {\n                s6 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c5); }\n              }\n              if (s6 !== peg$FAILED) {\n                s2 = [s2, s3, s4, s5, s6];\n                s1 = s2;\n              } else {\n                peg$currPos = s1;\n                s1 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s1;\n              s1 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s1;\n            s1 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c6(s1);\n      }\n      s0 = s1;\n    }\n\n    return s0;\n  }\n\n  function peg$parsequery_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n    s0 = peg$currPos;\n    s1 = peg$parsewith_clause();\n    if (s1 === peg$FAILED) {\n      s1 = null;\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseunion_stmt();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseorder_by_clause();\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parselimit_clause();\n                if (s7 === peg$FAILED) {\n                  s7 = null;\n                }\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseSEMICOLON();\n                    if (s9 === peg$FAILED) {\n                      s9 = null;\n                    }\n                    if (s9 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s1 = peg$c7(s1, s3, s5, s7, s9);\n                      s0 = s1;\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseset_op() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_UNION();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_ALL();\n        if (s3 === peg$FAILED) {\n          s3 = peg$parseKW_DISTINCT();\n        }\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c8(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      if (input.substr(peg$currPos, 9).toLowerCase() === peg$c9) {\n        s1 = input.substr(peg$currPos, 9);\n        peg$currPos += 9;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c10); }\n      }\n      if (s1 === peg$FAILED) {\n        if (input.substr(peg$currPos, 6).toLowerCase() === peg$c11) {\n          s1 = input.substr(peg$currPos, 6);\n          peg$currPos += 6;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c12); }\n        }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseKW_DISTINCT();\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c13(s1, s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseunion_stmt() {\n    var s0, s1, s2, s3, s4, s5, s6;\n\n    s0 = peg$parseunion_stmt_nake();\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$currPos;\n      if (input.charCodeAt(peg$currPos) === 40) {\n        s2 = peg$c2;\n        peg$currPos++;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c3); }\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parse__();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parseunion_stmt_nake();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parse__();\n            if (s5 !== peg$FAILED) {\n              if (input.charCodeAt(peg$currPos) === 41) {\n                s6 = peg$c4;\n                peg$currPos++;\n              } else {\n                s6 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c5); }\n              }\n              if (s6 !== peg$FAILED) {\n                s2 = [s2, s3, s4, s5, s6];\n                s1 = s2;\n              } else {\n                peg$currPos = s1;\n                s1 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s1;\n              s1 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s1;\n            s1 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c14(s1);\n      }\n      s0 = s1;\n    }\n\n    return s0;\n  }\n\n  function peg$parseunion_stmt_nake() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseselect_stmt();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseset_op();\n        if (s5 === peg$FAILED) {\n          s5 = null;\n        }\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseselect_stmt();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseset_op();\n          if (s5 === peg$FAILED) {\n            s5 = null;\n          }\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseselect_stmt();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c15(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseselect_stmt() {\n    var s0, s1, s2, s3, s4, s5, s6;\n\n    s0 = peg$parseselect_stmt_nake();\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$currPos;\n      if (input.charCodeAt(peg$currPos) === 40) {\n        s2 = peg$c2;\n        peg$currPos++;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c3); }\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parse__();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parseselect_stmt();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parse__();\n            if (s5 !== peg$FAILED) {\n              if (input.charCodeAt(peg$currPos) === 41) {\n                s6 = peg$c4;\n                peg$currPos++;\n              } else {\n                s6 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c5); }\n              }\n              if (s6 !== peg$FAILED) {\n                s2 = [s2, s3, s4, s5, s6];\n                s1 = s2;\n              } else {\n                peg$currPos = s1;\n                s1 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s1;\n              s1 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s1;\n            s1 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c16(s1);\n      }\n      s0 = s1;\n    }\n\n    return s0;\n  }\n\n  function peg$parsewith_clause() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_WITH();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsecte_definition();\n        if (s3 !== peg$FAILED) {\n          s4 = [];\n          s5 = peg$currPos;\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseCOMMA();\n            if (s7 !== peg$FAILED) {\n              s8 = peg$parse__();\n              if (s8 !== peg$FAILED) {\n                s9 = peg$parsecte_definition();\n                if (s9 !== peg$FAILED) {\n                  s6 = [s6, s7, s8, s9];\n                  s5 = s6;\n                } else {\n                  peg$currPos = s5;\n                  s5 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s5;\n                s5 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s5;\n              s5 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s5;\n            s5 = peg$FAILED;\n          }\n          while (s5 !== peg$FAILED) {\n            s4.push(s5);\n            s5 = peg$currPos;\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseCOMMA();\n              if (s7 !== peg$FAILED) {\n                s8 = peg$parse__();\n                if (s8 !== peg$FAILED) {\n                  s9 = peg$parsecte_definition();\n                  if (s9 !== peg$FAILED) {\n                    s6 = [s6, s7, s8, s9];\n                    s5 = s6;\n                  } else {\n                    peg$currPos = s5;\n                    s5 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s5;\n                  s5 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s5;\n                s5 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s5;\n              s5 = peg$FAILED;\n            }\n          }\n          if (s4 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c17(s3, s4);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecte_definition() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n    s0 = peg$currPos;\n    s1 = peg$parseliteral_string();\n    if (s1 === peg$FAILED) {\n      s1 = peg$parseident_name();\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_AS();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseLPAREN();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseunion_stmt();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseRPAREN();\n                    if (s9 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s1 = peg$c18(s1, s7);\n                      s0 = s1;\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseselect_stmt_nake() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19, s20, s21, s22, s23;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_SELECT();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse___();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsestruct_value();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseKW_ALL();\n            if (s5 === peg$FAILED) {\n              s5 = peg$parseKW_DISTINCT();\n            }\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parsecolumn_clause();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parsefrom_clause();\n                    if (s9 === peg$FAILED) {\n                      s9 = null;\n                    }\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse__();\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parsefor_sys_time_as_of();\n                        if (s11 === peg$FAILED) {\n                          s11 = null;\n                        }\n                        if (s11 !== peg$FAILED) {\n                          s12 = peg$parse__();\n                          if (s12 !== peg$FAILED) {\n                            s13 = peg$parsewhere_clause();\n                            if (s13 === peg$FAILED) {\n                              s13 = null;\n                            }\n                            if (s13 !== peg$FAILED) {\n                              s14 = peg$parse__();\n                              if (s14 !== peg$FAILED) {\n                                s15 = peg$parsegroup_by_clause();\n                                if (s15 === peg$FAILED) {\n                                  s15 = null;\n                                }\n                                if (s15 !== peg$FAILED) {\n                                  s16 = peg$parse__();\n                                  if (s16 !== peg$FAILED) {\n                                    s17 = peg$parsehaving_clause();\n                                    if (s17 === peg$FAILED) {\n                                      s17 = null;\n                                    }\n                                    if (s17 !== peg$FAILED) {\n                                      s18 = peg$parse__();\n                                      if (s18 !== peg$FAILED) {\n                                        s19 = peg$parseorder_by_clause();\n                                        if (s19 === peg$FAILED) {\n                                          s19 = null;\n                                        }\n                                        if (s19 !== peg$FAILED) {\n                                          s20 = peg$parse__();\n                                          if (s20 !== peg$FAILED) {\n                                            s21 = peg$parselimit_clause();\n                                            if (s21 === peg$FAILED) {\n                                              s21 = null;\n                                            }\n                                            if (s21 !== peg$FAILED) {\n                                              s22 = peg$parse__();\n                                              if (s22 !== peg$FAILED) {\n                                                s23 = peg$parsewindow_clause();\n                                                if (s23 === peg$FAILED) {\n                                                  s23 = null;\n                                                }\n                                                if (s23 !== peg$FAILED) {\n                                                  peg$savedPos = s0;\n                                                  s1 = peg$c19(s3, s5, s7, s9, s11, s13, s15, s17, s19, s21, s23);\n                                                  s0 = s1;\n                                                } else {\n                                                  peg$currPos = s0;\n                                                  s0 = peg$FAILED;\n                                                }\n                                              } else {\n                                                peg$currPos = s0;\n                                                s0 = peg$FAILED;\n                                              }\n                                            } else {\n                                              peg$currPos = s0;\n                                              s0 = peg$FAILED;\n                                            }\n                                          } else {\n                                            peg$currPos = s0;\n                                            s0 = peg$FAILED;\n                                          }\n                                        } else {\n                                          peg$currPos = s0;\n                                          s0 = peg$FAILED;\n                                        }\n                                      } else {\n                                        peg$currPos = s0;\n                                        s0 = peg$FAILED;\n                                      }\n                                    } else {\n                                      peg$currPos = s0;\n                                      s0 = peg$FAILED;\n                                    }\n                                  } else {\n                                    peg$currPos = s0;\n                                    s0 = peg$FAILED;\n                                  }\n                                } else {\n                                  peg$currPos = s0;\n                                  s0 = peg$FAILED;\n                                }\n                              } else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsefor_sys_time_as_of() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c20) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c21); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        if (input.substr(peg$currPos, 11).toLowerCase() === peg$c22) {\n          s3 = input.substr(peg$currPos, 11);\n          peg$currPos += 11;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c23); }\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            if (input.substr(peg$currPos, 2).toLowerCase() === peg$c24) {\n              s5 = input.substr(peg$currPos, 2);\n              peg$currPos += 2;\n            } else {\n              s5 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c25); }\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                if (input.substr(peg$currPos, 2).toLowerCase() === peg$c26) {\n                  s7 = input.substr(peg$currPos, 2);\n                  peg$currPos += 2;\n                } else {\n                  s7 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c27); }\n                }\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseexpr();\n                    if (s9 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s1 = peg$c28(s9);\n                      s0 = s1;\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsestruct_value() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_AS();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_STRUCT();\n        if (s3 === peg$FAILED) {\n          s3 = peg$parseKW_VALUE();\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c29(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseexpr_alias() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseexpr();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsealias_clause();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c30(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecolumn_clause() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n    s0 = peg$currPos;\n    s1 = peg$parseSTAR();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        if (input.substr(peg$currPos, 6).toLowerCase() === peg$c11) {\n          s3 = input.substr(peg$currPos, 6);\n          peg$currPos += 6;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c12); }\n        }\n        if (s3 === peg$FAILED) {\n          if (input.substr(peg$currPos, 7).toLowerCase() === peg$c31) {\n            s3 = input.substr(peg$currPos, 7);\n            peg$currPos += 7;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c32); }\n          }\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseLPAREN();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parsecolumns_list();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseRPAREN();\n                    if (s9 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s1 = peg$c33(s3, s7);\n                      s0 = s1;\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_ALL();\n      if (s1 === peg$FAILED) {\n        s1 = peg$currPos;\n        s2 = peg$parseSTAR();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$currPos;\n          peg$silentFails++;\n          s4 = peg$parseident_start();\n          peg$silentFails--;\n          if (s4 === peg$FAILED) {\n            s3 = void 0;\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n          if (s3 !== peg$FAILED) {\n            s2 = [s2, s3];\n            s1 = s2;\n          } else {\n            peg$currPos = s1;\n            s1 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n        if (s1 === peg$FAILED) {\n          s1 = peg$parseSTAR();\n        }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = [];\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parsecolumn_list_item();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          s3 = peg$currPos;\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseCOMMA();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parsecolumn_list_item();\n                if (s7 !== peg$FAILED) {\n                  s4 = [s4, s5, s6, s7];\n                  s3 = s4;\n                } else {\n                  peg$currPos = s3;\n                  s3 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        }\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parse__();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parseCOMMA();\n            if (s4 === peg$FAILED) {\n              s4 = null;\n            }\n            if (s4 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c34(s1, s2);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parsecolumns_list();\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parse__();\n          if (s2 !== peg$FAILED) {\n            s3 = peg$parseCOMMA();\n            if (s3 === peg$FAILED) {\n              s3 = null;\n            }\n            if (s3 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c35(s1);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsecolumns_list() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsecolumn_list_item();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseCOMMA();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parsecolumn_list_item();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parsecolumn_list_item();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c17(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecolumn_offset_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13;\n\n    s0 = peg$currPos;\n    s1 = peg$parseexpr();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLBRAKE();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseKW_OFFSET();\n            if (s5 === peg$FAILED) {\n              s5 = peg$parseKW_ORDINAL();\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseLPAREN();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseliteral_numeric();\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse__();\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parseRPAREN();\n                        if (s11 !== peg$FAILED) {\n                          s12 = peg$parse__();\n                          if (s12 !== peg$FAILED) {\n                            s13 = peg$parseRBRAKE();\n                            if (s13 !== peg$FAILED) {\n                              peg$savedPos = s0;\n                              s1 = peg$c36(s1, s5, s9);\n                              s0 = s1;\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecolumn_list_item() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseident();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseDOT();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$currPos;\n          s5 = peg$parsecolumn_offset_expr();\n          if (s5 === peg$FAILED) {\n            s5 = peg$parseident();\n          }\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseDOT();\n              if (s7 !== peg$FAILED) {\n                s5 = [s5, s6, s7];\n                s4 = s5;\n              } else {\n                peg$currPos = s4;\n                s4 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s4;\n              s4 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s4;\n            s4 = peg$FAILED;\n          }\n          if (s4 === peg$FAILED) {\n            s4 = null;\n          }\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parse__();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parseSTAR();\n              if (s6 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c37(s1, s4);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parsecolumn_offset_expr();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parsealias_clause();\n          if (s3 === peg$FAILED) {\n            s3 = null;\n          }\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c38(s1, s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseexpr_alias();\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsealias_clause() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_AS();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsealias_ident();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c39(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_AS();\n      if (s1 === peg$FAILED) {\n        s1 = null;\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseident();\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c39(s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsefrom_clause() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_FROM();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        if (input.substr(peg$currPos, 6).toLowerCase() === peg$c40) {\n          s3 = input.substr(peg$currPos, 6);\n          peg$currPos += 6;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c41); }\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseLPAREN();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseexpr();\n                if (s7 === peg$FAILED) {\n                  s7 = null;\n                }\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseRPAREN();\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse__();\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parsealias_clause();\n                        if (s11 === peg$FAILED) {\n                          s11 = null;\n                        }\n                        if (s11 !== peg$FAILED) {\n                          s12 = peg$parse__();\n                          if (s12 !== peg$FAILED) {\n                            s13 = peg$parsewith_offset();\n                            if (s13 === peg$FAILED) {\n                              s13 = null;\n                            }\n                            if (s13 !== peg$FAILED) {\n                              peg$savedPos = s0;\n                              s1 = peg$c42(s7, s11, s13);\n                              s0 = s1;\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_FROM();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parsetable_ref_list();\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c43(s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsewith_offset() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_WITH();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_OFFSET();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsealias_clause();\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c44(s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsetable_to_list() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsetable_to_item();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseCOMMA();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parsetable_to_item();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parsetable_to_item();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c17(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsetable_to_item() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parsetable_name();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_TO();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsetable_name();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c45(s1, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsetable_ref_list() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parsetable_base();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$parsetable_ref();\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$parsetable_ref();\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c46(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsetable_ref() {\n    var s0, s1, s2, s3, s4;\n\n    s0 = peg$currPos;\n    s1 = peg$parse__();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parseCOMMA();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parse__();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parsetable_base();\n          if (s4 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c47(s4);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parse__();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parsetable_join();\n        if (s2 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c47(s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsetable_join() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15;\n\n    s0 = peg$currPos;\n    s1 = peg$parsejoin_op();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsetable_base();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseKW_USING();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseLPAREN();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseident_name();\n                    if (s9 !== peg$FAILED) {\n                      s10 = [];\n                      s11 = peg$currPos;\n                      s12 = peg$parse__();\n                      if (s12 !== peg$FAILED) {\n                        s13 = peg$parseCOMMA();\n                        if (s13 !== peg$FAILED) {\n                          s14 = peg$parse__();\n                          if (s14 !== peg$FAILED) {\n                            s15 = peg$parseident_name();\n                            if (s15 !== peg$FAILED) {\n                              s12 = [s12, s13, s14, s15];\n                              s11 = s12;\n                            } else {\n                              peg$currPos = s11;\n                              s11 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s11;\n                            s11 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s11;\n                          s11 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s11;\n                        s11 = peg$FAILED;\n                      }\n                      while (s11 !== peg$FAILED) {\n                        s10.push(s11);\n                        s11 = peg$currPos;\n                        s12 = peg$parse__();\n                        if (s12 !== peg$FAILED) {\n                          s13 = peg$parseCOMMA();\n                          if (s13 !== peg$FAILED) {\n                            s14 = peg$parse__();\n                            if (s14 !== peg$FAILED) {\n                              s15 = peg$parseident_name();\n                              if (s15 !== peg$FAILED) {\n                                s12 = [s12, s13, s14, s15];\n                                s11 = s12;\n                              } else {\n                                peg$currPos = s11;\n                                s11 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s11;\n                              s11 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s11;\n                            s11 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s11;\n                          s11 = peg$FAILED;\n                        }\n                      }\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parse__();\n                        if (s11 !== peg$FAILED) {\n                          s12 = peg$parseRPAREN();\n                          if (s12 !== peg$FAILED) {\n                            peg$savedPos = s0;\n                            s1 = peg$c48(s1, s3, s9, s10);\n                            s0 = s1;\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parsejoin_op();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parsetable_base();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse__();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parseon_clause();\n              if (s5 === peg$FAILED) {\n                s5 = null;\n              }\n              if (s5 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c49(s1, s3, s5);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parsejoin_op();\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parse__();\n          if (s2 !== peg$FAILED) {\n            s3 = peg$parseLPAREN();\n            if (s3 !== peg$FAILED) {\n              s4 = peg$parse__();\n              if (s4 !== peg$FAILED) {\n                s5 = peg$parseunion_stmt();\n                if (s5 !== peg$FAILED) {\n                  s6 = peg$parse__();\n                  if (s6 !== peg$FAILED) {\n                    s7 = peg$parseRPAREN();\n                    if (s7 !== peg$FAILED) {\n                      s8 = peg$parse__();\n                      if (s8 !== peg$FAILED) {\n                        s9 = peg$parsealias_clause();\n                        if (s9 === peg$FAILED) {\n                          s9 = null;\n                        }\n                        if (s9 !== peg$FAILED) {\n                          s10 = peg$parse__();\n                          if (s10 !== peg$FAILED) {\n                            s11 = peg$parseon_clause();\n                            if (s11 === peg$FAILED) {\n                              s11 = null;\n                            }\n                            if (s11 !== peg$FAILED) {\n                              peg$savedPos = s0;\n                              s1 = peg$c50(s1, s5, s9, s11);\n                              s0 = s1;\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsetable_base() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsetable_name();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsealias_clause();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c51(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseLPAREN();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseunion_stmt();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse__();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parseRPAREN();\n              if (s5 !== peg$FAILED) {\n                s6 = peg$parse__();\n                if (s6 !== peg$FAILED) {\n                  s7 = peg$parsealias_clause();\n                  if (s7 === peg$FAILED) {\n                    s7 = null;\n                  }\n                  if (s7 !== peg$FAILED) {\n                    peg$savedPos = s0;\n                    s1 = peg$c52(s3, s7);\n                    s0 = s1;\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsejoin_op() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_LEFT();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_OUTER();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseKW_JOIN();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c53();\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_RIGHT();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseKW_OUTER();\n          if (s3 === peg$FAILED) {\n            s3 = null;\n          }\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse__();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parseKW_JOIN();\n              if (s5 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c54();\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parseKW_FULL();\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parse__();\n          if (s2 !== peg$FAILED) {\n            s3 = peg$parseKW_OUTER();\n            if (s3 === peg$FAILED) {\n              s3 = null;\n            }\n            if (s3 !== peg$FAILED) {\n              s4 = peg$parse__();\n              if (s4 !== peg$FAILED) {\n                s5 = peg$parseKW_JOIN();\n                if (s5 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c55();\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          s1 = peg$parseKW_CROSS();\n          if (s1 !== peg$FAILED) {\n            s2 = peg$parse__();\n            if (s2 !== peg$FAILED) {\n              s3 = peg$parseKW_JOIN();\n              if (s3 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c56(s1);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n          if (s0 === peg$FAILED) {\n            s0 = peg$currPos;\n            s1 = peg$parseKW_INNER();\n            if (s1 === peg$FAILED) {\n              s1 = null;\n            }\n            if (s1 !== peg$FAILED) {\n              s2 = peg$parse__();\n              if (s2 !== peg$FAILED) {\n                s3 = peg$parseKW_JOIN();\n                if (s3 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c57(s1);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsetable_name() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseident();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      s3 = peg$parse__();\n      if (s3 !== peg$FAILED) {\n        s4 = peg$parseDOT();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parse__();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parseident();\n            if (s6 !== peg$FAILED) {\n              s3 = [s3, s4, s5, s6];\n              s2 = s3;\n            } else {\n              peg$currPos = s2;\n              s2 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s2;\n            s2 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s2;\n          s2 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseDOT();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseident();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c58(s1, s2, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseident();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$currPos;\n        s3 = peg$parse__();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parseDOT();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parse__();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parseident();\n              if (s6 !== peg$FAILED) {\n                s3 = [s3, s4, s5, s6];\n                s2 = s3;\n              } else {\n                peg$currPos = s2;\n                s2 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s2;\n              s2 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s2;\n            s2 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s2;\n          s2 = peg$FAILED;\n        }\n        if (s2 === peg$FAILED) {\n          s2 = null;\n        }\n        if (s2 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c59(s1, s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseon_clause() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_ON();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseexpr();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c60(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsewhere_clause() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_WHERE();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseor_and_where_expr();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c60(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsegroup_by_clause() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_GROUP();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_BY();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseexpr_list();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c61(s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsehaving_clause() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_HAVING();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseexpr();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c60(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsewindow_clause() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_WINDOW();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsenamed_window_expr_list();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c62(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsenamed_window_expr_list() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsenamed_window_expr();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseCOMMA();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parsenamed_window_expr();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parsenamed_window_expr();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c17(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsenamed_window_expr() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseident_name();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_AS();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseas_window_specification();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c63(s1, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseas_window_specification() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseident_name();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c64(s1);\n    }\n    s0 = s1;\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseLPAREN();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parsewindow_specification();\n          if (s3 === peg$FAILED) {\n            s3 = null;\n          }\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse__();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parseRPAREN();\n              if (s5 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c65(s3);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsewindow_specification() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseident();\n    if (s1 === peg$FAILED) {\n      s1 = null;\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsepartition_by_clause();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseorder_by_clause();\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parsewindow_frame_clause();\n                if (s7 === peg$FAILED) {\n                  s7 = null;\n                }\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c66(s1, s3, s5, s7);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsewindow_frame_clause() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c67) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c68); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_BETWEEN();\n        if (s3 !== peg$FAILED) {\n          if (input.substr(peg$currPos, 9).toLowerCase() === peg$c69) {\n            s4 = input.substr(peg$currPos, 9);\n            peg$currPos += 9;\n          } else {\n            s4 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c70); }\n          }\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parse__();\n            if (s5 !== peg$FAILED) {\n              if (input.substr(peg$currPos, 9).toLowerCase() === peg$c71) {\n                s6 = input.substr(peg$currPos, 9);\n                peg$currPos += 9;\n              } else {\n                s6 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c72); }\n              }\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parse__();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parseKW_AND();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parse__();\n                    if (s9 !== peg$FAILED) {\n                      if (input.substr(peg$currPos, 7).toLowerCase() === peg$c73) {\n                        s10 = input.substr(peg$currPos, 7);\n                        peg$currPos += 7;\n                      } else {\n                        s10 = peg$FAILED;\n                        if (peg$silentFails === 0) { peg$fail(peg$c74); }\n                      }\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parse__();\n                        if (s11 !== peg$FAILED) {\n                          if (input.substr(peg$currPos, 3) === peg$c75) {\n                            s12 = peg$c75;\n                            peg$currPos += 3;\n                          } else {\n                            s12 = peg$FAILED;\n                            if (peg$silentFails === 0) { peg$fail(peg$c76); }\n                          }\n                          if (s12 !== peg$FAILED) {\n                            peg$savedPos = s0;\n                            s1 = peg$c77();\n                            s0 = s1;\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      if (input.substr(peg$currPos, 4).toLowerCase() === peg$c78) {\n        s1 = input.substr(peg$currPos, 4);\n        peg$currPos += 4;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c79); }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseKW_BETWEEN();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse__();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parseliteral_numeric();\n              if (s5 !== peg$FAILED) {\n                s6 = peg$parse__();\n                if (s6 !== peg$FAILED) {\n                  if (input.substr(peg$currPos, 9).toLowerCase() === peg$c71) {\n                    s7 = input.substr(peg$currPos, 9);\n                    peg$currPos += 9;\n                  } else {\n                    s7 = peg$FAILED;\n                    if (peg$silentFails === 0) { peg$fail(peg$c72); }\n                  }\n                  if (s7 !== peg$FAILED) {\n                    s8 = peg$parse__();\n                    if (s8 !== peg$FAILED) {\n                      s9 = peg$parseKW_AND();\n                      if (s9 !== peg$FAILED) {\n                        s10 = peg$parse__();\n                        if (s10 !== peg$FAILED) {\n                          s11 = peg$parseliteral_numeric();\n                          if (s11 !== peg$FAILED) {\n                            s12 = peg$parse__();\n                            if (s12 !== peg$FAILED) {\n                              if (input.substr(peg$currPos, 9).toLowerCase() === peg$c80) {\n                                s13 = input.substr(peg$currPos, 9);\n                                peg$currPos += 9;\n                              } else {\n                                s13 = peg$FAILED;\n                                if (peg$silentFails === 0) { peg$fail(peg$c81); }\n                              }\n                              if (s13 !== peg$FAILED) {\n                                peg$savedPos = s0;\n                                s1 = peg$c82(s5, s11);\n                                s0 = s1;\n                              } else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsepartition_by_clause() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_PARTITION();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_BY();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsecolumn_clause();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c83(s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseorder_by_clause() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_ORDER();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_BY();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseorder_by_list();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c43(s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseorder_by_list() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseorder_by_element();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseCOMMA();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseorder_by_element();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseorder_by_element();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c17(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseorder_by_element() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseexpr();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_DESC();\n        if (s3 === peg$FAILED) {\n          s3 = peg$parseKW_ASC();\n        }\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c84(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsenumber_or_param() {\n    var s0;\n\n    s0 = peg$parseliteral_numeric();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseparam();\n    }\n\n    return s0;\n  }\n\n  function peg$parselimit_clause() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_LIMIT();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsenumber_or_param();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$currPos;\n            s6 = peg$parseCOMMA();\n            if (s6 === peg$FAILED) {\n              s6 = peg$parseKW_OFFSET();\n            }\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parse__();\n              if (s7 !== peg$FAILED) {\n                s8 = peg$parsenumber_or_param();\n                if (s8 !== peg$FAILED) {\n                  s6 = [s6, s7, s8];\n                  s5 = s6;\n                } else {\n                  peg$currPos = s5;\n                  s5 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s5;\n                s5 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s5;\n              s5 = peg$FAILED;\n            }\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c85(s3, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseexpr_list() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseexpr();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseCOMMA();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseexpr();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseexpr();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c86(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseexpr() {\n    var s0;\n\n    s0 = peg$parsestruct_expr();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parselogic_operator_expr();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseor_expr();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parseunary_expr();\n          if (s0 === peg$FAILED) {\n            s0 = peg$parseselect_stmt();\n            if (s0 === peg$FAILED) {\n              s0 = peg$parsearray_expr();\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseparentheses_list_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseparentheses_expr();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseCOMMA();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseparentheses_expr();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseparentheses_expr();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c17(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseparentheses_expr() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseLPAREN();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsecolumn_clause();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseRPAREN();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c35(s3);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsearray_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseLBRAKE();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsecolumn_clause();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseRBRAKE();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c87(s3);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parsearray_type();\n      if (s1 === peg$FAILED) {\n        s1 = peg$parseKW_ARRAY();\n      }\n      if (s1 === peg$FAILED) {\n        s1 = null;\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parseLBRAKE();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parse__();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parseliteral_list();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parse__();\n              if (s5 !== peg$FAILED) {\n                s6 = peg$parseRBRAKE();\n                if (s6 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c88(s1, s4);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parsearray_type();\n        if (s1 === peg$FAILED) {\n          s1 = peg$parseKW_ARRAY();\n        }\n        if (s1 === peg$FAILED) {\n          s1 = null;\n        }\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parse__();\n          if (s2 !== peg$FAILED) {\n            s3 = peg$parseLBRAKE();\n            if (s3 === peg$FAILED) {\n              s3 = peg$parseLPAREN();\n            }\n            if (s3 !== peg$FAILED) {\n              s4 = peg$parse__();\n              if (s4 !== peg$FAILED) {\n                s5 = peg$parseparentheses_list_expr();\n                if (s5 === peg$FAILED) {\n                  s5 = peg$parseexpr();\n                }\n                if (s5 !== peg$FAILED) {\n                  s6 = peg$parse__();\n                  if (s6 !== peg$FAILED) {\n                    s7 = peg$parseRBRAKE();\n                    if (s7 === peg$FAILED) {\n                      s7 = peg$parseRPAREN();\n                    }\n                    if (s7 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s1 = peg$c89(s1, s5);\n                      s0 = s1;\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsestruct_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsestruct_type();\n    if (s1 === peg$FAILED) {\n      s1 = peg$parseKW_STRUCT();\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLPAREN();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsecolumn_clause();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseRPAREN();\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c90(s1, s5);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parselogic_operator_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseprimary();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseLOGIC_OPERATOR();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseprimary();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      if (s3 !== peg$FAILED) {\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          s3 = peg$currPos;\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseLOGIC_OPERATOR();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseprimary();\n                if (s7 !== peg$FAILED) {\n                  s4 = [s4, s5, s6, s7];\n                  s3 = s4;\n                } else {\n                  peg$currPos = s3;\n                  s3 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        }\n      } else {\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c91(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseunary_expr() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseadditive_operator();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseprimary();\n        if (s5 !== peg$FAILED) {\n          s4 = [s4, s5];\n          s3 = s4;\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      if (s3 !== peg$FAILED) {\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          s3 = peg$currPos;\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseprimary();\n            if (s5 !== peg$FAILED) {\n              s4 = [s4, s5];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        }\n      } else {\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c92(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseor_and_where_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseexpr();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseKW_AND();\n        if (s5 === peg$FAILED) {\n          s5 = peg$parseKW_OR();\n          if (s5 === peg$FAILED) {\n            s5 = peg$parseCOMMA();\n          }\n        }\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseexpr();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseKW_AND();\n          if (s5 === peg$FAILED) {\n            s5 = peg$parseKW_OR();\n            if (s5 === peg$FAILED) {\n              s5 = peg$parseCOMMA();\n            }\n          }\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseexpr();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c93(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseor_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseand_expr();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse___();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseKW_OR();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseand_expr();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse___();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseKW_OR();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseand_expr();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c94(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseand_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsenot_expr();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse___();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseKW_AND();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parsenot_expr();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse___();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseKW_AND();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parsenot_expr();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c94(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsenot_expr() {\n    var s0, s1, s2, s3, s4;\n\n    s0 = peg$parsecomparison_expr();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseexists_expr();\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parseKW_NOT();\n        if (s1 === peg$FAILED) {\n          s1 = peg$currPos;\n          if (input.charCodeAt(peg$currPos) === 33) {\n            s2 = peg$c95;\n            peg$currPos++;\n          } else {\n            s2 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c96); }\n          }\n          if (s2 !== peg$FAILED) {\n            s3 = peg$currPos;\n            peg$silentFails++;\n            if (input.charCodeAt(peg$currPos) === 61) {\n              s4 = peg$c97;\n              peg$currPos++;\n            } else {\n              s4 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c98); }\n            }\n            peg$silentFails--;\n            if (s4 === peg$FAILED) {\n              s3 = void 0;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n            if (s3 !== peg$FAILED) {\n              s2 = [s2, s3];\n              s1 = s2;\n            } else {\n              peg$currPos = s1;\n              s1 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s1;\n            s1 = peg$FAILED;\n          }\n        }\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parse__();\n          if (s2 !== peg$FAILED) {\n            s3 = peg$parsenot_expr();\n            if (s3 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c99(s3);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsecomparison_expr() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseadditive_expr();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsecomparison_op_right();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c100(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseliteral_string();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parsecolumn_ref();\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseexists_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseexists_op();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLPAREN();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseunion_stmt();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseRPAREN();\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c101(s1, s5);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseexists_op() {\n    var s0, s1, s2, s3, s4;\n\n    s0 = peg$currPos;\n    s1 = peg$currPos;\n    s2 = peg$parseKW_NOT();\n    if (s2 !== peg$FAILED) {\n      s3 = peg$parse__();\n      if (s3 !== peg$FAILED) {\n        s4 = peg$parseKW_EXISTS();\n        if (s4 !== peg$FAILED) {\n          s2 = [s2, s3, s4];\n          s1 = s2;\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s1;\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c102(s1);\n    }\n    s0 = s1;\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseKW_EXISTS();\n    }\n\n    return s0;\n  }\n\n  function peg$parsecomparison_op_right() {\n    var s0;\n\n    s0 = peg$parsearithmetic_op_right();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsein_op_right();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parsebetween_op_right();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parseis_op_right();\n          if (s0 === peg$FAILED) {\n            s0 = peg$parselike_op_right();\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsearithmetic_op_right() {\n    var s0, s1, s2, s3, s4, s5, s6;\n\n    s0 = peg$currPos;\n    s1 = [];\n    s2 = peg$currPos;\n    s3 = peg$parse__();\n    if (s3 !== peg$FAILED) {\n      s4 = peg$parsearithmetic_comparison_operator();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parse__();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parseadditive_expr();\n          if (s6 !== peg$FAILED) {\n            s3 = [s3, s4, s5, s6];\n            s2 = s3;\n          } else {\n            peg$currPos = s2;\n            s2 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s2;\n          s2 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s2;\n      s2 = peg$FAILED;\n    }\n    if (s2 !== peg$FAILED) {\n      while (s2 !== peg$FAILED) {\n        s1.push(s2);\n        s2 = peg$currPos;\n        s3 = peg$parse__();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parsearithmetic_comparison_operator();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parse__();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parseadditive_expr();\n              if (s6 !== peg$FAILED) {\n                s3 = [s3, s4, s5, s6];\n                s2 = s3;\n              } else {\n                peg$currPos = s2;\n                s2 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s2;\n              s2 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s2;\n            s2 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s2;\n          s2 = peg$FAILED;\n        }\n      }\n    } else {\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c103(s1);\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parsearithmetic_comparison_operator() {\n    var s0;\n\n    if (input.substr(peg$currPos, 2) === peg$c104) {\n      s0 = peg$c104;\n      peg$currPos += 2;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c105); }\n    }\n    if (s0 === peg$FAILED) {\n      if (input.charCodeAt(peg$currPos) === 62) {\n        s0 = peg$c106;\n        peg$currPos++;\n      } else {\n        s0 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c107); }\n      }\n      if (s0 === peg$FAILED) {\n        if (input.substr(peg$currPos, 2) === peg$c108) {\n          s0 = peg$c108;\n          peg$currPos += 2;\n        } else {\n          s0 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c109); }\n        }\n        if (s0 === peg$FAILED) {\n          if (input.substr(peg$currPos, 2) === peg$c110) {\n            s0 = peg$c110;\n            peg$currPos += 2;\n          } else {\n            s0 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c111); }\n          }\n          if (s0 === peg$FAILED) {\n            if (input.charCodeAt(peg$currPos) === 60) {\n              s0 = peg$c112;\n              peg$currPos++;\n            } else {\n              s0 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c113); }\n            }\n            if (s0 === peg$FAILED) {\n              if (input.charCodeAt(peg$currPos) === 61) {\n                s0 = peg$c97;\n                peg$currPos++;\n              } else {\n                s0 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c98); }\n              }\n              if (s0 === peg$FAILED) {\n                if (input.substr(peg$currPos, 2) === peg$c114) {\n                  s0 = peg$c114;\n                  peg$currPos += 2;\n                } else {\n                  s0 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c115); }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseis_op_right() {\n    var s0, s1, s2, s3, s4;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_IS();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseadditive_expr();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c116(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$currPos;\n      s2 = peg$parseKW_IS();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parse__();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parseKW_NOT();\n          if (s4 !== peg$FAILED) {\n            s2 = [s2, s3, s4];\n            s1 = s2;\n          } else {\n            peg$currPos = s1;\n            s1 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseadditive_expr();\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c117(s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsebetween_op_right() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsebetween_or_not_between_op();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseadditive_expr();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseKW_AND();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseadditive_expr();\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c118(s1, s3, s7);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsebetween_or_not_between_op() {\n    var s0, s1, s2, s3, s4;\n\n    s0 = peg$currPos;\n    s1 = peg$currPos;\n    s2 = peg$parseKW_NOT();\n    if (s2 !== peg$FAILED) {\n      s3 = peg$parse__();\n      if (s3 !== peg$FAILED) {\n        s4 = peg$parseKW_BETWEEN();\n        if (s4 !== peg$FAILED) {\n          s2 = [s2, s3, s4];\n          s1 = s2;\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s1;\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c102(s1);\n    }\n    s0 = s1;\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseKW_BETWEEN();\n    }\n\n    return s0;\n  }\n\n  function peg$parselike_op() {\n    var s0, s1, s2, s3, s4;\n\n    s0 = peg$currPos;\n    s1 = peg$currPos;\n    s2 = peg$parseKW_NOT();\n    if (s2 !== peg$FAILED) {\n      s3 = peg$parse__();\n      if (s3 !== peg$FAILED) {\n        s4 = peg$parseKW_LIKE();\n        if (s4 !== peg$FAILED) {\n          s2 = [s2, s3, s4];\n          s1 = s2;\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s1;\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c102(s1);\n    }\n    s0 = s1;\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseKW_LIKE();\n    }\n\n    return s0;\n  }\n\n  function peg$parsein_op() {\n    var s0, s1, s2, s3, s4;\n\n    s0 = peg$currPos;\n    s1 = peg$currPos;\n    s2 = peg$parseKW_NOT();\n    if (s2 !== peg$FAILED) {\n      s3 = peg$parse__();\n      if (s3 !== peg$FAILED) {\n        s4 = peg$parseKW_IN();\n        if (s4 !== peg$FAILED) {\n          s2 = [s2, s3, s4];\n          s1 = s2;\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s1;\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c102(s1);\n    }\n    s0 = s1;\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseKW_IN();\n    }\n\n    return s0;\n  }\n\n  function peg$parselike_op_right() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parselike_op();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseliteral();\n        if (s3 === peg$FAILED) {\n          s3 = peg$parsecomparison_expr();\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c119(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsein_op_right() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsein_op();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLPAREN();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseexpr_list();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseRPAREN();\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c120(s1, s5);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parsein_op();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseliteral_string();\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c121(s1, s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseadditive_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsemultiplicative_expr();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseadditive_operator();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parsemultiplicative_expr();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseadditive_operator();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parsemultiplicative_expr();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c94(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseadditive_operator() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 43) {\n      s0 = peg$c122;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c123); }\n    }\n    if (s0 === peg$FAILED) {\n      if (input.charCodeAt(peg$currPos) === 45) {\n        s0 = peg$c124;\n        peg$currPos++;\n      } else {\n        s0 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c125); }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsemultiplicative_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseprimary();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parsemultiplicative_operator();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseprimary();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parsemultiplicative_operator();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseprimary();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c126(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsemultiplicative_operator() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 42) {\n      s0 = peg$c127;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c128); }\n    }\n    if (s0 === peg$FAILED) {\n      if (input.charCodeAt(peg$currPos) === 47) {\n        s0 = peg$c129;\n        peg$currPos++;\n      } else {\n        s0 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c130); }\n      }\n      if (s0 === peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 37) {\n          s0 = peg$c131;\n          peg$currPos++;\n        } else {\n          s0 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c132); }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseprimary() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$parsecast_expr();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseliteral();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseaggr_func();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parsefunc_call();\n          if (s0 === peg$FAILED) {\n            s0 = peg$parsecase_expr();\n            if (s0 === peg$FAILED) {\n              s0 = peg$parseinterval_expr();\n              if (s0 === peg$FAILED) {\n                s0 = peg$parsecolumn_ref();\n                if (s0 === peg$FAILED) {\n                  s0 = peg$parseparam();\n                  if (s0 === peg$FAILED) {\n                    s0 = peg$currPos;\n                    s1 = peg$parseLPAREN();\n                    if (s1 !== peg$FAILED) {\n                      s2 = peg$parse__();\n                      if (s2 !== peg$FAILED) {\n                        s3 = peg$parseor_and_where_expr();\n                        if (s3 !== peg$FAILED) {\n                          s4 = peg$parse__();\n                          if (s4 !== peg$FAILED) {\n                            s5 = peg$parseRPAREN();\n                            if (s5 !== peg$FAILED) {\n                              peg$savedPos = s0;\n                              s1 = peg$c133(s3);\n                              s0 = s1;\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseinterval_expr() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_INTERVAL();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseexpr();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseinterval_unit();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c134(s3, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecase_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_CASE();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = [];\n        s4 = peg$parsecase_when_then();\n        if (s4 !== peg$FAILED) {\n          while (s4 !== peg$FAILED) {\n            s3.push(s4);\n            s4 = peg$parsecase_when_then();\n          }\n        } else {\n          s3 = peg$FAILED;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsecase_else();\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseKW_END();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseKW_CASE();\n                    if (s9 === peg$FAILED) {\n                      s9 = null;\n                    }\n                    if (s9 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s1 = peg$c135(s3, s5);\n                      s0 = s1;\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_CASE();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseexpr();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse__();\n            if (s4 !== peg$FAILED) {\n              s5 = [];\n              s6 = peg$parsecase_when_then();\n              if (s6 !== peg$FAILED) {\n                while (s6 !== peg$FAILED) {\n                  s5.push(s6);\n                  s6 = peg$parsecase_when_then();\n                }\n              } else {\n                s5 = peg$FAILED;\n              }\n              if (s5 !== peg$FAILED) {\n                s6 = peg$parse__();\n                if (s6 !== peg$FAILED) {\n                  s7 = peg$parsecase_else();\n                  if (s7 === peg$FAILED) {\n                    s7 = null;\n                  }\n                  if (s7 !== peg$FAILED) {\n                    s8 = peg$parse__();\n                    if (s8 !== peg$FAILED) {\n                      s9 = peg$parseKW_END();\n                      if (s9 !== peg$FAILED) {\n                        s10 = peg$parse__();\n                        if (s10 !== peg$FAILED) {\n                          s11 = peg$parseKW_CASE();\n                          if (s11 === peg$FAILED) {\n                            s11 = null;\n                          }\n                          if (s11 !== peg$FAILED) {\n                            peg$savedPos = s0;\n                            s1 = peg$c136(s3, s5, s7);\n                            s0 = s1;\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsecase_when_then() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_WHEN();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseor_and_where_expr();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseKW_THEN();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseexpr();\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c137(s3, s7);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecase_else() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_ELSE();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseexpr();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c138(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecolumn_ref() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseident();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseDOT();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsecolumn_without_kw();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c139(s1, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parsecolumn();\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c140(s1);\n      }\n      s0 = s1;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecolumn_list() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsecolumn();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseCOMMA();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parsecolumn();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parsecolumn();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c17(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseident() {\n    var s0, s1, s2;\n\n    s0 = peg$currPos;\n    s1 = peg$parseident_name();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = peg$currPos;\n      s2 = peg$c141(s1);\n      if (s2) {\n        s2 = peg$FAILED;\n      } else {\n        s2 = void 0;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c142(s1);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parsequoted_ident();\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c142(s1);\n      }\n      s0 = s1;\n    }\n\n    return s0;\n  }\n\n  function peg$parsealias_ident() {\n    var s0, s1, s2;\n\n    s0 = peg$currPos;\n    s1 = peg$parseident_name();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = peg$currPos;\n      s2 = peg$c143(s1);\n      if (s2) {\n        s2 = peg$FAILED;\n      } else {\n        s2 = void 0;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c142(s1);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parsequoted_ident();\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c142(s1);\n      }\n      s0 = s1;\n    }\n\n    return s0;\n  }\n\n  function peg$parsequoted_ident() {\n    var s0;\n\n    s0 = peg$parsedouble_quoted_ident();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsesingle_quoted_ident();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parsebackticks_quoted_ident();\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsedouble_quoted_ident() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.charCodeAt(peg$currPos) === 34) {\n      s1 = peg$c144;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c145); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      if (peg$c146.test(input.charAt(peg$currPos))) {\n        s3 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s3 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c147); }\n      }\n      if (s3 !== peg$FAILED) {\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          if (peg$c146.test(input.charAt(peg$currPos))) {\n            s3 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c147); }\n          }\n        }\n      } else {\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 34) {\n          s3 = peg$c144;\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c145); }\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c148(s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsesingle_quoted_ident() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.charCodeAt(peg$currPos) === 39) {\n      s1 = peg$c149;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c150); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      if (peg$c151.test(input.charAt(peg$currPos))) {\n        s3 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s3 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c152); }\n      }\n      if (s3 !== peg$FAILED) {\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          if (peg$c151.test(input.charAt(peg$currPos))) {\n            s3 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c152); }\n          }\n        }\n      } else {\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 39) {\n          s3 = peg$c149;\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c150); }\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c148(s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsebackticks_quoted_ident() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.charCodeAt(peg$currPos) === 96) {\n      s1 = peg$c153;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c154); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      if (peg$c155.test(input.charAt(peg$currPos))) {\n        s3 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s3 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c156); }\n      }\n      if (s3 !== peg$FAILED) {\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          if (peg$c155.test(input.charAt(peg$currPos))) {\n            s3 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c156); }\n          }\n        }\n      } else {\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 96) {\n          s3 = peg$c153;\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c154); }\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c157(s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecolumn_without_kw() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    s1 = peg$parsecolumn_name();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c158(s1);\n    }\n    s0 = s1;\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsequoted_ident();\n    }\n\n    return s0;\n  }\n\n  function peg$parsecolumn() {\n    var s0, s1, s2;\n\n    s0 = peg$currPos;\n    s1 = peg$parsecolumn_name();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = peg$currPos;\n      s2 = peg$c141(s1);\n      if (s2) {\n        s2 = peg$FAILED;\n      } else {\n        s2 = void 0;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c159(s1);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsequoted_ident();\n    }\n\n    return s0;\n  }\n\n  function peg$parsecolumn_name() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseident_start();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$parsecolumn_part();\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$parsecolumn_part();\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c160(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseident_name() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseident_start();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$parseident_part();\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$parseident_part();\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c160(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseident_start() {\n    var s0;\n\n    if (peg$c161.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c162); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseident_part() {\n    var s0;\n\n    if (peg$c163.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c164); }\n    }\n\n    return s0;\n  }\n\n  function peg$parsecolumn_part() {\n    var s0;\n\n    if (peg$c165.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c166); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseparam() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$currPos;\n    if (input.charCodeAt(peg$currPos) === 58) {\n      s2 = peg$c167;\n      peg$currPos++;\n    } else {\n      s2 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c168); }\n    }\n    if (s2 !== peg$FAILED) {\n      s3 = peg$parseident_name();\n      if (s3 !== peg$FAILED) {\n        s2 = [s2, s3];\n        s1 = s2;\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s1;\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c169(s1);\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parseaggr_func() {\n    var s0;\n\n    s0 = peg$parseaggr_fun_count();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseaggr_fun_smma();\n    }\n\n    return s0;\n  }\n\n  function peg$parseaggr_fun_smma() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_SUM_MAX_MIN_AVG();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLPAREN();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseadditive_expr();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseRPAREN();\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c170(s1, s5);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_SUM_MAX_MIN_AVG() {\n    var s0;\n\n    s0 = peg$parseKW_SUM();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseKW_MAX();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseKW_MIN();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parseKW_AVG();\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseon_update_current_timestamp() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_ON();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        if (input.substr(peg$currPos, 6).toLowerCase() === peg$c171) {\n          s3 = input.substr(peg$currPos, 6);\n          peg$currPos += 6;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c172); }\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseKW_CURRENT_TIMESTAMP();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseLPAREN();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseexpr_list();\n                    if (s9 === peg$FAILED) {\n                      s9 = null;\n                    }\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse__();\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parseRPAREN();\n                        if (s11 !== peg$FAILED) {\n                          peg$savedPos = s0;\n                          s1 = peg$c173(s5, s9);\n                          s0 = s1;\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_ON();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          if (input.substr(peg$currPos, 6).toLowerCase() === peg$c171) {\n            s3 = input.substr(peg$currPos, 6);\n            peg$currPos += 6;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c172); }\n          }\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse__();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parseKW_CURRENT_TIMESTAMP();\n              if (s5 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c174(s5);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseover_partition() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_OVER();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseas_window_specification();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c175(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_OVER();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseLPAREN();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse__();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parsepartition_by_clause();\n              if (s5 !== peg$FAILED) {\n                s6 = peg$parse__();\n                if (s6 !== peg$FAILED) {\n                  s7 = peg$parseorder_by_clause();\n                  if (s7 === peg$FAILED) {\n                    s7 = null;\n                  }\n                  if (s7 !== peg$FAILED) {\n                    s8 = peg$parse__();\n                    if (s8 !== peg$FAILED) {\n                      s9 = peg$parseRPAREN();\n                      if (s9 !== peg$FAILED) {\n                        peg$savedPos = s0;\n                        s1 = peg$c176(s5, s7);\n                        s0 = s1;\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseon_update_current_timestamp();\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseaggr_fun_count() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_COUNT();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLPAREN();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsecount_arg();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseRPAREN();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseover_partition();\n                    if (s9 === peg$FAILED) {\n                      s9 = null;\n                    }\n                    if (s9 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s1 = peg$c177(s1, s5, s9);\n                      s0 = s1;\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecount_arg() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n    s0 = peg$currPos;\n    s1 = peg$parsestar_expr();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c178(s1);\n    }\n    s0 = s1;\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_DISTINCT();\n      if (s1 === peg$FAILED) {\n        s1 = null;\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parsecolumn_ref();\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c179(s1, s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parseKW_DISTINCT();\n        if (s1 === peg$FAILED) {\n          s1 = null;\n        }\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parse__();\n          if (s2 !== peg$FAILED) {\n            s3 = peg$parseLPAREN();\n            if (s3 !== peg$FAILED) {\n              s4 = peg$parse__();\n              if (s4 !== peg$FAILED) {\n                s5 = peg$parseexpr();\n                if (s5 !== peg$FAILED) {\n                  s6 = peg$parse__();\n                  if (s6 !== peg$FAILED) {\n                    s7 = peg$parseRPAREN();\n                    if (s7 !== peg$FAILED) {\n                      s8 = peg$parse__();\n                      if (s8 !== peg$FAILED) {\n                        s9 = peg$parseorder_by_clause();\n                        if (s9 === peg$FAILED) {\n                          s9 = null;\n                        }\n                        if (s9 !== peg$FAILED) {\n                          peg$savedPos = s0;\n                          s1 = peg$c180(s1, s5, s9);\n                          s0 = s1;\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsestar_expr() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    if (input.charCodeAt(peg$currPos) === 42) {\n      s1 = peg$c127;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c128); }\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c181();\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parsefunc_call() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n    s0 = peg$parseextract_func();\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseproc_func_name();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseLPAREN();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse__();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parseexpr_list();\n              if (s5 === peg$FAILED) {\n                s5 = null;\n              }\n              if (s5 !== peg$FAILED) {\n                s6 = peg$parse__();\n                if (s6 !== peg$FAILED) {\n                  s7 = peg$parseRPAREN();\n                  if (s7 !== peg$FAILED) {\n                    s8 = peg$parse__();\n                    if (s8 !== peg$FAILED) {\n                      s9 = peg$parseover_partition();\n                      if (s9 === peg$FAILED) {\n                        s9 = null;\n                      }\n                      if (s9 !== peg$FAILED) {\n                        peg$savedPos = s0;\n                        s1 = peg$c182(s1, s5, s9);\n                        s0 = s1;\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parsescalar_func();\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parse__();\n          if (s2 !== peg$FAILED) {\n            s3 = peg$parseLPAREN();\n            if (s3 !== peg$FAILED) {\n              s4 = peg$parse__();\n              if (s4 !== peg$FAILED) {\n                s5 = peg$parseexpr_list();\n                if (s5 === peg$FAILED) {\n                  s5 = null;\n                }\n                if (s5 !== peg$FAILED) {\n                  s6 = peg$parse__();\n                  if (s6 !== peg$FAILED) {\n                    s7 = peg$parseRPAREN();\n                    if (s7 !== peg$FAILED) {\n                      s8 = peg$parse__();\n                      if (s8 !== peg$FAILED) {\n                        s9 = peg$parseover_partition();\n                        if (s9 === peg$FAILED) {\n                          s9 = null;\n                        }\n                        if (s9 !== peg$FAILED) {\n                          peg$savedPos = s0;\n                          s1 = peg$c182(s1, s5, s9);\n                          s0 = s1;\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          s1 = peg$parseKW_CURRENT_TIMESTAMP();\n          if (s1 !== peg$FAILED) {\n            s2 = peg$parse__();\n            if (s2 !== peg$FAILED) {\n              s3 = peg$parseon_update_current_timestamp();\n              if (s3 === peg$FAILED) {\n                s3 = null;\n              }\n              if (s3 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c183(s1, s3);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseproc_func_name() {\n    var s0, s1, s2, s3, s4, s5, s6;\n\n    s0 = peg$currPos;\n    s1 = peg$parseident();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      s3 = peg$parse__();\n      if (s3 !== peg$FAILED) {\n        s4 = peg$parseDOT();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parse__();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parseident();\n            if (s6 !== peg$FAILED) {\n              s3 = [s3, s4, s5, s6];\n              s2 = s3;\n            } else {\n              peg$currPos = s2;\n              s2 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s2;\n            s2 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s2;\n          s2 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 === peg$FAILED) {\n        s2 = null;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c184(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsescalar_func() {\n    var s0;\n\n    s0 = peg$parseKW_CURRENT_DATE();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseKW_CURRENT_TIME();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseKW_CURRENT_TIMESTAMP();\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseextract_filed() {\n    var s0, s1;\n\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c185) {\n      s0 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c186); }\n    }\n    if (s0 === peg$FAILED) {\n      if (input.substr(peg$currPos, 3).toLowerCase() === peg$c187) {\n        s0 = input.substr(peg$currPos, 3);\n        peg$currPos += 3;\n      } else {\n        s0 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c188); }\n      }\n      if (s0 === peg$FAILED) {\n        if (input.substr(peg$currPos, 6).toLowerCase() === peg$c189) {\n          s0 = input.substr(peg$currPos, 6);\n          peg$currPos += 6;\n        } else {\n          s0 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c190); }\n        }\n        if (s0 === peg$FAILED) {\n          if (input.substr(peg$currPos, 3).toLowerCase() === peg$c191) {\n            s0 = input.substr(peg$currPos, 3);\n            peg$currPos += 3;\n          } else {\n            s0 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c192); }\n          }\n          if (s0 === peg$FAILED) {\n            if (input.substr(peg$currPos, 3).toLowerCase() === peg$c193) {\n              s0 = input.substr(peg$currPos, 3);\n              peg$currPos += 3;\n            } else {\n              s0 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c194); }\n            }\n            if (s0 === peg$FAILED) {\n              if (input.substr(peg$currPos, 5).toLowerCase() === peg$c195) {\n                s0 = input.substr(peg$currPos, 5);\n                peg$currPos += 5;\n              } else {\n                s0 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c196); }\n              }\n              if (s0 === peg$FAILED) {\n                if (input.substr(peg$currPos, 4).toLowerCase() === peg$c197) {\n                  s0 = input.substr(peg$currPos, 4);\n                  peg$currPos += 4;\n                } else {\n                  s0 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c198); }\n                }\n                if (s0 === peg$FAILED) {\n                  if (input.substr(peg$currPos, 6).toLowerCase() === peg$c199) {\n                    s0 = input.substr(peg$currPos, 6);\n                    peg$currPos += 6;\n                  } else {\n                    s0 = peg$FAILED;\n                    if (peg$silentFails === 0) { peg$fail(peg$c200); }\n                  }\n                  if (s0 === peg$FAILED) {\n                    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c201) {\n                      s0 = input.substr(peg$currPos, 7);\n                      peg$currPos += 7;\n                    } else {\n                      s0 = peg$FAILED;\n                      if (peg$silentFails === 0) { peg$fail(peg$c202); }\n                    }\n                    if (s0 === peg$FAILED) {\n                      if (input.substr(peg$currPos, 12).toLowerCase() === peg$c203) {\n                        s0 = input.substr(peg$currPos, 12);\n                        peg$currPos += 12;\n                      } else {\n                        s0 = peg$FAILED;\n                        if (peg$silentFails === 0) { peg$fail(peg$c204); }\n                      }\n                      if (s0 === peg$FAILED) {\n                        if (input.substr(peg$currPos, 10).toLowerCase() === peg$c205) {\n                          s0 = input.substr(peg$currPos, 10);\n                          peg$currPos += 10;\n                        } else {\n                          s0 = peg$FAILED;\n                          if (peg$silentFails === 0) { peg$fail(peg$c206); }\n                        }\n                        if (s0 === peg$FAILED) {\n                          if (input.substr(peg$currPos, 12).toLowerCase() === peg$c207) {\n                            s0 = input.substr(peg$currPos, 12);\n                            peg$currPos += 12;\n                          } else {\n                            s0 = peg$FAILED;\n                            if (peg$silentFails === 0) { peg$fail(peg$c208); }\n                          }\n                          if (s0 === peg$FAILED) {\n                            if (input.substr(peg$currPos, 6).toLowerCase() === peg$c209) {\n                              s0 = input.substr(peg$currPos, 6);\n                              peg$currPos += 6;\n                            } else {\n                              s0 = peg$FAILED;\n                              if (peg$silentFails === 0) { peg$fail(peg$c210); }\n                            }\n                            if (s0 === peg$FAILED) {\n                              if (input.substr(peg$currPos, 5).toLowerCase() === peg$c211) {\n                                s0 = input.substr(peg$currPos, 5);\n                                peg$currPos += 5;\n                              } else {\n                                s0 = peg$FAILED;\n                                if (peg$silentFails === 0) { peg$fail(peg$c212); }\n                              }\n                              if (s0 === peg$FAILED) {\n                                if (input.substr(peg$currPos, 7).toLowerCase() === peg$c213) {\n                                  s0 = input.substr(peg$currPos, 7);\n                                  peg$currPos += 7;\n                                } else {\n                                  s0 = peg$FAILED;\n                                  if (peg$silentFails === 0) { peg$fail(peg$c214); }\n                                }\n                                if (s0 === peg$FAILED) {\n                                  if (input.substr(peg$currPos, 6).toLowerCase() === peg$c215) {\n                                    s0 = input.substr(peg$currPos, 6);\n                                    peg$currPos += 6;\n                                  } else {\n                                    s0 = peg$FAILED;\n                                    if (peg$silentFails === 0) { peg$fail(peg$c216); }\n                                  }\n                                  if (s0 === peg$FAILED) {\n                                    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c217) {\n                                      s0 = input.substr(peg$currPos, 8);\n                                      peg$currPos += 8;\n                                    } else {\n                                      s0 = peg$FAILED;\n                                      if (peg$silentFails === 0) { peg$fail(peg$c218); }\n                                    }\n                                    if (s0 === peg$FAILED) {\n                                      if (input.substr(peg$currPos, 13).toLowerCase() === peg$c219) {\n                                        s0 = input.substr(peg$currPos, 13);\n                                        peg$currPos += 13;\n                                      } else {\n                                        s0 = peg$FAILED;\n                                        if (peg$silentFails === 0) { peg$fail(peg$c220); }\n                                      }\n                                      if (s0 === peg$FAILED) {\n                                        if (input.substr(peg$currPos, 15).toLowerCase() === peg$c221) {\n                                          s0 = input.substr(peg$currPos, 15);\n                                          peg$currPos += 15;\n                                        } else {\n                                          s0 = peg$FAILED;\n                                          if (peg$silentFails === 0) { peg$fail(peg$c222); }\n                                        }\n                                        if (s0 === peg$FAILED) {\n                                          if (input.substr(peg$currPos, 4).toLowerCase() === peg$c223) {\n                                            s0 = input.substr(peg$currPos, 4);\n                                            peg$currPos += 4;\n                                          } else {\n                                            s0 = peg$FAILED;\n                                            if (peg$silentFails === 0) { peg$fail(peg$c224); }\n                                          }\n                                          if (s0 === peg$FAILED) {\n                                            s0 = peg$currPos;\n                                            if (input.substr(peg$currPos, 4).toLowerCase() === peg$c225) {\n                                              s1 = input.substr(peg$currPos, 4);\n                                              peg$currPos += 4;\n                                            } else {\n                                              s1 = peg$FAILED;\n                                              if (peg$silentFails === 0) { peg$fail(peg$c226); }\n                                            }\n                                            if (s1 !== peg$FAILED) {\n                                              peg$savedPos = s0;\n                                              s1 = peg$c227();\n                                            }\n                                            s0 = s1;\n                                          }\n                                        }\n                                      }\n                                    }\n                                  }\n                                }\n                              }\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseextract_func() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_EXTRACT();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLPAREN();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseextract_filed();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseKW_FROM();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseKW_TIMESTAMP();\n                    if (s9 === peg$FAILED) {\n                      s9 = peg$parseKW_INTERVAL();\n                      if (s9 === peg$FAILED) {\n                        s9 = peg$parseKW_TIME();\n                        if (s9 === peg$FAILED) {\n                          s9 = peg$parseKW_DATE();\n                        }\n                      }\n                    }\n                    if (s9 === peg$FAILED) {\n                      s9 = null;\n                    }\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse__();\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parseexpr();\n                        if (s11 !== peg$FAILED) {\n                          s12 = peg$parse__();\n                          if (s12 !== peg$FAILED) {\n                            s13 = peg$parseRPAREN();\n                            if (s13 !== peg$FAILED) {\n                              peg$savedPos = s0;\n                              s1 = peg$c228(s1, s5, s9, s11);\n                              s0 = s1;\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecast_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19, s20, s21;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_CAST();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLPAREN();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseexpr();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseKW_AS();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parsedata_type();\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse__();\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parseRPAREN();\n                        if (s11 !== peg$FAILED) {\n                          peg$savedPos = s0;\n                          s1 = peg$c229(s5, s9);\n                          s0 = s1;\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_CAST();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseLPAREN();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse__();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parseexpr();\n              if (s5 !== peg$FAILED) {\n                s6 = peg$parse__();\n                if (s6 !== peg$FAILED) {\n                  s7 = peg$parseKW_AS();\n                  if (s7 !== peg$FAILED) {\n                    s8 = peg$parse__();\n                    if (s8 !== peg$FAILED) {\n                      s9 = peg$parseKW_DECIMAL();\n                      if (s9 !== peg$FAILED) {\n                        s10 = peg$parse__();\n                        if (s10 !== peg$FAILED) {\n                          s11 = peg$parseLPAREN();\n                          if (s11 !== peg$FAILED) {\n                            s12 = peg$parse__();\n                            if (s12 !== peg$FAILED) {\n                              s13 = peg$parseint();\n                              if (s13 !== peg$FAILED) {\n                                s14 = peg$parse__();\n                                if (s14 !== peg$FAILED) {\n                                  s15 = peg$parseRPAREN();\n                                  if (s15 !== peg$FAILED) {\n                                    s16 = peg$parse__();\n                                    if (s16 !== peg$FAILED) {\n                                      s17 = peg$parseRPAREN();\n                                      if (s17 !== peg$FAILED) {\n                                        peg$savedPos = s0;\n                                        s1 = peg$c230(s5, s13);\n                                        s0 = s1;\n                                      } else {\n                                        peg$currPos = s0;\n                                        s0 = peg$FAILED;\n                                      }\n                                    } else {\n                                      peg$currPos = s0;\n                                      s0 = peg$FAILED;\n                                    }\n                                  } else {\n                                    peg$currPos = s0;\n                                    s0 = peg$FAILED;\n                                  }\n                                } else {\n                                  peg$currPos = s0;\n                                  s0 = peg$FAILED;\n                                }\n                              } else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parseKW_CAST();\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parse__();\n          if (s2 !== peg$FAILED) {\n            s3 = peg$parseLPAREN();\n            if (s3 !== peg$FAILED) {\n              s4 = peg$parse__();\n              if (s4 !== peg$FAILED) {\n                s5 = peg$parseexpr();\n                if (s5 !== peg$FAILED) {\n                  s6 = peg$parse__();\n                  if (s6 !== peg$FAILED) {\n                    s7 = peg$parseKW_AS();\n                    if (s7 !== peg$FAILED) {\n                      s8 = peg$parse__();\n                      if (s8 !== peg$FAILED) {\n                        s9 = peg$parseKW_DECIMAL();\n                        if (s9 !== peg$FAILED) {\n                          s10 = peg$parse__();\n                          if (s10 !== peg$FAILED) {\n                            s11 = peg$parseLPAREN();\n                            if (s11 !== peg$FAILED) {\n                              s12 = peg$parse__();\n                              if (s12 !== peg$FAILED) {\n                                s13 = peg$parseint();\n                                if (s13 !== peg$FAILED) {\n                                  s14 = peg$parse__();\n                                  if (s14 !== peg$FAILED) {\n                                    s15 = peg$parseCOMMA();\n                                    if (s15 !== peg$FAILED) {\n                                      s16 = peg$parse__();\n                                      if (s16 !== peg$FAILED) {\n                                        s17 = peg$parseint();\n                                        if (s17 !== peg$FAILED) {\n                                          s18 = peg$parse__();\n                                          if (s18 !== peg$FAILED) {\n                                            s19 = peg$parseRPAREN();\n                                            if (s19 !== peg$FAILED) {\n                                              s20 = peg$parse__();\n                                              if (s20 !== peg$FAILED) {\n                                                s21 = peg$parseRPAREN();\n                                                if (s21 !== peg$FAILED) {\n                                                  peg$savedPos = s0;\n                                                  s1 = peg$c231(s5, s13, s17);\n                                                  s0 = s1;\n                                                } else {\n                                                  peg$currPos = s0;\n                                                  s0 = peg$FAILED;\n                                                }\n                                              } else {\n                                                peg$currPos = s0;\n                                                s0 = peg$FAILED;\n                                              }\n                                            } else {\n                                              peg$currPos = s0;\n                                              s0 = peg$FAILED;\n                                            }\n                                          } else {\n                                            peg$currPos = s0;\n                                            s0 = peg$FAILED;\n                                          }\n                                        } else {\n                                          peg$currPos = s0;\n                                          s0 = peg$FAILED;\n                                        }\n                                      } else {\n                                        peg$currPos = s0;\n                                        s0 = peg$FAILED;\n                                      }\n                                    } else {\n                                      peg$currPos = s0;\n                                      s0 = peg$FAILED;\n                                    }\n                                  } else {\n                                    peg$currPos = s0;\n                                    s0 = peg$FAILED;\n                                  }\n                                } else {\n                                  peg$currPos = s0;\n                                  s0 = peg$FAILED;\n                                }\n                              } else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          s1 = peg$parseKW_CAST();\n          if (s1 !== peg$FAILED) {\n            s2 = peg$parse__();\n            if (s2 !== peg$FAILED) {\n              s3 = peg$parseLPAREN();\n              if (s3 !== peg$FAILED) {\n                s4 = peg$parse__();\n                if (s4 !== peg$FAILED) {\n                  s5 = peg$parseexpr();\n                  if (s5 !== peg$FAILED) {\n                    s6 = peg$parse__();\n                    if (s6 !== peg$FAILED) {\n                      s7 = peg$parseKW_AS();\n                      if (s7 !== peg$FAILED) {\n                        s8 = peg$parse__();\n                        if (s8 !== peg$FAILED) {\n                          s9 = peg$parsesignedness();\n                          if (s9 !== peg$FAILED) {\n                            s10 = peg$parse__();\n                            if (s10 !== peg$FAILED) {\n                              s11 = peg$parseKW_INTEGER();\n                              if (s11 === peg$FAILED) {\n                                s11 = null;\n                              }\n                              if (s11 !== peg$FAILED) {\n                                s12 = peg$parse__();\n                                if (s12 !== peg$FAILED) {\n                                  s13 = peg$parseRPAREN();\n                                  if (s13 !== peg$FAILED) {\n                                    peg$savedPos = s0;\n                                    s1 = peg$c232(s5, s9, s11);\n                                    s0 = s1;\n                                  } else {\n                                    peg$currPos = s0;\n                                    s0 = peg$FAILED;\n                                  }\n                                } else {\n                                  peg$currPos = s0;\n                                  s0 = peg$FAILED;\n                                }\n                              } else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsesignedness() {\n    var s0;\n\n    s0 = peg$parseKW_SIGNED();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseKW_UNSIGNED();\n    }\n\n    return s0;\n  }\n\n  function peg$parseliteral() {\n    var s0;\n\n    s0 = peg$parseliteral_string();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseliteral_numeric();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseliteral_bool();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parseliteral_null();\n          if (s0 === peg$FAILED) {\n            s0 = peg$parseliteral_datetime();\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseliteral_list() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseliteral();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseCOMMA();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseliteral();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseliteral();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c17(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseliteral_null() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_NULL();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c233();\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parseliteral_not_null() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_NOT_NULL();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c234();\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parseliteral_bool() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_TRUE();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c235();\n    }\n    s0 = s1;\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_FALSE();\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c236();\n      }\n      s0 = s1;\n    }\n\n    return s0;\n  }\n\n  function peg$parseliteral_string() {\n    var s0, s1, s2, s3, s4, s5, s6;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 1).toLowerCase() === peg$c237) {\n      s1 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c238); }\n    }\n    if (s1 === peg$FAILED) {\n      s1 = null;\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 39) {\n          s4 = peg$c149;\n          peg$currPos++;\n        } else {\n          s4 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c150); }\n        }\n        if (s4 !== peg$FAILED) {\n          s5 = [];\n          s6 = peg$parsesingle_char();\n          while (s6 !== peg$FAILED) {\n            s5.push(s6);\n            s6 = peg$parsesingle_char();\n          }\n          if (s5 !== peg$FAILED) {\n            if (input.charCodeAt(peg$currPos) === 39) {\n              s6 = peg$c149;\n              peg$currPos++;\n            } else {\n              s6 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c150); }\n            }\n            if (s6 !== peg$FAILED) {\n              s4 = [s4, s5, s6];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c239(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      if (input.substr(peg$currPos, 1).toLowerCase() === peg$c237) {\n        s1 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c238); }\n      }\n      if (s1 === peg$FAILED) {\n        s1 = null;\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$currPos;\n          if (input.charCodeAt(peg$currPos) === 34) {\n            s4 = peg$c144;\n            peg$currPos++;\n          } else {\n            s4 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c145); }\n          }\n          if (s4 !== peg$FAILED) {\n            s5 = [];\n            s6 = peg$parsesingle_quote_char();\n            while (s6 !== peg$FAILED) {\n              s5.push(s6);\n              s6 = peg$parsesingle_quote_char();\n            }\n            if (s5 !== peg$FAILED) {\n              if (input.charCodeAt(peg$currPos) === 34) {\n                s6 = peg$c144;\n                peg$currPos++;\n              } else {\n                s6 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c145); }\n              }\n              if (s6 !== peg$FAILED) {\n                s4 = [s4, s5, s6];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c240(s1, s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseliteral_datetime() {\n    var s0, s1, s2, s3, s4, s5, s6;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_TIME();\n    if (s1 === peg$FAILED) {\n      s1 = peg$parseKW_DATE();\n      if (s1 === peg$FAILED) {\n        s1 = peg$parseKW_TIMESTAMP();\n        if (s1 === peg$FAILED) {\n          s1 = peg$parseKW_DATETIME();\n        }\n      }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 39) {\n          s4 = peg$c149;\n          peg$currPos++;\n        } else {\n          s4 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c150); }\n        }\n        if (s4 !== peg$FAILED) {\n          s5 = [];\n          s6 = peg$parsesingle_char();\n          while (s6 !== peg$FAILED) {\n            s5.push(s6);\n            s6 = peg$parsesingle_char();\n          }\n          if (s5 !== peg$FAILED) {\n            if (input.charCodeAt(peg$currPos) === 39) {\n              s6 = peg$c149;\n              peg$currPos++;\n            } else {\n              s6 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c150); }\n            }\n            if (s6 !== peg$FAILED) {\n              s4 = [s4, s5, s6];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c241(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_TIME();\n      if (s1 === peg$FAILED) {\n        s1 = peg$parseKW_DATE();\n        if (s1 === peg$FAILED) {\n          s1 = peg$parseKW_TIMESTAMP();\n          if (s1 === peg$FAILED) {\n            s1 = peg$parseKW_DATETIME();\n          }\n        }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$currPos;\n          if (input.charCodeAt(peg$currPos) === 34) {\n            s4 = peg$c144;\n            peg$currPos++;\n          } else {\n            s4 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c145); }\n          }\n          if (s4 !== peg$FAILED) {\n            s5 = [];\n            s6 = peg$parsesingle_quote_char();\n            while (s6 !== peg$FAILED) {\n              s5.push(s6);\n              s6 = peg$parsesingle_quote_char();\n            }\n            if (s5 !== peg$FAILED) {\n              if (input.charCodeAt(peg$currPos) === 34) {\n                s6 = peg$c144;\n                peg$currPos++;\n              } else {\n                s6 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c145); }\n              }\n              if (s6 !== peg$FAILED) {\n                s4 = [s4, s5, s6];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c241(s1, s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsesingle_quote_char() {\n    var s0;\n\n    if (peg$c242.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c243); }\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseescape_char();\n    }\n\n    return s0;\n  }\n\n  function peg$parsesingle_char() {\n    var s0;\n\n    if (peg$c244.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c245); }\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseescape_char();\n    }\n\n    return s0;\n  }\n\n  function peg$parseescape_char() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 2) === peg$c246) {\n      s1 = peg$c246;\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c247); }\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c248();\n    }\n    s0 = s1;\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      if (input.substr(peg$currPos, 2) === peg$c249) {\n        s1 = peg$c249;\n        peg$currPos += 2;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c250); }\n      }\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c251();\n      }\n      s0 = s1;\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        if (input.substr(peg$currPos, 2) === peg$c252) {\n          s1 = peg$c252;\n          peg$currPos += 2;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c253); }\n        }\n        if (s1 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c254();\n        }\n        s0 = s1;\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          if (input.substr(peg$currPos, 2) === peg$c255) {\n            s1 = peg$c255;\n            peg$currPos += 2;\n          } else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c256); }\n          }\n          if (s1 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c257();\n          }\n          s0 = s1;\n          if (s0 === peg$FAILED) {\n            s0 = peg$currPos;\n            if (input.substr(peg$currPos, 2) === peg$c258) {\n              s1 = peg$c258;\n              peg$currPos += 2;\n            } else {\n              s1 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c259); }\n            }\n            if (s1 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c260();\n            }\n            s0 = s1;\n            if (s0 === peg$FAILED) {\n              s0 = peg$currPos;\n              if (input.substr(peg$currPos, 2) === peg$c261) {\n                s1 = peg$c261;\n                peg$currPos += 2;\n              } else {\n                s1 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c262); }\n              }\n              if (s1 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c263();\n              }\n              s0 = s1;\n              if (s0 === peg$FAILED) {\n                s0 = peg$currPos;\n                if (input.substr(peg$currPos, 2) === peg$c264) {\n                  s1 = peg$c264;\n                  peg$currPos += 2;\n                } else {\n                  s1 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c265); }\n                }\n                if (s1 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c266();\n                }\n                s0 = s1;\n                if (s0 === peg$FAILED) {\n                  s0 = peg$currPos;\n                  if (input.substr(peg$currPos, 2) === peg$c267) {\n                    s1 = peg$c267;\n                    peg$currPos += 2;\n                  } else {\n                    s1 = peg$FAILED;\n                    if (peg$silentFails === 0) { peg$fail(peg$c268); }\n                  }\n                  if (s1 !== peg$FAILED) {\n                    peg$savedPos = s0;\n                    s1 = peg$c269();\n                  }\n                  s0 = s1;\n                  if (s0 === peg$FAILED) {\n                    s0 = peg$currPos;\n                    if (input.substr(peg$currPos, 2) === peg$c270) {\n                      s1 = peg$c270;\n                      peg$currPos += 2;\n                    } else {\n                      s1 = peg$FAILED;\n                      if (peg$silentFails === 0) { peg$fail(peg$c271); }\n                    }\n                    if (s1 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s1 = peg$c272();\n                    }\n                    s0 = s1;\n                    if (s0 === peg$FAILED) {\n                      s0 = peg$currPos;\n                      if (input.substr(peg$currPos, 2) === peg$c273) {\n                        s1 = peg$c273;\n                        peg$currPos += 2;\n                      } else {\n                        s1 = peg$FAILED;\n                        if (peg$silentFails === 0) { peg$fail(peg$c274); }\n                      }\n                      if (s1 !== peg$FAILED) {\n                        s2 = peg$parsehexDigit();\n                        if (s2 !== peg$FAILED) {\n                          s3 = peg$parsehexDigit();\n                          if (s3 !== peg$FAILED) {\n                            s4 = peg$parsehexDigit();\n                            if (s4 !== peg$FAILED) {\n                              s5 = peg$parsehexDigit();\n                              if (s5 !== peg$FAILED) {\n                                peg$savedPos = s0;\n                                s1 = peg$c275(s2, s3, s4, s5);\n                                s0 = s1;\n                              } else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                      if (s0 === peg$FAILED) {\n                        s0 = peg$currPos;\n                        if (input.charCodeAt(peg$currPos) === 92) {\n                          s1 = peg$c276;\n                          peg$currPos++;\n                        } else {\n                          s1 = peg$FAILED;\n                          if (peg$silentFails === 0) { peg$fail(peg$c277); }\n                        }\n                        if (s1 !== peg$FAILED) {\n                          peg$savedPos = s0;\n                          s1 = peg$c254();\n                        }\n                        s0 = s1;\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseline_terminator() {\n    var s0;\n\n    if (peg$c278.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c279); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseliteral_numeric() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    s1 = peg$parsenumber();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c280(s1);\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parsenumber() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseint();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parsefrac();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseexp();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c281(s1, s2, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseint();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parsefrac();\n        if (s2 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c282(s1, s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parseint();\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parseexp();\n          if (s2 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c283(s1, s2);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          s1 = peg$parseint();\n          if (s1 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c284(s1);\n          }\n          s0 = s1;\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseint() {\n    var s0, s1, s2;\n\n    s0 = peg$parsedigits();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsedigit();\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 45) {\n          s1 = peg$c124;\n          peg$currPos++;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c125); }\n        }\n        if (s1 === peg$FAILED) {\n          if (input.charCodeAt(peg$currPos) === 43) {\n            s1 = peg$c122;\n            peg$currPos++;\n          } else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c123); }\n          }\n        }\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parsedigits();\n          if (s2 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c285(s1, s2);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          if (input.charCodeAt(peg$currPos) === 45) {\n            s1 = peg$c124;\n            peg$currPos++;\n          } else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c125); }\n          }\n          if (s1 === peg$FAILED) {\n            if (input.charCodeAt(peg$currPos) === 43) {\n              s1 = peg$c122;\n              peg$currPos++;\n            } else {\n              s1 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c123); }\n            }\n          }\n          if (s1 !== peg$FAILED) {\n            s2 = peg$parsedigit();\n            if (s2 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c286(s1, s2);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsefrac() {\n    var s0, s1, s2;\n\n    s0 = peg$currPos;\n    if (input.charCodeAt(peg$currPos) === 46) {\n      s1 = peg$c287;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c288); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parsedigits();\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c289(s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseexp() {\n    var s0, s1, s2;\n\n    s0 = peg$currPos;\n    s1 = peg$parsee();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parsedigits();\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c290(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsedigits() {\n    var s0, s1, s2;\n\n    s0 = peg$currPos;\n    s1 = [];\n    s2 = peg$parsedigit();\n    if (s2 !== peg$FAILED) {\n      while (s2 !== peg$FAILED) {\n        s1.push(s2);\n        s2 = peg$parsedigit();\n      }\n    } else {\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c291(s1);\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parsedigit() {\n    var s0;\n\n    if (peg$c292.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c293); }\n    }\n\n    return s0;\n  }\n\n  function peg$parsehexDigit() {\n    var s0;\n\n    if (peg$c294.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c295); }\n    }\n\n    return s0;\n  }\n\n  function peg$parsee() {\n    var s0, s1, s2;\n\n    s0 = peg$currPos;\n    if (peg$c296.test(input.charAt(peg$currPos))) {\n      s1 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c297); }\n    }\n    if (s1 !== peg$FAILED) {\n      if (peg$c298.test(input.charAt(peg$currPos))) {\n        s2 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c299); }\n      }\n      if (s2 === peg$FAILED) {\n        s2 = null;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c300(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_NULL() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c301) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c302); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_DEFAULT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c303) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c304); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_NOT_NULL() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c305) {\n      s1 = input.substr(peg$currPos, 8);\n      peg$currPos += 8;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c306); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_TRUE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c307) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c308); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_TO() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 2).toLowerCase() === peg$c309) {\n      s1 = input.substr(peg$currPos, 2);\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c310); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_FALSE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c311) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c312); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_DROP() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c313) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c314); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c315();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_USE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c316) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c317); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_SELECT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c318) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c319); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_IF_NOT_EXISTS() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 13).toLowerCase() === peg$c320) {\n      s1 = input.substr(peg$currPos, 13);\n      peg$currPos += 13;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c321); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_RECURSIVE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 9) === peg$c322) {\n      s1 = peg$c322;\n      peg$currPos += 9;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c323); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_IGNORE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c324) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c325); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_EXPLAIN() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c326) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c327); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_PARTITION() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 9).toLowerCase() === peg$c328) {\n      s1 = input.substr(peg$currPos, 9);\n      peg$currPos += 9;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c329); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c330();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_INTO() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c331) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c332); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_FROM() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c333) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c334); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_SET() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c335) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c336); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_UNLOCK() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c337) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c338); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_LOCK() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c339) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c340); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_AS() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 2).toLowerCase() === peg$c24) {\n      s1 = input.substr(peg$currPos, 2);\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c25); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_TABLE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c341) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c342); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c343();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_TABLES() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c344) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c345); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c346();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_COLLATE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c347) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c348); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c349();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_ON() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 2).toLowerCase() === peg$c350) {\n      s1 = input.substr(peg$currPos, 2);\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c351); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_LEFT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c352) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c353); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_RIGHT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c354) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c355); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_FULL() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c356) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c357); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_INNER() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c358) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c359); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_CROSS() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c360) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c361); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_JOIN() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c362) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c363); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_OUTER() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c364) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c365); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_OVER() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c366) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c367); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_UNION() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c368) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c369); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_VALUE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c370) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c371); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c372();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_VALUES() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c373) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c374); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_USING() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c375) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c376); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_WHERE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c377) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c378); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_WITH() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c379) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c380); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_GROUP() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c381) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c382); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_BY() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 2).toLowerCase() === peg$c383) {\n      s1 = input.substr(peg$currPos, 2);\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c384); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_ORDER() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c385) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c386); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_HAVING() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c387) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c388); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_WINDOW() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c389) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c390); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_ORDINAL() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c391) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c392); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c393();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_LIMIT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c394) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c395); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_OFFSET() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c396) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c397); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c398();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_ASC() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c399) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c400); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c401();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_DESC() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c402) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c403); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c404();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_ALL() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c405) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c406); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c407();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_DISTINCT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c408) {\n      s1 = input.substr(peg$currPos, 8);\n      peg$currPos += 8;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c409); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c410();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_BETWEEN() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c411) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c412); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c413();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_IN() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 2).toLowerCase() === peg$c414) {\n      s1 = input.substr(peg$currPos, 2);\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c415); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c416();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_IS() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 2).toLowerCase() === peg$c417) {\n      s1 = input.substr(peg$currPos, 2);\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c418); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c419();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_LIKE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c420) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c421); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c422();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_EXISTS() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c423) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c424); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c425();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_NOT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c426) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c427); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c428();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_AND() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c429) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c430); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c431();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_OR() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 2).toLowerCase() === peg$c432) {\n      s1 = input.substr(peg$currPos, 2);\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c433); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c434();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_COUNT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c435) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c436); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c437();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_MAX() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c438) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c439); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c440();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_MIN() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c441) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c442); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c443();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_SUM() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c444) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c445); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c446();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_AVG() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c447) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c448); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c449();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_EXTRACT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c450) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c451); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c452();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_CALL() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c453) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c454); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c455();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_CASE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c456) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c457); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_WHEN() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c458) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c459); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_THEN() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c460) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c461); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_ELSE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c462) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c463); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_END() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c464) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c465); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_CAST() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c466) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c467); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_ARRAY() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c468) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c469); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c470();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_BYTES() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c471) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c472); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c473();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_BOOL() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c474) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c475); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c476();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_CHAR() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c477) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c478); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c479();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_GEOGRAPHY() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 9).toLowerCase() === peg$c480) {\n      s1 = input.substr(peg$currPos, 9);\n      peg$currPos += 9;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c481); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c482();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_VARCHAR() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c483) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c484); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c485();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_NUMERIC() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c486) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c487); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c488();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_DECIMAL() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c489) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c490); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c491();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_SIGNED() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c492) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c493); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c494();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_UNSIGNED() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c495) {\n      s1 = input.substr(peg$currPos, 8);\n      peg$currPos += 8;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c496); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c497();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_INT_64() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c498) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c499); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c500();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_ZEROFILL() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c501) {\n      s1 = input.substr(peg$currPos, 8);\n      peg$currPos += 8;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c502); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c503();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_INTEGER() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c504) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c505); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c506();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_JSON() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c507) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c508); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c509();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_SMALLINT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c510) {\n      s1 = input.substr(peg$currPos, 8);\n      peg$currPos += 8;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c511); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c512();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_STRING() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c513) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c514); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c515();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_STRUCT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c516) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c517); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c518();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_TINYINT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c519) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c520); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c521();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_TINYTEXT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c522) {\n      s1 = input.substr(peg$currPos, 8);\n      peg$currPos += 8;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c523); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c524();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_TEXT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c525) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c526); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c527();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_MEDIUMTEXT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 10).toLowerCase() === peg$c528) {\n      s1 = input.substr(peg$currPos, 10);\n      peg$currPos += 10;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c529); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c530();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_LONGTEXT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c531) {\n      s1 = input.substr(peg$currPos, 8);\n      peg$currPos += 8;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c532); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c533();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_BIGINT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c534) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c535); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c536();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_FLOAT_64() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c537) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c538); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c539();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_DOUBLE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c540) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c541); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c542();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_DATE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c543) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c544); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c545();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_DATETIME() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c546) {\n      s1 = input.substr(peg$currPos, 8);\n      peg$currPos += 8;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c547); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c548();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_TIME() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c549) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c550); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c551();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_TIMESTAMP() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 9).toLowerCase() === peg$c552) {\n      s1 = input.substr(peg$currPos, 9);\n      peg$currPos += 9;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c553); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c554();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_TRUNCATE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c555) {\n      s1 = input.substr(peg$currPos, 8);\n      peg$currPos += 8;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c556); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c557();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_USER() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c558) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c559); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c560();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_CURRENT_DATE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 12).toLowerCase() === peg$c561) {\n      s1 = input.substr(peg$currPos, 12);\n      peg$currPos += 12;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c562); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c563();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_ADD_DATE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c564) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c565); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c566();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_INTERVAL() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c567) {\n      s1 = input.substr(peg$currPos, 8);\n      peg$currPos += 8;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c568); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c569();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_UNIT_YEAR() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c225) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c226); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c570();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_UNIT_MONTH() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c211) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c212); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c571();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_UNIT_DAY() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c187) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c188); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c572();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_UNIT_HOUR() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c197) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c198); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c573();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_UNIT_MINUTE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c209) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c210); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c574();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_UNIT_SECOND() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c215) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c216); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c575();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_CURRENT_TIME() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 12).toLowerCase() === peg$c576) {\n      s1 = input.substr(peg$currPos, 12);\n      peg$currPos += 12;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c577); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c578();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_CURRENT_TIMESTAMP() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 17).toLowerCase() === peg$c579) {\n      s1 = input.substr(peg$currPos, 17);\n      peg$currPos += 17;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c580); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c581();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_GLOBAL() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c582) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c583); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c584();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_SESSION() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c585) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c586); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c587();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_LOCAL() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c588) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c589); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c590();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_PERSIST() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c591) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c592); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c593();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_PERSIST_ONLY() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 12).toLowerCase() === peg$c594) {\n      s1 = input.substr(peg$currPos, 12);\n      peg$currPos += 12;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c595); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c596();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_ADD() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c597) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c598); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c599();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_COLUMN() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c600) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c601); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c602();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_INDEX() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c603) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c604); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c605();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_KEY() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c606) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c607); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c608();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_FULLTEXT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c609) {\n      s1 = input.substr(peg$currPos, 8);\n      peg$currPos += 8;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c610); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c611();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_UNIQUE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c612) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c613); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c614();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_COMMENT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c615) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c616); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c617();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_CONSTRAINT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 10).toLowerCase() === peg$c618) {\n      s1 = input.substr(peg$currPos, 10);\n      peg$currPos += 10;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c619); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c620();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_REFERENCES() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 10).toLowerCase() === peg$c621) {\n      s1 = input.substr(peg$currPos, 10);\n      peg$currPos += 10;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c622); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c623();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseDOT() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 46) {\n      s0 = peg$c287;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c288); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseCOMMA() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 44) {\n      s0 = peg$c624;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c625); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseSTAR() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 42) {\n      s0 = peg$c127;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c128); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseLPAREN() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 40) {\n      s0 = peg$c2;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c3); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseRPAREN() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 41) {\n      s0 = peg$c4;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c5); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseLANGLE() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 60) {\n      s0 = peg$c112;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c113); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseRANGLE() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 62) {\n      s0 = peg$c106;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c107); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseLBRAKE() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 91) {\n      s0 = peg$c626;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c627); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseRBRAKE() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 93) {\n      s0 = peg$c628;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c629); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseSEMICOLON() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 59) {\n      s0 = peg$c630;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c631); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseOPERATOR_CONCATENATION() {\n    var s0;\n\n    if (input.substr(peg$currPos, 2) === peg$c632) {\n      s0 = peg$c632;\n      peg$currPos += 2;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c633); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseOPERATOR_AND() {\n    var s0;\n\n    if (input.substr(peg$currPos, 2) === peg$c634) {\n      s0 = peg$c634;\n      peg$currPos += 2;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c635); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseLOGIC_OPERATOR() {\n    var s0;\n\n    s0 = peg$parseOPERATOR_CONCATENATION();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseOPERATOR_AND();\n    }\n\n    return s0;\n  }\n\n  function peg$parse__() {\n    var s0, s1;\n\n    s0 = [];\n    s1 = peg$parsewhitespace();\n    if (s1 === peg$FAILED) {\n      s1 = peg$parsecomment();\n    }\n    while (s1 !== peg$FAILED) {\n      s0.push(s1);\n      s1 = peg$parsewhitespace();\n      if (s1 === peg$FAILED) {\n        s1 = peg$parsecomment();\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parse___() {\n    var s0, s1;\n\n    s0 = [];\n    s1 = peg$parsewhitespace();\n    if (s1 === peg$FAILED) {\n      s1 = peg$parsecomment();\n    }\n    if (s1 !== peg$FAILED) {\n      while (s1 !== peg$FAILED) {\n        s0.push(s1);\n        s1 = peg$parsewhitespace();\n        if (s1 === peg$FAILED) {\n          s1 = peg$parsecomment();\n        }\n      }\n    } else {\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecomment() {\n    var s0;\n\n    s0 = peg$parseblock_comment();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseline_comment();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parsepound_sign_comment();\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseblock_comment() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 2) === peg$c636) {\n      s1 = peg$c636;\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c637); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$currPos;\n      peg$silentFails++;\n      if (input.substr(peg$currPos, 2) === peg$c638) {\n        s5 = peg$c638;\n        peg$currPos += 2;\n      } else {\n        s5 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c639); }\n      }\n      peg$silentFails--;\n      if (s5 === peg$FAILED) {\n        s4 = void 0;\n      } else {\n        peg$currPos = s4;\n        s4 = peg$FAILED;\n      }\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parsechar();\n        if (s5 !== peg$FAILED) {\n          s4 = [s4, s5];\n          s3 = s4;\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$currPos;\n        peg$silentFails++;\n        if (input.substr(peg$currPos, 2) === peg$c638) {\n          s5 = peg$c638;\n          peg$currPos += 2;\n        } else {\n          s5 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c639); }\n        }\n        peg$silentFails--;\n        if (s5 === peg$FAILED) {\n          s4 = void 0;\n        } else {\n          peg$currPos = s4;\n          s4 = peg$FAILED;\n        }\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parsechar();\n          if (s5 !== peg$FAILED) {\n            s4 = [s4, s5];\n            s3 = s4;\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        if (input.substr(peg$currPos, 2) === peg$c638) {\n          s3 = peg$c638;\n          peg$currPos += 2;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c639); }\n        }\n        if (s3 !== peg$FAILED) {\n          s1 = [s1, s2, s3];\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseline_comment() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 2) === peg$c640) {\n      s1 = peg$c640;\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c641); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$currPos;\n      peg$silentFails++;\n      s5 = peg$parseEOL();\n      peg$silentFails--;\n      if (s5 === peg$FAILED) {\n        s4 = void 0;\n      } else {\n        peg$currPos = s4;\n        s4 = peg$FAILED;\n      }\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parsechar();\n        if (s5 !== peg$FAILED) {\n          s4 = [s4, s5];\n          s3 = s4;\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$currPos;\n        peg$silentFails++;\n        s5 = peg$parseEOL();\n        peg$silentFails--;\n        if (s5 === peg$FAILED) {\n          s4 = void 0;\n        } else {\n          peg$currPos = s4;\n          s4 = peg$FAILED;\n        }\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parsechar();\n          if (s5 !== peg$FAILED) {\n            s4 = [s4, s5];\n            s3 = s4;\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsepound_sign_comment() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    if (input.charCodeAt(peg$currPos) === 35) {\n      s1 = peg$c642;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c643); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$currPos;\n      peg$silentFails++;\n      s5 = peg$parseEOL();\n      peg$silentFails--;\n      if (s5 === peg$FAILED) {\n        s4 = void 0;\n      } else {\n        peg$currPos = s4;\n        s4 = peg$FAILED;\n      }\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parsechar();\n        if (s5 !== peg$FAILED) {\n          s4 = [s4, s5];\n          s3 = s4;\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$currPos;\n        peg$silentFails++;\n        s5 = peg$parseEOL();\n        peg$silentFails--;\n        if (s5 === peg$FAILED) {\n          s4 = void 0;\n        } else {\n          peg$currPos = s4;\n          s4 = peg$FAILED;\n        }\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parsechar();\n          if (s5 !== peg$FAILED) {\n            s4 = [s4, s5];\n            s3 = s4;\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsechar() {\n    var s0;\n\n    if (input.length > peg$currPos) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c644); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseinterval_unit() {\n    var s0;\n\n    s0 = peg$parseKW_UNIT_YEAR();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseKW_UNIT_MONTH();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseKW_UNIT_DAY();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parseKW_UNIT_HOUR();\n          if (s0 === peg$FAILED) {\n            s0 = peg$parseKW_UNIT_MINUTE();\n            if (s0 === peg$FAILED) {\n              s0 = peg$parseKW_UNIT_SECOND();\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsewhitespace() {\n    var s0;\n\n    if (peg$c645.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c646); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseEOL() {\n    var s0, s1;\n\n    s0 = peg$parseEOF();\n    if (s0 === peg$FAILED) {\n      s0 = [];\n      if (peg$c278.test(input.charAt(peg$currPos))) {\n        s1 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c279); }\n      }\n      if (s1 !== peg$FAILED) {\n        while (s1 !== peg$FAILED) {\n          s0.push(s1);\n          if (peg$c278.test(input.charAt(peg$currPos))) {\n            s1 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c279); }\n          }\n        }\n      } else {\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseEOF() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    peg$silentFails++;\n    if (input.length > peg$currPos) {\n      s1 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c644); }\n    }\n    peg$silentFails--;\n    if (s1 === peg$FAILED) {\n      s0 = void 0;\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsedata_type_list() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsedata_type_alias();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseCOMMA();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parsedata_type_alias();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parsedata_type_alias();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c17(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsedata_type_alias() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$currPos;\n    s2 = peg$parseident_name();\n    if (s2 !== peg$FAILED) {\n      peg$savedPos = peg$currPos;\n      s3 = peg$c647(s2);\n      if (s3) {\n        s3 = peg$FAILED;\n      } else {\n        s3 = void 0;\n      }\n      if (s3 !== peg$FAILED) {\n        peg$savedPos = s1;\n        s2 = peg$c648(s2);\n        s1 = s2;\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s1;\n      s1 = peg$FAILED;\n    }\n    if (s1 === peg$FAILED) {\n      s1 = null;\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsedata_type();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c649(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsedata_type() {\n    var s0;\n\n    s0 = peg$parsestruct_type();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsearray_type();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parsecharacter_string_type();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parsenumeric_type();\n          if (s0 === peg$FAILED) {\n            s0 = peg$parsedatetime_type();\n            if (s0 === peg$FAILED) {\n              s0 = peg$parsebool_byte_geography_type();\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsecharacter_string_type() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_STRING();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c650(s1);\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parsenumeric_type() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_NUMERIC();\n    if (s1 === peg$FAILED) {\n      s1 = peg$parseKW_INT_64();\n      if (s1 === peg$FAILED) {\n        s1 = peg$parseKW_FLOAT_64();\n      }\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c650(s1);\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parsedatetime_type() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_DATE();\n    if (s1 === peg$FAILED) {\n      s1 = peg$parseKW_DATETIME();\n      if (s1 === peg$FAILED) {\n        s1 = peg$parseKW_TIME();\n        if (s1 === peg$FAILED) {\n          s1 = peg$parseKW_TIMESTAMP();\n        }\n      }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLPAREN();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = [];\n            if (peg$c292.test(input.charAt(peg$currPos))) {\n              s6 = input.charAt(peg$currPos);\n              peg$currPos++;\n            } else {\n              s6 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c293); }\n            }\n            if (s6 !== peg$FAILED) {\n              while (s6 !== peg$FAILED) {\n                s5.push(s6);\n                if (peg$c292.test(input.charAt(peg$currPos))) {\n                  s6 = input.charAt(peg$currPos);\n                  peg$currPos++;\n                } else {\n                  s6 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c293); }\n                }\n              }\n            } else {\n              s5 = peg$FAILED;\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseRPAREN();\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c651(s1, s5);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_DATE();\n      if (s1 === peg$FAILED) {\n        s1 = peg$parseKW_DATETIME();\n        if (s1 === peg$FAILED) {\n          s1 = peg$parseKW_TIME();\n          if (s1 === peg$FAILED) {\n            s1 = peg$parseKW_TIMESTAMP();\n          }\n        }\n      }\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c650(s1);\n      }\n      s0 = s1;\n    }\n\n    return s0;\n  }\n\n  function peg$parsebool_byte_geography_type() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_BYTES();\n    if (s1 === peg$FAILED) {\n      s1 = peg$parseKW_BOOL();\n      if (s1 === peg$FAILED) {\n        s1 = peg$parseKW_GEOGRAPHY();\n      }\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c650(s1);\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parsearray_type() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_ARRAY();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLANGLE();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsedata_type_list();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseRANGLE();\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c652(s1, s5);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsestruct_type() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_STRUCT();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLANGLE();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsedata_type_list();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseRANGLE();\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c652(s1, s5);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n\n    const reservedMap = {\n      'ARRAY': true,\n      'ALTER': true,\n      'ALL': true,\n      'ADD': true,\n      'AND': true,\n      'AS': true,\n      'ASC': true,\n\n      'BETWEEN': true,\n      'BY': true,\n\n      'CALL': true,\n      'CASE': true,\n      'CREATE': true,\n      'CROSS': true,\n      'CONTAINS': true,\n      'CURRENT_DATE': true,\n      'CURRENT_TIME': true,\n      'CURRENT_TIMESTAMP': true,\n      'CURRENT_USER': true,\n\n      'DELETE': true,\n      'DESC': true,\n      'DISTINCT': true,\n      'DROP': true,\n\n      'ELSE': true,\n      'END': true,\n      'EXISTS': true,\n      'EXPLAIN': true,\n\n      'FALSE': true,\n      'FROM': true,\n      'FULL': true,\n      'FOR': true,\n\n      'GROUP': true,\n\n      'HAVING': true,\n\n      'IN': true,\n      'INNER': true,\n      'INSERT': true,\n      'INTO': true,\n      'IS': true,\n\n      'JOIN': true,\n      'JSON': true,\n\n      'KEY': true,\n\n      'LEFT': true,\n      'LIKE': true,\n      'LIMIT': true,\n      'LOW_PRIORITY': true, // for lock table\n\n      'NOT': true,\n      'NULL': true,\n\n      'ON': true,\n      'OR': true,\n      'ORDER': true,\n      'OUTER': true,\n\n      'PARTITION': true,\n\n      'RECURSIVE': true,\n      'RENAME': true,\n      'READ': true, // for lock table\n      'RIGHT': true,\n\n      'SELECT': true,\n      'SESSION_USER': true,\n      'SET': true,\n      'SHOW': true,\n      'SYSTEM_USER': true,\n\n      'TABLE': true,\n      'THEN': true,\n      'TRUE': true,\n      'TRUNCATE': true,\n      'TYPE': true,   // reserved (MySQL)\n\n      'UNION': true,\n      'UPDATE': true,\n      'USING': true,\n\n      'VALUES': true,\n\n      'WINDOW': true,\n      'WITH': true,\n      'WHEN': true,\n      'WHERE': true,\n      'WRITE': true, // for lock table\n\n      'GLOBAL': true,\n      'SESSION': true,\n      'LOCAL': true,\n      'PERSIST': true,\n      'PERSIST_ONLY': true,\n    };\n\n    const DATA_TYPES = {\n      'BOOL': true,\n      'BYTE': true,\n      'DATE': true,\n      'DATETIME': true,\n      'FLOAT64': true,\n      'INT64': true,\n      'NUMERIC': true,\n      'STRING': true,\n      'TIME': true,\n      'TIMESTAMP': true,\n      'ARRAY': true,\n      'STRUCT': true,\n    }\n\n    function createUnaryExpr(op, e) {\n      return {\n        type: 'unary_expr',\n        operator: op,\n        expr: e\n      };\n    }\n\n    function createBinaryExpr(op, left, right) {\n      return {\n        type: 'binary_expr',\n        operator: op,\n        left: left,\n        right: right\n      };\n    }\n\n    function isBigInt(numberStr) {\n      const previousMaxSafe = BigInt(Number.MAX_SAFE_INTEGER)\n      const num = BigInt(numberStr)\n      if (num < previousMaxSafe) return false\n      return true\n    }\n\n    function createList(head, tail, po = 3) {\n      const result = [head];\n      for (let i = 0; i < tail.length; i++) {\n        result.push(tail[i][po]);\n      }\n      return result;\n    }\n\n    function createBinaryExprChain(head, tail) {\n      let result = head;\n      for (let i = 0; i < tail.length; i++) {\n        result = createBinaryExpr(tail[i][1], result, tail[i][3]);\n      }\n      return result;\n    }\n\n    function queryTableAlias(tableName) {\n      const alias = tableAlias[tableName]\n      if (alias) return alias\n      if (tableName) return tableName\n      return null\n    }\n\n    function columnListTableAlias(columnList) {\n      const newColumnsList = new Set()\n      const symbolChar = '::'\n      for(let column of columnList.keys()) {\n        const columnInfo = column.split(symbolChar)\n        if (!columnInfo) {\n          newColumnsList.add(column)\n          break\n        }\n        if (columnInfo && columnInfo[1]) columnInfo[1] = queryTableAlias(columnInfo[1])\n        newColumnsList.add(columnInfo.join(symbolChar))\n      }\n      return Array.from(newColumnsList)\n    }\n\n    function refreshColumnList(columnList) {\n      const columns = columnListTableAlias(columnList)\n      columnList.clear()\n      columns.forEach(col => columnList.add(col))\n    }\n\n    const cmpPrefixMap = {\n      '+': true,\n      '-': true,\n      '*': true,\n      '/': true,\n      '>': true,\n      '<': true,\n      '!': true,\n      '=': true,\n\n      //between\n      'B': true,\n      'b': true,\n      //for is or in\n      'I': true,\n      'i': true,\n      //for like\n      'L': true,\n      'l': true,\n      //for not\n      'N': true,\n      'n': true\n    };\n\n    // used for dependency analysis\n    let varList = [];\n\n    const tableList = new Set();\n    const columnList = new Set();\n    const tableAlias = {};\n\n\n  peg$result = peg$startRuleFunction();\n\n  if (peg$result !== peg$FAILED && peg$currPos === input.length) {\n    return peg$result;\n  } else {\n    if (peg$result !== peg$FAILED && peg$currPos < input.length) {\n      peg$fail(peg$endExpectation());\n    }\n\n    throw peg$buildStructuredError(\n      peg$maxFailExpected,\n      peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,\n      peg$maxFailPos < input.length\n        ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)\n        : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)\n    );\n  }\n}\n\nmodule.exports = {\n  SyntaxError: peg$SyntaxError,\n  parse:       peg$parse\n};\n","import Parser from './src/parser'\nimport * as util from './src/util'\n\nexport {\n  Parser,\n  util,\n}\n\nif (global && global.window) {\n  global.window.NodeSQLParser = {\n    Parser,\n    util,\n  }\n}\n","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n","var bigInt = (function (undefined) {\r\n    \"use strict\";\r\n\r\n    var BASE = 1e7,\r\n        LOG_BASE = 7,\r\n        MAX_INT = 9007199254740992,\r\n        MAX_INT_ARR = smallToArray(MAX_INT),\r\n        DEFAULT_ALPHABET = \"0123456789abcdefghijklmnopqrstuvwxyz\";\r\n\r\n    var supportsNativeBigInt = typeof BigInt === \"function\";\r\n\r\n    function Integer(v, radix, alphabet, caseSensitive) {\r\n        if (typeof v === \"undefined\") return Integer[0];\r\n        if (typeof radix !== \"undefined\") return +radix === 10 && !alphabet ? parseValue(v) : parseBase(v, radix, alphabet, caseSensitive);\r\n        return parseValue(v);\r\n    }\r\n\r\n    function BigInteger(value, sign) {\r\n        this.value = value;\r\n        this.sign = sign;\r\n        this.isSmall = false;\r\n    }\r\n    BigInteger.prototype = Object.create(Integer.prototype);\r\n\r\n    function SmallInteger(value) {\r\n        this.value = value;\r\n        this.sign = value < 0;\r\n        this.isSmall = true;\r\n    }\r\n    SmallInteger.prototype = Object.create(Integer.prototype);\r\n\r\n    function NativeBigInt(value) {\r\n        this.value = value;\r\n    }\r\n    NativeBigInt.prototype = Object.create(Integer.prototype);\r\n\r\n    function isPrecise(n) {\r\n        return -MAX_INT < n && n < MAX_INT;\r\n    }\r\n\r\n    function smallToArray(n) { // For performance reasons doesn't reference BASE, need to change this function if BASE changes\r\n        if (n < 1e7)\r\n            return [n];\r\n        if (n < 1e14)\r\n            return [n % 1e7, Math.floor(n / 1e7)];\r\n        return [n % 1e7, Math.floor(n / 1e7) % 1e7, Math.floor(n / 1e14)];\r\n    }\r\n\r\n    function arrayToSmall(arr) { // If BASE changes this function may need to change\r\n        trim(arr);\r\n        var length = arr.length;\r\n        if (length < 4 && compareAbs(arr, MAX_INT_ARR) < 0) {\r\n            switch (length) {\r\n                case 0: return 0;\r\n                case 1: return arr[0];\r\n                case 2: return arr[0] + arr[1] * BASE;\r\n                default: return arr[0] + (arr[1] + arr[2] * BASE) * BASE;\r\n            }\r\n        }\r\n        return arr;\r\n    }\r\n\r\n    function trim(v) {\r\n        var i = v.length;\r\n        while (v[--i] === 0);\r\n        v.length = i + 1;\r\n    }\r\n\r\n    function createArray(length) { // function shamelessly stolen from Yaffle's library https://github.com/Yaffle/BigInteger\r\n        var x = new Array(length);\r\n        var i = -1;\r\n        while (++i < length) {\r\n            x[i] = 0;\r\n        }\r\n        return x;\r\n    }\r\n\r\n    function truncate(n) {\r\n        if (n > 0) return Math.floor(n);\r\n        return Math.ceil(n);\r\n    }\r\n\r\n    function add(a, b) { // assumes a and b are arrays with a.length >= b.length\r\n        var l_a = a.length,\r\n            l_b = b.length,\r\n            r = new Array(l_a),\r\n            carry = 0,\r\n            base = BASE,\r\n            sum, i;\r\n        for (i = 0; i < l_b; i++) {\r\n            sum = a[i] + b[i] + carry;\r\n            carry = sum >= base ? 1 : 0;\r\n            r[i] = sum - carry * base;\r\n        }\r\n        while (i < l_a) {\r\n            sum = a[i] + carry;\r\n            carry = sum === base ? 1 : 0;\r\n            r[i++] = sum - carry * base;\r\n        }\r\n        if (carry > 0) r.push(carry);\r\n        return r;\r\n    }\r\n\r\n    function addAny(a, b) {\r\n        if (a.length >= b.length) return add(a, b);\r\n        return add(b, a);\r\n    }\r\n\r\n    function addSmall(a, carry) { // assumes a is array, carry is number with 0 <= carry < MAX_INT\r\n        var l = a.length,\r\n            r = new Array(l),\r\n            base = BASE,\r\n            sum, i;\r\n        for (i = 0; i < l; i++) {\r\n            sum = a[i] - base + carry;\r\n            carry = Math.floor(sum / base);\r\n            r[i] = sum - carry * base;\r\n            carry += 1;\r\n        }\r\n        while (carry > 0) {\r\n            r[i++] = carry % base;\r\n            carry = Math.floor(carry / base);\r\n        }\r\n        return r;\r\n    }\r\n\r\n    BigInteger.prototype.add = function (v) {\r\n        var n = parseValue(v);\r\n        if (this.sign !== n.sign) {\r\n            return this.subtract(n.negate());\r\n        }\r\n        var a = this.value, b = n.value;\r\n        if (n.isSmall) {\r\n            return new BigInteger(addSmall(a, Math.abs(b)), this.sign);\r\n        }\r\n        return new BigInteger(addAny(a, b), this.sign);\r\n    };\r\n    BigInteger.prototype.plus = BigInteger.prototype.add;\r\n\r\n    SmallInteger.prototype.add = function (v) {\r\n        var n = parseValue(v);\r\n        var a = this.value;\r\n        if (a < 0 !== n.sign) {\r\n            return this.subtract(n.negate());\r\n        }\r\n        var b = n.value;\r\n        if (n.isSmall) {\r\n            if (isPrecise(a + b)) return new SmallInteger(a + b);\r\n            b = smallToArray(Math.abs(b));\r\n        }\r\n        return new BigInteger(addSmall(b, Math.abs(a)), a < 0);\r\n    };\r\n    SmallInteger.prototype.plus = SmallInteger.prototype.add;\r\n\r\n    NativeBigInt.prototype.add = function (v) {\r\n        return new NativeBigInt(this.value + parseValue(v).value);\r\n    }\r\n    NativeBigInt.prototype.plus = NativeBigInt.prototype.add;\r\n\r\n    function subtract(a, b) { // assumes a and b are arrays with a >= b\r\n        var a_l = a.length,\r\n            b_l = b.length,\r\n            r = new Array(a_l),\r\n            borrow = 0,\r\n            base = BASE,\r\n            i, difference;\r\n        for (i = 0; i < b_l; i++) {\r\n            difference = a[i] - borrow - b[i];\r\n            if (difference < 0) {\r\n                difference += base;\r\n                borrow = 1;\r\n            } else borrow = 0;\r\n            r[i] = difference;\r\n        }\r\n        for (i = b_l; i < a_l; i++) {\r\n            difference = a[i] - borrow;\r\n            if (difference < 0) difference += base;\r\n            else {\r\n                r[i++] = difference;\r\n                break;\r\n            }\r\n            r[i] = difference;\r\n        }\r\n        for (; i < a_l; i++) {\r\n            r[i] = a[i];\r\n        }\r\n        trim(r);\r\n        return r;\r\n    }\r\n\r\n    function subtractAny(a, b, sign) {\r\n        var value;\r\n        if (compareAbs(a, b) >= 0) {\r\n            value = subtract(a, b);\r\n        } else {\r\n            value = subtract(b, a);\r\n            sign = !sign;\r\n        }\r\n        value = arrayToSmall(value);\r\n        if (typeof value === \"number\") {\r\n            if (sign) value = -value;\r\n            return new SmallInteger(value);\r\n        }\r\n        return new BigInteger(value, sign);\r\n    }\r\n\r\n    function subtractSmall(a, b, sign) { // assumes a is array, b is number with 0 <= b < MAX_INT\r\n        var l = a.length,\r\n            r = new Array(l),\r\n            carry = -b,\r\n            base = BASE,\r\n            i, difference;\r\n        for (i = 0; i < l; i++) {\r\n            difference = a[i] + carry;\r\n            carry = Math.floor(difference / base);\r\n            difference %= base;\r\n            r[i] = difference < 0 ? difference + base : difference;\r\n        }\r\n        r = arrayToSmall(r);\r\n        if (typeof r === \"number\") {\r\n            if (sign) r = -r;\r\n            return new SmallInteger(r);\r\n        } return new BigInteger(r, sign);\r\n    }\r\n\r\n    BigInteger.prototype.subtract = function (v) {\r\n        var n = parseValue(v);\r\n        if (this.sign !== n.sign) {\r\n            return this.add(n.negate());\r\n        }\r\n        var a = this.value, b = n.value;\r\n        if (n.isSmall)\r\n            return subtractSmall(a, Math.abs(b), this.sign);\r\n        return subtractAny(a, b, this.sign);\r\n    };\r\n    BigInteger.prototype.minus = BigInteger.prototype.subtract;\r\n\r\n    SmallInteger.prototype.subtract = function (v) {\r\n        var n = parseValue(v);\r\n        var a = this.value;\r\n        if (a < 0 !== n.sign) {\r\n            return this.add(n.negate());\r\n        }\r\n        var b = n.value;\r\n        if (n.isSmall) {\r\n            return new SmallInteger(a - b);\r\n        }\r\n        return subtractSmall(b, Math.abs(a), a >= 0);\r\n    };\r\n    SmallInteger.prototype.minus = SmallInteger.prototype.subtract;\r\n\r\n    NativeBigInt.prototype.subtract = function (v) {\r\n        return new NativeBigInt(this.value - parseValue(v).value);\r\n    }\r\n    NativeBigInt.prototype.minus = NativeBigInt.prototype.subtract;\r\n\r\n    BigInteger.prototype.negate = function () {\r\n        return new BigInteger(this.value, !this.sign);\r\n    };\r\n    SmallInteger.prototype.negate = function () {\r\n        var sign = this.sign;\r\n        var small = new SmallInteger(-this.value);\r\n        small.sign = !sign;\r\n        return small;\r\n    };\r\n    NativeBigInt.prototype.negate = function () {\r\n        return new NativeBigInt(-this.value);\r\n    }\r\n\r\n    BigInteger.prototype.abs = function () {\r\n        return new BigInteger(this.value, false);\r\n    };\r\n    SmallInteger.prototype.abs = function () {\r\n        return new SmallInteger(Math.abs(this.value));\r\n    };\r\n    NativeBigInt.prototype.abs = function () {\r\n        return new NativeBigInt(this.value >= 0 ? this.value : -this.value);\r\n    }\r\n\r\n\r\n    function multiplyLong(a, b) {\r\n        var a_l = a.length,\r\n            b_l = b.length,\r\n            l = a_l + b_l,\r\n            r = createArray(l),\r\n            base = BASE,\r\n            product, carry, i, a_i, b_j;\r\n        for (i = 0; i < a_l; ++i) {\r\n            a_i = a[i];\r\n            for (var j = 0; j < b_l; ++j) {\r\n                b_j = b[j];\r\n                product = a_i * b_j + r[i + j];\r\n                carry = Math.floor(product / base);\r\n                r[i + j] = product - carry * base;\r\n                r[i + j + 1] += carry;\r\n            }\r\n        }\r\n        trim(r);\r\n        return r;\r\n    }\r\n\r\n    function multiplySmall(a, b) { // assumes a is array, b is number with |b| < BASE\r\n        var l = a.length,\r\n            r = new Array(l),\r\n            base = BASE,\r\n            carry = 0,\r\n            product, i;\r\n        for (i = 0; i < l; i++) {\r\n            product = a[i] * b + carry;\r\n            carry = Math.floor(product / base);\r\n            r[i] = product - carry * base;\r\n        }\r\n        while (carry > 0) {\r\n            r[i++] = carry % base;\r\n            carry = Math.floor(carry / base);\r\n        }\r\n        return r;\r\n    }\r\n\r\n    function shiftLeft(x, n) {\r\n        var r = [];\r\n        while (n-- > 0) r.push(0);\r\n        return r.concat(x);\r\n    }\r\n\r\n    function multiplyKaratsuba(x, y) {\r\n        var n = Math.max(x.length, y.length);\r\n\r\n        if (n <= 30) return multiplyLong(x, y);\r\n        n = Math.ceil(n / 2);\r\n\r\n        var b = x.slice(n),\r\n            a = x.slice(0, n),\r\n            d = y.slice(n),\r\n            c = y.slice(0, n);\r\n\r\n        var ac = multiplyKaratsuba(a, c),\r\n            bd = multiplyKaratsuba(b, d),\r\n            abcd = multiplyKaratsuba(addAny(a, b), addAny(c, d));\r\n\r\n        var product = addAny(addAny(ac, shiftLeft(subtract(subtract(abcd, ac), bd), n)), shiftLeft(bd, 2 * n));\r\n        trim(product);\r\n        return product;\r\n    }\r\n\r\n    // The following function is derived from a surface fit of a graph plotting the performance difference\r\n    // between long multiplication and karatsuba multiplication versus the lengths of the two arrays.\r\n    function useKaratsuba(l1, l2) {\r\n        return -0.012 * l1 - 0.012 * l2 + 0.000015 * l1 * l2 > 0;\r\n    }\r\n\r\n    BigInteger.prototype.multiply = function (v) {\r\n        var n = parseValue(v),\r\n            a = this.value, b = n.value,\r\n            sign = this.sign !== n.sign,\r\n            abs;\r\n        if (n.isSmall) {\r\n            if (b === 0) return Integer[0];\r\n            if (b === 1) return this;\r\n            if (b === -1) return this.negate();\r\n            abs = Math.abs(b);\r\n            if (abs < BASE) {\r\n                return new BigInteger(multiplySmall(a, abs), sign);\r\n            }\r\n            b = smallToArray(abs);\r\n        }\r\n        if (useKaratsuba(a.length, b.length)) // Karatsuba is only faster for certain array sizes\r\n            return new BigInteger(multiplyKaratsuba(a, b), sign);\r\n        return new BigInteger(multiplyLong(a, b), sign);\r\n    };\r\n\r\n    BigInteger.prototype.times = BigInteger.prototype.multiply;\r\n\r\n    function multiplySmallAndArray(a, b, sign) { // a >= 0\r\n        if (a < BASE) {\r\n            return new BigInteger(multiplySmall(b, a), sign);\r\n        }\r\n        return new BigInteger(multiplyLong(b, smallToArray(a)), sign);\r\n    }\r\n    SmallInteger.prototype._multiplyBySmall = function (a) {\r\n        if (isPrecise(a.value * this.value)) {\r\n            return new SmallInteger(a.value * this.value);\r\n        }\r\n        return multiplySmallAndArray(Math.abs(a.value), smallToArray(Math.abs(this.value)), this.sign !== a.sign);\r\n    };\r\n    BigInteger.prototype._multiplyBySmall = function (a) {\r\n        if (a.value === 0) return Integer[0];\r\n        if (a.value === 1) return this;\r\n        if (a.value === -1) return this.negate();\r\n        return multiplySmallAndArray(Math.abs(a.value), this.value, this.sign !== a.sign);\r\n    };\r\n    SmallInteger.prototype.multiply = function (v) {\r\n        return parseValue(v)._multiplyBySmall(this);\r\n    };\r\n    SmallInteger.prototype.times = SmallInteger.prototype.multiply;\r\n\r\n    NativeBigInt.prototype.multiply = function (v) {\r\n        return new NativeBigInt(this.value * parseValue(v).value);\r\n    }\r\n    NativeBigInt.prototype.times = NativeBigInt.prototype.multiply;\r\n\r\n    function square(a) {\r\n        //console.assert(2 * BASE * BASE < MAX_INT);\r\n        var l = a.length,\r\n            r = createArray(l + l),\r\n            base = BASE,\r\n            product, carry, i, a_i, a_j;\r\n        for (i = 0; i < l; i++) {\r\n            a_i = a[i];\r\n            carry = 0 - a_i * a_i;\r\n            for (var j = i; j < l; j++) {\r\n                a_j = a[j];\r\n                product = 2 * (a_i * a_j) + r[i + j] + carry;\r\n                carry = Math.floor(product / base);\r\n                r[i + j] = product - carry * base;\r\n            }\r\n            r[i + l] = carry;\r\n        }\r\n        trim(r);\r\n        return r;\r\n    }\r\n\r\n    BigInteger.prototype.square = function () {\r\n        return new BigInteger(square(this.value), false);\r\n    };\r\n\r\n    SmallInteger.prototype.square = function () {\r\n        var value = this.value * this.value;\r\n        if (isPrecise(value)) return new SmallInteger(value);\r\n        return new BigInteger(square(smallToArray(Math.abs(this.value))), false);\r\n    };\r\n\r\n    NativeBigInt.prototype.square = function (v) {\r\n        return new NativeBigInt(this.value * this.value);\r\n    }\r\n\r\n    function divMod1(a, b) { // Left over from previous version. Performs faster than divMod2 on smaller input sizes.\r\n        var a_l = a.length,\r\n            b_l = b.length,\r\n            base = BASE,\r\n            result = createArray(b.length),\r\n            divisorMostSignificantDigit = b[b_l - 1],\r\n            // normalization\r\n            lambda = Math.ceil(base / (2 * divisorMostSignificantDigit)),\r\n            remainder = multiplySmall(a, lambda),\r\n            divisor = multiplySmall(b, lambda),\r\n            quotientDigit, shift, carry, borrow, i, l, q;\r\n        if (remainder.length <= a_l) remainder.push(0);\r\n        divisor.push(0);\r\n        divisorMostSignificantDigit = divisor[b_l - 1];\r\n        for (shift = a_l - b_l; shift >= 0; shift--) {\r\n            quotientDigit = base - 1;\r\n            if (remainder[shift + b_l] !== divisorMostSignificantDigit) {\r\n                quotientDigit = Math.floor((remainder[shift + b_l] * base + remainder[shift + b_l - 1]) / divisorMostSignificantDigit);\r\n            }\r\n            // quotientDigit <= base - 1\r\n            carry = 0;\r\n            borrow = 0;\r\n            l = divisor.length;\r\n            for (i = 0; i < l; i++) {\r\n                carry += quotientDigit * divisor[i];\r\n                q = Math.floor(carry / base);\r\n                borrow += remainder[shift + i] - (carry - q * base);\r\n                carry = q;\r\n                if (borrow < 0) {\r\n                    remainder[shift + i] = borrow + base;\r\n                    borrow = -1;\r\n                } else {\r\n                    remainder[shift + i] = borrow;\r\n                    borrow = 0;\r\n                }\r\n            }\r\n            while (borrow !== 0) {\r\n                quotientDigit -= 1;\r\n                carry = 0;\r\n                for (i = 0; i < l; i++) {\r\n                    carry += remainder[shift + i] - base + divisor[i];\r\n                    if (carry < 0) {\r\n                        remainder[shift + i] = carry + base;\r\n                        carry = 0;\r\n                    } else {\r\n                        remainder[shift + i] = carry;\r\n                        carry = 1;\r\n                    }\r\n                }\r\n                borrow += carry;\r\n            }\r\n            result[shift] = quotientDigit;\r\n        }\r\n        // denormalization\r\n        remainder = divModSmall(remainder, lambda)[0];\r\n        return [arrayToSmall(result), arrayToSmall(remainder)];\r\n    }\r\n\r\n    function divMod2(a, b) { // Implementation idea shamelessly stolen from Silent Matt's library http://silentmatt.com/biginteger/\r\n        // Performs faster than divMod1 on larger input sizes.\r\n        var a_l = a.length,\r\n            b_l = b.length,\r\n            result = [],\r\n            part = [],\r\n            base = BASE,\r\n            guess, xlen, highx, highy, check;\r\n        while (a_l) {\r\n            part.unshift(a[--a_l]);\r\n            trim(part);\r\n            if (compareAbs(part, b) < 0) {\r\n                result.push(0);\r\n                continue;\r\n            }\r\n            xlen = part.length;\r\n            highx = part[xlen - 1] * base + part[xlen - 2];\r\n            highy = b[b_l - 1] * base + b[b_l - 2];\r\n            if (xlen > b_l) {\r\n                highx = (highx + 1) * base;\r\n            }\r\n            guess = Math.ceil(highx / highy);\r\n            do {\r\n                check = multiplySmall(b, guess);\r\n                if (compareAbs(check, part) <= 0) break;\r\n                guess--;\r\n            } while (guess);\r\n            result.push(guess);\r\n            part = subtract(part, check);\r\n        }\r\n        result.reverse();\r\n        return [arrayToSmall(result), arrayToSmall(part)];\r\n    }\r\n\r\n    function divModSmall(value, lambda) {\r\n        var length = value.length,\r\n            quotient = createArray(length),\r\n            base = BASE,\r\n            i, q, remainder, divisor;\r\n        remainder = 0;\r\n        for (i = length - 1; i >= 0; --i) {\r\n            divisor = remainder * base + value[i];\r\n            q = truncate(divisor / lambda);\r\n            remainder = divisor - q * lambda;\r\n            quotient[i] = q | 0;\r\n        }\r\n        return [quotient, remainder | 0];\r\n    }\r\n\r\n    function divModAny(self, v) {\r\n        var value, n = parseValue(v);\r\n        if (supportsNativeBigInt) {\r\n            return [new NativeBigInt(self.value / n.value), new NativeBigInt(self.value % n.value)];\r\n        }\r\n        var a = self.value, b = n.value;\r\n        var quotient;\r\n        if (b === 0) throw new Error(\"Cannot divide by zero\");\r\n        if (self.isSmall) {\r\n            if (n.isSmall) {\r\n                return [new SmallInteger(truncate(a / b)), new SmallInteger(a % b)];\r\n            }\r\n            return [Integer[0], self];\r\n        }\r\n        if (n.isSmall) {\r\n            if (b === 1) return [self, Integer[0]];\r\n            if (b == -1) return [self.negate(), Integer[0]];\r\n            var abs = Math.abs(b);\r\n            if (abs < BASE) {\r\n                value = divModSmall(a, abs);\r\n                quotient = arrayToSmall(value[0]);\r\n                var remainder = value[1];\r\n                if (self.sign) remainder = -remainder;\r\n                if (typeof quotient === \"number\") {\r\n                    if (self.sign !== n.sign) quotient = -quotient;\r\n                    return [new SmallInteger(quotient), new SmallInteger(remainder)];\r\n                }\r\n                return [new BigInteger(quotient, self.sign !== n.sign), new SmallInteger(remainder)];\r\n            }\r\n            b = smallToArray(abs);\r\n        }\r\n        var comparison = compareAbs(a, b);\r\n        if (comparison === -1) return [Integer[0], self];\r\n        if (comparison === 0) return [Integer[self.sign === n.sign ? 1 : -1], Integer[0]];\r\n\r\n        // divMod1 is faster on smaller input sizes\r\n        if (a.length + b.length <= 200)\r\n            value = divMod1(a, b);\r\n        else value = divMod2(a, b);\r\n\r\n        quotient = value[0];\r\n        var qSign = self.sign !== n.sign,\r\n            mod = value[1],\r\n            mSign = self.sign;\r\n        if (typeof quotient === \"number\") {\r\n            if (qSign) quotient = -quotient;\r\n            quotient = new SmallInteger(quotient);\r\n        } else quotient = new BigInteger(quotient, qSign);\r\n        if (typeof mod === \"number\") {\r\n            if (mSign) mod = -mod;\r\n            mod = new SmallInteger(mod);\r\n        } else mod = new BigInteger(mod, mSign);\r\n        return [quotient, mod];\r\n    }\r\n\r\n    BigInteger.prototype.divmod = function (v) {\r\n        var result = divModAny(this, v);\r\n        return {\r\n            quotient: result[0],\r\n            remainder: result[1]\r\n        };\r\n    };\r\n    NativeBigInt.prototype.divmod = SmallInteger.prototype.divmod = BigInteger.prototype.divmod;\r\n\r\n\r\n    BigInteger.prototype.divide = function (v) {\r\n        return divModAny(this, v)[0];\r\n    };\r\n    NativeBigInt.prototype.over = NativeBigInt.prototype.divide = function (v) {\r\n        return new NativeBigInt(this.value / parseValue(v).value);\r\n    };\r\n    SmallInteger.prototype.over = SmallInteger.prototype.divide = BigInteger.prototype.over = BigInteger.prototype.divide;\r\n\r\n    BigInteger.prototype.mod = function (v) {\r\n        return divModAny(this, v)[1];\r\n    };\r\n    NativeBigInt.prototype.mod = NativeBigInt.prototype.remainder = function (v) {\r\n        return new NativeBigInt(this.value % parseValue(v).value);\r\n    };\r\n    SmallInteger.prototype.remainder = SmallInteger.prototype.mod = BigInteger.prototype.remainder = BigInteger.prototype.mod;\r\n\r\n    BigInteger.prototype.pow = function (v) {\r\n        var n = parseValue(v),\r\n            a = this.value,\r\n            b = n.value,\r\n            value, x, y;\r\n        if (b === 0) return Integer[1];\r\n        if (a === 0) return Integer[0];\r\n        if (a === 1) return Integer[1];\r\n        if (a === -1) return n.isEven() ? Integer[1] : Integer[-1];\r\n        if (n.sign) {\r\n            return Integer[0];\r\n        }\r\n        if (!n.isSmall) throw new Error(\"The exponent \" + n.toString() + \" is too large.\");\r\n        if (this.isSmall) {\r\n            if (isPrecise(value = Math.pow(a, b)))\r\n                return new SmallInteger(truncate(value));\r\n        }\r\n        x = this;\r\n        y = Integer[1];\r\n        while (true) {\r\n            if (b & 1 === 1) {\r\n                y = y.times(x);\r\n                --b;\r\n            }\r\n            if (b === 0) break;\r\n            b /= 2;\r\n            x = x.square();\r\n        }\r\n        return y;\r\n    };\r\n    SmallInteger.prototype.pow = BigInteger.prototype.pow;\r\n\r\n    NativeBigInt.prototype.pow = function (v) {\r\n        var n = parseValue(v);\r\n        var a = this.value, b = n.value;\r\n        var _0 = BigInt(0), _1 = BigInt(1), _2 = BigInt(2);\r\n        if (b === _0) return Integer[1];\r\n        if (a === _0) return Integer[0];\r\n        if (a === _1) return Integer[1];\r\n        if (a === BigInt(-1)) return n.isEven() ? Integer[1] : Integer[-1];\r\n        if (n.isNegative()) return new NativeBigInt(_0);\r\n        var x = this;\r\n        var y = Integer[1];\r\n        while (true) {\r\n            if ((b & _1) === _1) {\r\n                y = y.times(x);\r\n                --b;\r\n            }\r\n            if (b === _0) break;\r\n            b /= _2;\r\n            x = x.square();\r\n        }\r\n        return y;\r\n    }\r\n\r\n    BigInteger.prototype.modPow = function (exp, mod) {\r\n        exp = parseValue(exp);\r\n        mod = parseValue(mod);\r\n        if (mod.isZero()) throw new Error(\"Cannot take modPow with modulus 0\");\r\n        var r = Integer[1],\r\n            base = this.mod(mod);\r\n        if (exp.isNegative()) {\r\n            exp = exp.multiply(Integer[-1]);\r\n            base = base.modInv(mod);\r\n        }\r\n        while (exp.isPositive()) {\r\n            if (base.isZero()) return Integer[0];\r\n            if (exp.isOdd()) r = r.multiply(base).mod(mod);\r\n            exp = exp.divide(2);\r\n            base = base.square().mod(mod);\r\n        }\r\n        return r;\r\n    };\r\n    NativeBigInt.prototype.modPow = SmallInteger.prototype.modPow = BigInteger.prototype.modPow;\r\n\r\n    function compareAbs(a, b) {\r\n        if (a.length !== b.length) {\r\n            return a.length > b.length ? 1 : -1;\r\n        }\r\n        for (var i = a.length - 1; i >= 0; i--) {\r\n            if (a[i] !== b[i]) return a[i] > b[i] ? 1 : -1;\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    BigInteger.prototype.compareAbs = function (v) {\r\n        var n = parseValue(v),\r\n            a = this.value,\r\n            b = n.value;\r\n        if (n.isSmall) return 1;\r\n        return compareAbs(a, b);\r\n    };\r\n    SmallInteger.prototype.compareAbs = function (v) {\r\n        var n = parseValue(v),\r\n            a = Math.abs(this.value),\r\n            b = n.value;\r\n        if (n.isSmall) {\r\n            b = Math.abs(b);\r\n            return a === b ? 0 : a > b ? 1 : -1;\r\n        }\r\n        return -1;\r\n    };\r\n    NativeBigInt.prototype.compareAbs = function (v) {\r\n        var a = this.value;\r\n        var b = parseValue(v).value;\r\n        a = a >= 0 ? a : -a;\r\n        b = b >= 0 ? b : -b;\r\n        return a === b ? 0 : a > b ? 1 : -1;\r\n    }\r\n\r\n    BigInteger.prototype.compare = function (v) {\r\n        // See discussion about comparison with Infinity:\r\n        // https://github.com/peterolson/BigInteger.js/issues/61\r\n        if (v === Infinity) {\r\n            return -1;\r\n        }\r\n        if (v === -Infinity) {\r\n            return 1;\r\n        }\r\n\r\n        var n = parseValue(v),\r\n            a = this.value,\r\n            b = n.value;\r\n        if (this.sign !== n.sign) {\r\n            return n.sign ? 1 : -1;\r\n        }\r\n        if (n.isSmall) {\r\n            return this.sign ? -1 : 1;\r\n        }\r\n        return compareAbs(a, b) * (this.sign ? -1 : 1);\r\n    };\r\n    BigInteger.prototype.compareTo = BigInteger.prototype.compare;\r\n\r\n    SmallInteger.prototype.compare = function (v) {\r\n        if (v === Infinity) {\r\n            return -1;\r\n        }\r\n        if (v === -Infinity) {\r\n            return 1;\r\n        }\r\n\r\n        var n = parseValue(v),\r\n            a = this.value,\r\n            b = n.value;\r\n        if (n.isSmall) {\r\n            return a == b ? 0 : a > b ? 1 : -1;\r\n        }\r\n        if (a < 0 !== n.sign) {\r\n            return a < 0 ? -1 : 1;\r\n        }\r\n        return a < 0 ? 1 : -1;\r\n    };\r\n    SmallInteger.prototype.compareTo = SmallInteger.prototype.compare;\r\n\r\n    NativeBigInt.prototype.compare = function (v) {\r\n        if (v === Infinity) {\r\n            return -1;\r\n        }\r\n        if (v === -Infinity) {\r\n            return 1;\r\n        }\r\n        var a = this.value;\r\n        var b = parseValue(v).value;\r\n        return a === b ? 0 : a > b ? 1 : -1;\r\n    }\r\n    NativeBigInt.prototype.compareTo = NativeBigInt.prototype.compare;\r\n\r\n    BigInteger.prototype.equals = function (v) {\r\n        return this.compare(v) === 0;\r\n    };\r\n    NativeBigInt.prototype.eq = NativeBigInt.prototype.equals = SmallInteger.prototype.eq = SmallInteger.prototype.equals = BigInteger.prototype.eq = BigInteger.prototype.equals;\r\n\r\n    BigInteger.prototype.notEquals = function (v) {\r\n        return this.compare(v) !== 0;\r\n    };\r\n    NativeBigInt.prototype.neq = NativeBigInt.prototype.notEquals = SmallInteger.prototype.neq = SmallInteger.prototype.notEquals = BigInteger.prototype.neq = BigInteger.prototype.notEquals;\r\n\r\n    BigInteger.prototype.greater = function (v) {\r\n        return this.compare(v) > 0;\r\n    };\r\n    NativeBigInt.prototype.gt = NativeBigInt.prototype.greater = SmallInteger.prototype.gt = SmallInteger.prototype.greater = BigInteger.prototype.gt = BigInteger.prototype.greater;\r\n\r\n    BigInteger.prototype.lesser = function (v) {\r\n        return this.compare(v) < 0;\r\n    };\r\n    NativeBigInt.prototype.lt = NativeBigInt.prototype.lesser = SmallInteger.prototype.lt = SmallInteger.prototype.lesser = BigInteger.prototype.lt = BigInteger.prototype.lesser;\r\n\r\n    BigInteger.prototype.greaterOrEquals = function (v) {\r\n        return this.compare(v) >= 0;\r\n    };\r\n    NativeBigInt.prototype.geq = NativeBigInt.prototype.greaterOrEquals = SmallInteger.prototype.geq = SmallInteger.prototype.greaterOrEquals = BigInteger.prototype.geq = BigInteger.prototype.greaterOrEquals;\r\n\r\n    BigInteger.prototype.lesserOrEquals = function (v) {\r\n        return this.compare(v) <= 0;\r\n    };\r\n    NativeBigInt.prototype.leq = NativeBigInt.prototype.lesserOrEquals = SmallInteger.prototype.leq = SmallInteger.prototype.lesserOrEquals = BigInteger.prototype.leq = BigInteger.prototype.lesserOrEquals;\r\n\r\n    BigInteger.prototype.isEven = function () {\r\n        return (this.value[0] & 1) === 0;\r\n    };\r\n    SmallInteger.prototype.isEven = function () {\r\n        return (this.value & 1) === 0;\r\n    };\r\n    NativeBigInt.prototype.isEven = function () {\r\n        return (this.value & BigInt(1)) === BigInt(0);\r\n    }\r\n\r\n    BigInteger.prototype.isOdd = function () {\r\n        return (this.value[0] & 1) === 1;\r\n    };\r\n    SmallInteger.prototype.isOdd = function () {\r\n        return (this.value & 1) === 1;\r\n    };\r\n    NativeBigInt.prototype.isOdd = function () {\r\n        return (this.value & BigInt(1)) === BigInt(1);\r\n    }\r\n\r\n    BigInteger.prototype.isPositive = function () {\r\n        return !this.sign;\r\n    };\r\n    SmallInteger.prototype.isPositive = function () {\r\n        return this.value > 0;\r\n    };\r\n    NativeBigInt.prototype.isPositive = SmallInteger.prototype.isPositive;\r\n\r\n    BigInteger.prototype.isNegative = function () {\r\n        return this.sign;\r\n    };\r\n    SmallInteger.prototype.isNegative = function () {\r\n        return this.value < 0;\r\n    };\r\n    NativeBigInt.prototype.isNegative = SmallInteger.prototype.isNegative;\r\n\r\n    BigInteger.prototype.isUnit = function () {\r\n        return false;\r\n    };\r\n    SmallInteger.prototype.isUnit = function () {\r\n        return Math.abs(this.value) === 1;\r\n    };\r\n    NativeBigInt.prototype.isUnit = function () {\r\n        return this.abs().value === BigInt(1);\r\n    }\r\n\r\n    BigInteger.prototype.isZero = function () {\r\n        return false;\r\n    };\r\n    SmallInteger.prototype.isZero = function () {\r\n        return this.value === 0;\r\n    };\r\n    NativeBigInt.prototype.isZero = function () {\r\n        return this.value === BigInt(0);\r\n    }\r\n\r\n    BigInteger.prototype.isDivisibleBy = function (v) {\r\n        var n = parseValue(v);\r\n        if (n.isZero()) return false;\r\n        if (n.isUnit()) return true;\r\n        if (n.compareAbs(2) === 0) return this.isEven();\r\n        return this.mod(n).isZero();\r\n    };\r\n    NativeBigInt.prototype.isDivisibleBy = SmallInteger.prototype.isDivisibleBy = BigInteger.prototype.isDivisibleBy;\r\n\r\n    function isBasicPrime(v) {\r\n        var n = v.abs();\r\n        if (n.isUnit()) return false;\r\n        if (n.equals(2) || n.equals(3) || n.equals(5)) return true;\r\n        if (n.isEven() || n.isDivisibleBy(3) || n.isDivisibleBy(5)) return false;\r\n        if (n.lesser(49)) return true;\r\n        // we don't know if it's prime: let the other functions figure it out\r\n    }\r\n\r\n    function millerRabinTest(n, a) {\r\n        var nPrev = n.prev(),\r\n            b = nPrev,\r\n            r = 0,\r\n            d, t, i, x;\r\n        while (b.isEven()) b = b.divide(2), r++;\r\n        next: for (i = 0; i < a.length; i++) {\r\n            if (n.lesser(a[i])) continue;\r\n            x = bigInt(a[i]).modPow(b, n);\r\n            if (x.isUnit() || x.equals(nPrev)) continue;\r\n            for (d = r - 1; d != 0; d--) {\r\n                x = x.square().mod(n);\r\n                if (x.isUnit()) return false;\r\n                if (x.equals(nPrev)) continue next;\r\n            }\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    // Set \"strict\" to true to force GRH-supported lower bound of 2*log(N)^2\r\n    BigInteger.prototype.isPrime = function (strict) {\r\n        var isPrime = isBasicPrime(this);\r\n        if (isPrime !== undefined) return isPrime;\r\n        var n = this.abs();\r\n        var bits = n.bitLength();\r\n        if (bits <= 64)\r\n            return millerRabinTest(n, [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37]);\r\n        var logN = Math.log(2) * bits.toJSNumber();\r\n        var t = Math.ceil((strict === true) ? (2 * Math.pow(logN, 2)) : logN);\r\n        for (var a = [], i = 0; i < t; i++) {\r\n            a.push(bigInt(i + 2));\r\n        }\r\n        return millerRabinTest(n, a);\r\n    };\r\n    NativeBigInt.prototype.isPrime = SmallInteger.prototype.isPrime = BigInteger.prototype.isPrime;\r\n\r\n    BigInteger.prototype.isProbablePrime = function (iterations, rng) {\r\n        var isPrime = isBasicPrime(this);\r\n        if (isPrime !== undefined) return isPrime;\r\n        var n = this.abs();\r\n        var t = iterations === undefined ? 5 : iterations;\r\n        for (var a = [], i = 0; i < t; i++) {\r\n            a.push(bigInt.randBetween(2, n.minus(2), rng));\r\n        }\r\n        return millerRabinTest(n, a);\r\n    };\r\n    NativeBigInt.prototype.isProbablePrime = SmallInteger.prototype.isProbablePrime = BigInteger.prototype.isProbablePrime;\r\n\r\n    BigInteger.prototype.modInv = function (n) {\r\n        var t = bigInt.zero, newT = bigInt.one, r = parseValue(n), newR = this.abs(), q, lastT, lastR;\r\n        while (!newR.isZero()) {\r\n            q = r.divide(newR);\r\n            lastT = t;\r\n            lastR = r;\r\n            t = newT;\r\n            r = newR;\r\n            newT = lastT.subtract(q.multiply(newT));\r\n            newR = lastR.subtract(q.multiply(newR));\r\n        }\r\n        if (!r.isUnit()) throw new Error(this.toString() + \" and \" + n.toString() + \" are not co-prime\");\r\n        if (t.compare(0) === -1) {\r\n            t = t.add(n);\r\n        }\r\n        if (this.isNegative()) {\r\n            return t.negate();\r\n        }\r\n        return t;\r\n    };\r\n\r\n    NativeBigInt.prototype.modInv = SmallInteger.prototype.modInv = BigInteger.prototype.modInv;\r\n\r\n    BigInteger.prototype.next = function () {\r\n        var value = this.value;\r\n        if (this.sign) {\r\n            return subtractSmall(value, 1, this.sign);\r\n        }\r\n        return new BigInteger(addSmall(value, 1), this.sign);\r\n    };\r\n    SmallInteger.prototype.next = function () {\r\n        var value = this.value;\r\n        if (value + 1 < MAX_INT) return new SmallInteger(value + 1);\r\n        return new BigInteger(MAX_INT_ARR, false);\r\n    };\r\n    NativeBigInt.prototype.next = function () {\r\n        return new NativeBigInt(this.value + BigInt(1));\r\n    }\r\n\r\n    BigInteger.prototype.prev = function () {\r\n        var value = this.value;\r\n        if (this.sign) {\r\n            return new BigInteger(addSmall(value, 1), true);\r\n        }\r\n        return subtractSmall(value, 1, this.sign);\r\n    };\r\n    SmallInteger.prototype.prev = function () {\r\n        var value = this.value;\r\n        if (value - 1 > -MAX_INT) return new SmallInteger(value - 1);\r\n        return new BigInteger(MAX_INT_ARR, true);\r\n    };\r\n    NativeBigInt.prototype.prev = function () {\r\n        return new NativeBigInt(this.value - BigInt(1));\r\n    }\r\n\r\n    var powersOfTwo = [1];\r\n    while (2 * powersOfTwo[powersOfTwo.length - 1] <= BASE) powersOfTwo.push(2 * powersOfTwo[powersOfTwo.length - 1]);\r\n    var powers2Length = powersOfTwo.length, highestPower2 = powersOfTwo[powers2Length - 1];\r\n\r\n    function shift_isSmall(n) {\r\n        return Math.abs(n) <= BASE;\r\n    }\r\n\r\n    BigInteger.prototype.shiftLeft = function (v) {\r\n        var n = parseValue(v).toJSNumber();\r\n        if (!shift_isSmall(n)) {\r\n            throw new Error(String(n) + \" is too large for shifting.\");\r\n        }\r\n        if (n < 0) return this.shiftRight(-n);\r\n        var result = this;\r\n        if (result.isZero()) return result;\r\n        while (n >= powers2Length) {\r\n            result = result.multiply(highestPower2);\r\n            n -= powers2Length - 1;\r\n        }\r\n        return result.multiply(powersOfTwo[n]);\r\n    };\r\n    NativeBigInt.prototype.shiftLeft = SmallInteger.prototype.shiftLeft = BigInteger.prototype.shiftLeft;\r\n\r\n    BigInteger.prototype.shiftRight = function (v) {\r\n        var remQuo;\r\n        var n = parseValue(v).toJSNumber();\r\n        if (!shift_isSmall(n)) {\r\n            throw new Error(String(n) + \" is too large for shifting.\");\r\n        }\r\n        if (n < 0) return this.shiftLeft(-n);\r\n        var result = this;\r\n        while (n >= powers2Length) {\r\n            if (result.isZero() || (result.isNegative() && result.isUnit())) return result;\r\n            remQuo = divModAny(result, highestPower2);\r\n            result = remQuo[1].isNegative() ? remQuo[0].prev() : remQuo[0];\r\n            n -= powers2Length - 1;\r\n        }\r\n        remQuo = divModAny(result, powersOfTwo[n]);\r\n        return remQuo[1].isNegative() ? remQuo[0].prev() : remQuo[0];\r\n    };\r\n    NativeBigInt.prototype.shiftRight = SmallInteger.prototype.shiftRight = BigInteger.prototype.shiftRight;\r\n\r\n    function bitwise(x, y, fn) {\r\n        y = parseValue(y);\r\n        var xSign = x.isNegative(), ySign = y.isNegative();\r\n        var xRem = xSign ? x.not() : x,\r\n            yRem = ySign ? y.not() : y;\r\n        var xDigit = 0, yDigit = 0;\r\n        var xDivMod = null, yDivMod = null;\r\n        var result = [];\r\n        while (!xRem.isZero() || !yRem.isZero()) {\r\n            xDivMod = divModAny(xRem, highestPower2);\r\n            xDigit = xDivMod[1].toJSNumber();\r\n            if (xSign) {\r\n                xDigit = highestPower2 - 1 - xDigit; // two's complement for negative numbers\r\n            }\r\n\r\n            yDivMod = divModAny(yRem, highestPower2);\r\n            yDigit = yDivMod[1].toJSNumber();\r\n            if (ySign) {\r\n                yDigit = highestPower2 - 1 - yDigit; // two's complement for negative numbers\r\n            }\r\n\r\n            xRem = xDivMod[0];\r\n            yRem = yDivMod[0];\r\n            result.push(fn(xDigit, yDigit));\r\n        }\r\n        var sum = fn(xSign ? 1 : 0, ySign ? 1 : 0) !== 0 ? bigInt(-1) : bigInt(0);\r\n        for (var i = result.length - 1; i >= 0; i -= 1) {\r\n            sum = sum.multiply(highestPower2).add(bigInt(result[i]));\r\n        }\r\n        return sum;\r\n    }\r\n\r\n    BigInteger.prototype.not = function () {\r\n        return this.negate().prev();\r\n    };\r\n    NativeBigInt.prototype.not = SmallInteger.prototype.not = BigInteger.prototype.not;\r\n\r\n    BigInteger.prototype.and = function (n) {\r\n        return bitwise(this, n, function (a, b) { return a & b; });\r\n    };\r\n    NativeBigInt.prototype.and = SmallInteger.prototype.and = BigInteger.prototype.and;\r\n\r\n    BigInteger.prototype.or = function (n) {\r\n        return bitwise(this, n, function (a, b) { return a | b; });\r\n    };\r\n    NativeBigInt.prototype.or = SmallInteger.prototype.or = BigInteger.prototype.or;\r\n\r\n    BigInteger.prototype.xor = function (n) {\r\n        return bitwise(this, n, function (a, b) { return a ^ b; });\r\n    };\r\n    NativeBigInt.prototype.xor = SmallInteger.prototype.xor = BigInteger.prototype.xor;\r\n\r\n    var LOBMASK_I = 1 << 30, LOBMASK_BI = (BASE & -BASE) * (BASE & -BASE) | LOBMASK_I;\r\n    function roughLOB(n) { // get lowestOneBit (rough)\r\n        // SmallInteger: return Min(lowestOneBit(n), 1 << 30)\r\n        // BigInteger: return Min(lowestOneBit(n), 1 << 14) [BASE=1e7]\r\n        var v = n.value,\r\n            x = typeof v === \"number\" ? v | LOBMASK_I :\r\n                typeof v === \"bigint\" ? v | BigInt(LOBMASK_I) :\r\n                    v[0] + v[1] * BASE | LOBMASK_BI;\r\n        return x & -x;\r\n    }\r\n\r\n    function integerLogarithm(value, base) {\r\n        if (base.compareTo(value) <= 0) {\r\n            var tmp = integerLogarithm(value, base.square(base));\r\n            var p = tmp.p;\r\n            var e = tmp.e;\r\n            var t = p.multiply(base);\r\n            return t.compareTo(value) <= 0 ? { p: t, e: e * 2 + 1 } : { p: p, e: e * 2 };\r\n        }\r\n        return { p: bigInt(1), e: 0 };\r\n    }\r\n\r\n    BigInteger.prototype.bitLength = function () {\r\n        var n = this;\r\n        if (n.compareTo(bigInt(0)) < 0) {\r\n            n = n.negate().subtract(bigInt(1));\r\n        }\r\n        if (n.compareTo(bigInt(0)) === 0) {\r\n            return bigInt(0);\r\n        }\r\n        return bigInt(integerLogarithm(n, bigInt(2)).e).add(bigInt(1));\r\n    }\r\n    NativeBigInt.prototype.bitLength = SmallInteger.prototype.bitLength = BigInteger.prototype.bitLength;\r\n\r\n    function max(a, b) {\r\n        a = parseValue(a);\r\n        b = parseValue(b);\r\n        return a.greater(b) ? a : b;\r\n    }\r\n    function min(a, b) {\r\n        a = parseValue(a);\r\n        b = parseValue(b);\r\n        return a.lesser(b) ? a : b;\r\n    }\r\n    function gcd(a, b) {\r\n        a = parseValue(a).abs();\r\n        b = parseValue(b).abs();\r\n        if (a.equals(b)) return a;\r\n        if (a.isZero()) return b;\r\n        if (b.isZero()) return a;\r\n        var c = Integer[1], d, t;\r\n        while (a.isEven() && b.isEven()) {\r\n            d = min(roughLOB(a), roughLOB(b));\r\n            a = a.divide(d);\r\n            b = b.divide(d);\r\n            c = c.multiply(d);\r\n        }\r\n        while (a.isEven()) {\r\n            a = a.divide(roughLOB(a));\r\n        }\r\n        do {\r\n            while (b.isEven()) {\r\n                b = b.divide(roughLOB(b));\r\n            }\r\n            if (a.greater(b)) {\r\n                t = b; b = a; a = t;\r\n            }\r\n            b = b.subtract(a);\r\n        } while (!b.isZero());\r\n        return c.isUnit() ? a : a.multiply(c);\r\n    }\r\n    function lcm(a, b) {\r\n        a = parseValue(a).abs();\r\n        b = parseValue(b).abs();\r\n        return a.divide(gcd(a, b)).multiply(b);\r\n    }\r\n    function randBetween(a, b, rng) {\r\n        a = parseValue(a);\r\n        b = parseValue(b);\r\n        var usedRNG = rng || Math.random;\r\n        var low = min(a, b), high = max(a, b);\r\n        var range = high.subtract(low).add(1);\r\n        if (range.isSmall) return low.add(Math.floor(usedRNG() * range));\r\n        var digits = toBase(range, BASE).value;\r\n        var result = [], restricted = true;\r\n        for (var i = 0; i < digits.length; i++) {\r\n            var top = restricted ? digits[i] : BASE;\r\n            var digit = truncate(usedRNG() * top);\r\n            result.push(digit);\r\n            if (digit < top) restricted = false;\r\n        }\r\n        return low.add(Integer.fromArray(result, BASE, false));\r\n    }\r\n\r\n    var parseBase = function (text, base, alphabet, caseSensitive) {\r\n        alphabet = alphabet || DEFAULT_ALPHABET;\r\n        text = String(text);\r\n        if (!caseSensitive) {\r\n            text = text.toLowerCase();\r\n            alphabet = alphabet.toLowerCase();\r\n        }\r\n        var length = text.length;\r\n        var i;\r\n        var absBase = Math.abs(base);\r\n        var alphabetValues = {};\r\n        for (i = 0; i < alphabet.length; i++) {\r\n            alphabetValues[alphabet[i]] = i;\r\n        }\r\n        for (i = 0; i < length; i++) {\r\n            var c = text[i];\r\n            if (c === \"-\") continue;\r\n            if (c in alphabetValues) {\r\n                if (alphabetValues[c] >= absBase) {\r\n                    if (c === \"1\" && absBase === 1) continue;\r\n                    throw new Error(c + \" is not a valid digit in base \" + base + \".\");\r\n                }\r\n            }\r\n        }\r\n        base = parseValue(base);\r\n        var digits = [];\r\n        var isNegative = text[0] === \"-\";\r\n        for (i = isNegative ? 1 : 0; i < text.length; i++) {\r\n            var c = text[i];\r\n            if (c in alphabetValues) digits.push(parseValue(alphabetValues[c]));\r\n            else if (c === \"<\") {\r\n                var start = i;\r\n                do { i++; } while (text[i] !== \">\" && i < text.length);\r\n                digits.push(parseValue(text.slice(start + 1, i)));\r\n            }\r\n            else throw new Error(c + \" is not a valid character\");\r\n        }\r\n        return parseBaseFromArray(digits, base, isNegative);\r\n    };\r\n\r\n    function parseBaseFromArray(digits, base, isNegative) {\r\n        var val = Integer[0], pow = Integer[1], i;\r\n        for (i = digits.length - 1; i >= 0; i--) {\r\n            val = val.add(digits[i].times(pow));\r\n            pow = pow.times(base);\r\n        }\r\n        return isNegative ? val.negate() : val;\r\n    }\r\n\r\n    function stringify(digit, alphabet) {\r\n        alphabet = alphabet || DEFAULT_ALPHABET;\r\n        if (digit < alphabet.length) {\r\n            return alphabet[digit];\r\n        }\r\n        return \"<\" + digit + \">\";\r\n    }\r\n\r\n    function toBase(n, base) {\r\n        base = bigInt(base);\r\n        if (base.isZero()) {\r\n            if (n.isZero()) return { value: [0], isNegative: false };\r\n            throw new Error(\"Cannot convert nonzero numbers to base 0.\");\r\n        }\r\n        if (base.equals(-1)) {\r\n            if (n.isZero()) return { value: [0], isNegative: false };\r\n            if (n.isNegative())\r\n                return {\r\n                    value: [].concat.apply([], Array.apply(null, Array(-n.toJSNumber()))\r\n                        .map(Array.prototype.valueOf, [1, 0])\r\n                    ),\r\n                    isNegative: false\r\n                };\r\n\r\n            var arr = Array.apply(null, Array(n.toJSNumber() - 1))\r\n                .map(Array.prototype.valueOf, [0, 1]);\r\n            arr.unshift([1]);\r\n            return {\r\n                value: [].concat.apply([], arr),\r\n                isNegative: false\r\n            };\r\n        }\r\n\r\n        var neg = false;\r\n        if (n.isNegative() && base.isPositive()) {\r\n            neg = true;\r\n            n = n.abs();\r\n        }\r\n        if (base.isUnit()) {\r\n            if (n.isZero()) return { value: [0], isNegative: false };\r\n\r\n            return {\r\n                value: Array.apply(null, Array(n.toJSNumber()))\r\n                    .map(Number.prototype.valueOf, 1),\r\n                isNegative: neg\r\n            };\r\n        }\r\n        var out = [];\r\n        var left = n, divmod;\r\n        while (left.isNegative() || left.compareAbs(base) >= 0) {\r\n            divmod = left.divmod(base);\r\n            left = divmod.quotient;\r\n            var digit = divmod.remainder;\r\n            if (digit.isNegative()) {\r\n                digit = base.minus(digit).abs();\r\n                left = left.next();\r\n            }\r\n            out.push(digit.toJSNumber());\r\n        }\r\n        out.push(left.toJSNumber());\r\n        return { value: out.reverse(), isNegative: neg };\r\n    }\r\n\r\n    function toBaseString(n, base, alphabet) {\r\n        var arr = toBase(n, base);\r\n        return (arr.isNegative ? \"-\" : \"\") + arr.value.map(function (x) {\r\n            return stringify(x, alphabet);\r\n        }).join('');\r\n    }\r\n\r\n    BigInteger.prototype.toArray = function (radix) {\r\n        return toBase(this, radix);\r\n    };\r\n\r\n    SmallInteger.prototype.toArray = function (radix) {\r\n        return toBase(this, radix);\r\n    };\r\n\r\n    NativeBigInt.prototype.toArray = function (radix) {\r\n        return toBase(this, radix);\r\n    };\r\n\r\n    BigInteger.prototype.toString = function (radix, alphabet) {\r\n        if (radix === undefined) radix = 10;\r\n        if (radix !== 10) return toBaseString(this, radix, alphabet);\r\n        var v = this.value, l = v.length, str = String(v[--l]), zeros = \"0000000\", digit;\r\n        while (--l >= 0) {\r\n            digit = String(v[l]);\r\n            str += zeros.slice(digit.length) + digit;\r\n        }\r\n        var sign = this.sign ? \"-\" : \"\";\r\n        return sign + str;\r\n    };\r\n\r\n    SmallInteger.prototype.toString = function (radix, alphabet) {\r\n        if (radix === undefined) radix = 10;\r\n        if (radix != 10) return toBaseString(this, radix, alphabet);\r\n        return String(this.value);\r\n    };\r\n\r\n    NativeBigInt.prototype.toString = SmallInteger.prototype.toString;\r\n\r\n    NativeBigInt.prototype.toJSON = BigInteger.prototype.toJSON = SmallInteger.prototype.toJSON = function () { return this.toString(); }\r\n\r\n    BigInteger.prototype.valueOf = function () {\r\n        return parseInt(this.toString(), 10);\r\n    };\r\n    BigInteger.prototype.toJSNumber = BigInteger.prototype.valueOf;\r\n\r\n    SmallInteger.prototype.valueOf = function () {\r\n        return this.value;\r\n    };\r\n    SmallInteger.prototype.toJSNumber = SmallInteger.prototype.valueOf;\r\n    NativeBigInt.prototype.valueOf = NativeBigInt.prototype.toJSNumber = function () {\r\n        return parseInt(this.toString(), 10);\r\n    }\r\n\r\n    function parseStringValue(v) {\r\n        if (isPrecise(+v)) {\r\n            var x = +v;\r\n            if (x === truncate(x))\r\n                return supportsNativeBigInt ? new NativeBigInt(BigInt(x)) : new SmallInteger(x);\r\n            throw new Error(\"Invalid integer: \" + v);\r\n        }\r\n        var sign = v[0] === \"-\";\r\n        if (sign) v = v.slice(1);\r\n        var split = v.split(/e/i);\r\n        if (split.length > 2) throw new Error(\"Invalid integer: \" + split.join(\"e\"));\r\n        if (split.length === 2) {\r\n            var exp = split[1];\r\n            if (exp[0] === \"+\") exp = exp.slice(1);\r\n            exp = +exp;\r\n            if (exp !== truncate(exp) || !isPrecise(exp)) throw new Error(\"Invalid integer: \" + exp + \" is not a valid exponent.\");\r\n            var text = split[0];\r\n            var decimalPlace = text.indexOf(\".\");\r\n            if (decimalPlace >= 0) {\r\n                exp -= text.length - decimalPlace - 1;\r\n                text = text.slice(0, decimalPlace) + text.slice(decimalPlace + 1);\r\n            }\r\n            if (exp < 0) throw new Error(\"Cannot include negative exponent part for integers\");\r\n            text += (new Array(exp + 1)).join(\"0\");\r\n            v = text;\r\n        }\r\n        var isValid = /^([0-9][0-9]*)$/.test(v);\r\n        if (!isValid) throw new Error(\"Invalid integer: \" + v);\r\n        if (supportsNativeBigInt) {\r\n            return new NativeBigInt(BigInt(sign ? \"-\" + v : v));\r\n        }\r\n        var r = [], max = v.length, l = LOG_BASE, min = max - l;\r\n        while (max > 0) {\r\n            r.push(+v.slice(min, max));\r\n            min -= l;\r\n            if (min < 0) min = 0;\r\n            max -= l;\r\n        }\r\n        trim(r);\r\n        return new BigInteger(r, sign);\r\n    }\r\n\r\n    function parseNumberValue(v) {\r\n        if (supportsNativeBigInt) {\r\n            return new NativeBigInt(BigInt(v));\r\n        }\r\n        if (isPrecise(v)) {\r\n            if (v !== truncate(v)) throw new Error(v + \" is not an integer.\");\r\n            return new SmallInteger(v);\r\n        }\r\n        return parseStringValue(v.toString());\r\n    }\r\n\r\n    function parseValue(v) {\r\n        if (typeof v === \"number\") {\r\n            return parseNumberValue(v);\r\n        }\r\n        if (typeof v === \"string\") {\r\n            return parseStringValue(v);\r\n        }\r\n        if (typeof v === \"bigint\") {\r\n            return new NativeBigInt(v);\r\n        }\r\n        return v;\r\n    }\r\n    // Pre-define numbers in range [-999,999]\r\n    for (var i = 0; i < 1000; i++) {\r\n        Integer[i] = parseValue(i);\r\n        if (i > 0) Integer[-i] = parseValue(-i);\r\n    }\r\n    // Backwards compatibility\r\n    Integer.one = Integer[1];\r\n    Integer.zero = Integer[0];\r\n    Integer.minusOne = Integer[-1];\r\n    Integer.max = max;\r\n    Integer.min = min;\r\n    Integer.gcd = gcd;\r\n    Integer.lcm = lcm;\r\n    Integer.isInstance = function (x) { return x instanceof BigInteger || x instanceof SmallInteger || x instanceof NativeBigInt; };\r\n    Integer.randBetween = randBetween;\r\n\r\n    Integer.fromArray = function (digits, base, isNegative) {\r\n        return parseBaseFromArray(digits.map(parseValue), parseValue(base || 10), isNegative);\r\n    };\r\n\r\n    return Integer;\r\n})();\r\n\r\n// Node.js check\r\nif (typeof module !== \"undefined\" && module.hasOwnProperty(\"exports\")) {\r\n    module.exports = bigInt;\r\n}\r\n\r\n//amd check\r\nif (typeof define === \"function\" && define.amd) {\r\n    define( function () {\r\n        return bigInt;\r\n    });\r\n}\r\n","module.exports = function(module) {\n\tif (!module.webpackPolyfill) {\n\t\tmodule.deprecate = function() {};\n\t\tmodule.paths = [];\n\t\t// module.parent = undefined by default\n\t\tif (!module.children) module.children = [];\n\t\tObject.defineProperty(module, \"loaded\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.l;\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(module, \"id\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.i;\n\t\t\t}\n\t\t});\n\t\tmodule.webpackPolyfill = 1;\n\t}\n\treturn module;\n};\n"],"sourceRoot":""}