export function put(blocks: API.BlockFetcher, shard: API.BatcherShard, key: string, value: API.UnknownLink): Promise<void>;
export function traverse(shards: ShardFetcher, shard: API.BatcherShard, key: string): Promise<{
    shard: API.BatcherShard;
    key: string;
}>;
export function commit(shard: API.BatcherShard): Promise<{
    root: import("multiformats").CID<import("../api.js").Shard, 113, 18, 1>;
    additions: API.ShardBlockView[];
    removals: API.ShardBlockView[];
}>;
export function create(blocks: API.BlockFetcher, root: API.ShardLink): Promise<API.Batcher>;
export class BatchCommittedError extends Error {
    static code: string;
    /**
     * @param {string} [message]
     * @param {ErrorOptions} [options]
     */
    constructor(message?: string | undefined, options?: ErrorOptions | undefined);
    code: string;
}
import * as API from './api.js';
import * as BatcherShard from './shard.js';
import { ShardFetcher } from '../shard.js';
/** @implements {API.Batcher} */
declare class Batcher implements API.Batcher {
    /**
     * @param {object} init
     * @param {API.BlockFetcher} init.blocks Block storage.
     * @param {API.ShardLink} init.link CID of the shard block.
     */
    static create({ blocks, link }: {
        blocks: API.BlockFetcher;
        link: API.ShardLink;
    }): Promise<Batcher>;
    /**
     * @param {object} init
     * @param {API.BlockFetcher} init.blocks Block storage.
     * @param {API.BatcherShardEntry[]} init.entries The entries in this shard.
     * @param {string} init.prefix Key prefix.
     * @param {number} init.version Shard compatibility version.
     * @param {string} init.keyChars Characters allowed in keys, referring to a known character set.
     * @param {number} init.maxKeySize Max key size in bytes.
     * @param {API.ShardBlockView} init.base Original shard this batcher is based on.
     */
    constructor({ blocks, entries, prefix, version, keyChars, maxKeySize, base }: {
        blocks: API.BlockFetcher;
        entries: API.BatcherShardEntry[];
        prefix: string;
        version: number;
        keyChars: string;
        maxKeySize: number;
        base: API.ShardBlockView;
    });
    blocks: API.BlockFetcher;
    prefix: string;
    entries: API.BatcherShardEntry[];
    base: API.ShardBlockView;
    version: number;
    keyChars: string;
    maxKeySize: number;
    /**
     * @param {string} key The key of the value to put.
     * @param {API.UnknownLink} value The value to put.
     * @returns {Promise<void>}
     */
    put(key: string, value: API.UnknownLink): Promise<void>;
    commit(): Promise<{
        root: import("multiformats").CID<import("../api.js").Shard, 113, 18, 1>;
        additions: API.ShardBlockView[];
        removals: API.ShardBlockView[];
    }>;
    #private;
}
export {};
//# sourceMappingURL=index.d.ts.map