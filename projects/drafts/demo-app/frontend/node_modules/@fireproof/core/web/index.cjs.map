{"version":3,"sources":["../../../src/runtime/gateways/indexdb/web/index.ts","../../../src/runtime/gateways/indexdb/web/gateway-impl.ts","../../../src/runtime/gateways/indexdb/version.ts","../../../src/runtime/gateways/indexdb/web/key-bag-indexdb.ts"],"sourcesContent":["export * from \"./gateway-impl.js\";\nexport * from \"./key-bag-indexdb.js\";\n\nimport { KeyBagProviderIndexDB as KeyBagProviderImpl } from \"./key-bag-indexdb.js\";\n\nexport { KeyBagProviderImpl };\n\nimport { IndexDBGateway as GatewayImpl, IndexDBTestGateway as GatewayTestImpl } from \"./gateway-impl.js\";\nexport { GatewayImpl, GatewayTestImpl };\n","import { openDB, IDBPDatabase } from \"idb\";\nimport { exception2Result, KeyedResolvOnce, Logger, Result, URI } from \"@adviser/cement\";\n\nimport { INDEXDB_VERSION } from \"../version.js\";\nimport { ensureLogger, exceptionWrapper, getKey, getStore, NotFoundError } from \"@fireproof/core\";\nimport type { bs } from \"@fireproof/core\";\nimport type { SuperThis } from \"@fireproof/core\";\n\nfunction ensureVersion(url: URI): URI {\n  return url.build().defParam(\"version\", INDEXDB_VERSION).URI();\n}\n\ninterface IDBConn {\n  readonly db: IDBPDatabase<unknown>;\n  readonly dbName: DbName;\n  readonly version: string;\n  readonly url: URI;\n}\n\nfunction sanitzeKey(key: string | string[]): string | string[] {\n  if (key.length === 1) {\n    key = key[0];\n  }\n  return key;\n}\n\nconst onceConn = new KeyedResolvOnce<IDBConn>();\nasync function connectIdb(url: URI, sthis: SuperThis): Promise<IDBConn> {\n  const dbName = getIndexDBName(url, sthis);\n  const once = await onceConn.get(dbName.fullDb).once(async () => {\n    const db = await openDB(dbName.fullDb, 1, {\n      upgrade(db) {\n        [\"version\", \"data\", \"wal\", \"meta\", \"idx.data\", \"idx.wal\", \"idx.meta\"].map((store) => {\n          db.createObjectStore(store, {\n            autoIncrement: false,\n          });\n        });\n      },\n    });\n    const found = await db.get(\"version\", \"version\");\n    const version = ensureVersion(url).getParam(\"version\") as string;\n    if (!found) {\n      await db.put(\"version\", { version }, \"version\");\n    } else if (found.version !== version) {\n      sthis.logger.Warn().Str(\"url\", url.toString()).Str(\"version\", version).Str(\"found\", found.version).Msg(\"version mismatch\");\n    }\n    return { db, dbName, version, url };\n  });\n  return {\n    ...once,\n    url: url.build().setParam(\"version\", once.version).URI(),\n  };\n}\n\nexport interface DbName {\n  readonly fullDb: string;\n  readonly objStore: string;\n  readonly connectionKey: string;\n  readonly dbName: string;\n}\n\nfunction joinDBName(...names: string[]): string {\n  return names\n    .map((i) => i.replace(/^[^a-zA-Z0-9]+/g, \"\").replace(/[^a-zA-Z0-9-]+/g, \"_\"))\n    .filter((i) => i.length)\n    .join(\".\");\n}\n\n// const schemaVersion = new Map<string, number>();\nexport function getIndexDBName(iurl: URI, sthis: SuperThis): DbName {\n  const url = ensureVersion(iurl);\n  const fullDb = url.pathname.replace(/^\\/+/, \"\").replace(/\\?.*$/, \"\"); // cut leading slashes\n  // const type = getStore(url);\n  // const storageVersion = url.searchParams.get(\"version\");\n  // not nice but we need to pass the version to the db name\n  // url.searchParams.set(\"version\", storageVersion);\n  // console.log(\"getIndexDBName:\", url.toString(), { fullDb, type, branch });\n  // const dbName = fullDb.replace(new RegExp(`^fp.${storageVersion}.`), \"\"); // cut fp prefix\n  const dbName = url.getParam(\"name\");\n  if (!dbName) throw sthis.logger.Error().Str(\"url\", url.toString()).Msg(`name not found`).AsError();\n  const result = joinDBName(fullDb, dbName);\n  const objStore = getStore(url, sthis, joinDBName).name;\n  const connectionKey = [result, objStore].join(\":\");\n  return {\n    fullDb: result,\n    objStore,\n    connectionKey,\n    dbName,\n  };\n}\n\nexport class IndexDBGateway implements bs.Gateway {\n  readonly logger: Logger;\n  readonly sthis: SuperThis;\n  constructor(sthis: SuperThis) {\n    this.logger = ensureLogger(sthis, \"IndexDBGateway\");\n    this.sthis = sthis;\n  }\n\n  // _db: IDBPDatabase<unknown> = {} as IDBPDatabase<unknown>;\n\n  async start(baseURL: URI): Promise<Result<URI>> {\n    return exception2Result(async () => {\n      this.logger.Debug().Url(baseURL).Msg(\"starting\");\n      await this.sthis.start();\n      const ic = await connectIdb(baseURL, this.sthis);\n      this.logger.Debug().Url(ic.url).Msg(\"started\");\n      return ic.url;\n    });\n  }\n  async close(): Promise<Result<void>> {\n    return Result.Ok(undefined);\n  }\n  async destroy(baseUrl: URI): Promise<Result<void>> {\n    return exception2Result(async () => {\n      // return deleteDB(getIndexDBName(this.url).fullDb);\n      const type = getStore(baseUrl, this.sthis, joinDBName).name;\n      // console.log(\"IndexDBDataStore:destroy\", type);\n      const idb = await connectIdb(baseUrl, this.sthis);\n      const trans = idb.db.transaction(type, \"readwrite\");\n      const object_store = trans.objectStore(type);\n      const toDelete = [];\n      for (let cursor = await object_store.openCursor(); cursor; cursor = await cursor.continue()) {\n        toDelete.push(cursor.primaryKey);\n      }\n      for (const key of toDelete) {\n        await trans.db.delete(type, key);\n      }\n      await trans.done;\n    });\n  }\n\n  buildUrl(baseUrl: URI, key: string): Promise<Result<URI>> {\n    return Promise.resolve(Result.Ok(baseUrl.build().setParam(\"key\", key).URI()));\n  }\n\n  async get(url: URI): Promise<bs.GetResult> {\n    return exceptionWrapper(async () => {\n      const key = getKey(url, this.logger);\n      const store = getStore(url, this.sthis, joinDBName).name;\n      this.logger.Debug().Url(url).Str(\"key\", key).Str(\"store\", store).Msg(\"getting\");\n      const { db } = await connectIdb(url, this.sthis);\n      const tx = db.transaction([store], \"readonly\");\n      const bytes = await tx.objectStore(store).get(sanitzeKey(key));\n      await tx.done;\n      if (!bytes) {\n        return Result.Err(new NotFoundError(`missing ${key}`));\n      }\n      return Result.Ok(bytes as Uint8Array);\n    });\n  }\n  async put(url: URI, value: Uint8Array) {\n    return exception2Result(async () => {\n      const key = getKey(url, this.logger);\n      const store = getStore(url, this.sthis, joinDBName).name;\n      this.logger.Debug().Url(url).Str(\"key\", key).Str(\"store\", store).Msg(\"putting\");\n      const { db } = await connectIdb(url, this.sthis);\n      const tx = db.transaction([store], \"readwrite\");\n      await tx.objectStore(store).put(value, sanitzeKey(key));\n      await tx.done;\n    });\n  }\n  async delete(url: URI) {\n    return exception2Result(async () => {\n      const key = getKey(url, this.logger);\n      const store = getStore(url, this.sthis, joinDBName).name;\n      this.logger.Debug().Url(url).Str(\"key\", key).Str(\"store\", store).Msg(\"deleting\");\n      const { db } = await connectIdb(url, this.sthis);\n      const tx = db.transaction([store], \"readwrite\");\n      await tx.objectStore(store).delete(sanitzeKey(key));\n      await tx.done;\n      return Result.Ok(undefined);\n    });\n  }\n}\n\n// export class IndexDBDataGateway extends IndexDBGateway {\n//   readonly storeType = \"data\";\n//   constructor(logger: Logger) {\n//     super(ensureLogger(logger, \"IndexDBDataGateway\"));\n//   }\n// }\n\n// export class IndexDBWalGateway extends IndexDBGateway {\n//   readonly storeType = \"wal\";\n//   constructor(logger: Logger) {\n//     super(ensureLogger(logger, \"IndexDBWalGateway\"));\n//   }\n// }\n// export class IndexDBMetaGateway extends IndexDBGateway {\n//   readonly storeType = \"meta\";\n//   constructor(logger: Logger) {\n//     super(ensureLogger(logger, \"IndexDBMetaGateway\"));\n//   }\n// }\n\nexport class IndexDBTestGateway implements bs.TestGateway {\n  readonly logger: Logger;\n  readonly sthis: SuperThis;\n  constructor(sthis: SuperThis) {\n    this.sthis = sthis;\n    this.logger = ensureLogger(sthis, \"IndexDBTestStore\", {});\n  }\n  async get(url: URI, key: string) {\n    const ic = await connectIdb(url, this.sthis);\n    const store = getStore(ic.url, this.sthis, joinDBName).name;\n    this.logger.Debug().Str(\"key\", key).Str(\"store\", store).Msg(\"getting\");\n    let bytes = await ic.db.get(store, sanitzeKey(key));\n    this.logger.Debug().Str(\"key\", key).Str(\"store\", store).Int(\"len\", bytes.length).Msg(\"got\");\n    if (typeof bytes === \"string\") {\n      bytes = this.sthis.txt.encode(bytes);\n    }\n    return bytes as Uint8Array;\n  }\n}\n","export const INDEXDB_VERSION = \"v0.19-indexdb\";\n","import { IDBPDatabase, openDB } from \"idb\";\nimport { Logger, ResolveOnce, URI } from \"@adviser/cement\";\nimport { SuperThis, rt } from \"@fireproof/core\";\n\nexport class KeyBagProviderIndexDB implements rt.kb.KeyBagProvider {\n  readonly _db: ResolveOnce<IDBPDatabase<unknown>> = new ResolveOnce<IDBPDatabase<unknown>>();\n\n  readonly dbName: string;\n  readonly url: URI;\n  readonly logger: Logger;\n  readonly sthis: SuperThis;\n  constructor(url: URI, sthis: SuperThis) {\n    this.sthis = sthis;\n    this.logger = sthis.logger;\n    this.url = url;\n    this.dbName = rt.getPath(this.url, this.sthis);\n  }\n\n  async _prepare(): Promise<IDBPDatabase<unknown>> {\n    return this._db.once(async () => {\n      return await openDB(this.dbName, 1, {\n        upgrade(db) {\n          // console.log('upgrade:', dbName);\n          [\"bag\"].map((store) => {\n            db.createObjectStore(store, {\n              autoIncrement: false,\n            });\n          });\n        },\n      });\n    });\n  }\n\n  async get(id: string): Promise<rt.kb.KeyItem | undefined> {\n    const db = await this._prepare();\n    const tx = db.transaction([\"bag\"], \"readonly\");\n    const keyItem = await tx.objectStore(\"bag\").get(id);\n    await tx.done;\n    if (!keyItem) {\n      return undefined;\n    }\n    return keyItem;\n  }\n\n  async set(id: string, item: rt.kb.KeyItem): Promise<void> {\n    const db = await this._prepare();\n    const tx = db.transaction([\"bag\"], \"readwrite\");\n    await tx.objectStore(\"bag\").put(item, id);\n    await tx.done;\n  }\n}\n"],"mappings":"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","names":["db","import_idb","import_cement","import_core"]}