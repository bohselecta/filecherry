import { URI, Logger, Result, ResolveOnce } from '@adviser/cement';
import { SuperThis, bs, rt } from '@fireproof/core';
import { IDBPDatabase } from 'idb';

interface DbName {
    readonly fullDb: string;
    readonly objStore: string;
    readonly connectionKey: string;
    readonly dbName: string;
}
declare function getIndexDBName(iurl: URI, sthis: SuperThis): DbName;
declare class IndexDBGateway implements bs.Gateway {
    readonly logger: Logger;
    readonly sthis: SuperThis;
    constructor(sthis: SuperThis);
    start(baseURL: URI): Promise<Result<URI>>;
    close(): Promise<Result<void>>;
    destroy(baseUrl: URI): Promise<Result<void>>;
    buildUrl(baseUrl: URI, key: string): Promise<Result<URI>>;
    get(url: URI): Promise<bs.GetResult>;
    put(url: URI, value: Uint8Array): Promise<Result<void, Error>>;
    delete(url: URI): Promise<Result<Result<undefined, Error>, Error>>;
}
declare class IndexDBTestGateway implements bs.TestGateway {
    readonly logger: Logger;
    readonly sthis: SuperThis;
    constructor(sthis: SuperThis);
    get(url: URI, key: string): Promise<Uint8Array<ArrayBufferLike>>;
}

declare class KeyBagProviderIndexDB implements rt.kb.KeyBagProvider {
    readonly _db: ResolveOnce<IDBPDatabase<unknown>>;
    readonly dbName: string;
    readonly url: URI;
    readonly logger: Logger;
    readonly sthis: SuperThis;
    constructor(url: URI, sthis: SuperThis);
    _prepare(): Promise<IDBPDatabase<unknown>>;
    get(id: string): Promise<rt.kb.KeyItem | undefined>;
    set(id: string, item: rt.kb.KeyItem): Promise<void>;
}

export { type DbName, IndexDBGateway as GatewayImpl, IndexDBTestGateway as GatewayTestImpl, IndexDBGateway, IndexDBTestGateway, KeyBagProviderIndexDB as KeyBagProviderImpl, KeyBagProviderIndexDB, getIndexDBName };
declare module '@fireproof/core/web'
