import { DocTypes, IndexKeyType, DocFragment, DocWithId, IndexRow, Database, ConfigOpts, MapFn, QueryOpts, AllDocsQueryOpts, ClockHead, ChangesOptions, DocSet, DocResponse } from '@fireproof/core';
import React, { ImgHTMLAttributes } from 'react';
import { DocFileMeta } from '@fireproof/core/react';

interface LiveQueryResult<T extends DocTypes, K extends IndexKeyType, R extends DocFragment = T> {
    readonly docs: DocWithId<T>[];
    readonly rows: IndexRow<K, T, R>[];
    readonly length: number;
    map<U>(callbackfn: (value: DocWithId<T>, index: number, array: DocWithId<T>[]) => U): U[];
    filter(predicate: (value: DocWithId<T>, index: number, array: DocWithId<T>[]) => boolean): DocWithId<T>[];
    forEach(callbackfn: (value: DocWithId<T>, index: number, array: DocWithId<T>[]) => void): void;
    [Symbol.iterator](): Iterator<DocWithId<T>>;
}
type UseLiveQuery = <T extends DocTypes, K extends IndexKeyType = string, R extends DocFragment = T>(mapFn: string | MapFn<T>, query?: QueryOpts<K>, initialRows?: IndexRow<K, T, R>[]) => LiveQueryResult<T, K, R>;
interface AllDocsResult<T extends DocTypes> {
    readonly docs: DocWithId<T>[];
}
interface ChangesResult<T extends DocTypes> {
    readonly docs: DocWithId<T>[];
}
type UseAllDocs = <T extends DocTypes>(query?: AllDocsQueryOpts) => AllDocsResult<T>;
type UseChanges = <T extends DocTypes>(since: ClockHead, opts: ChangesOptions) => ChangesResult<T>;
interface UpdateDocFnOptions {
    readonly replace?: boolean;
    readonly reset?: boolean;
}
type UpdateDocFn<T extends DocTypes> = (newDoc?: DocSet<T>, options?: UpdateDocFnOptions) => void;
type StoreDocFn<T extends DocTypes> = (existingDoc?: DocWithId<T>) => Promise<DocResponse>;
type DeleteDocFn<T extends DocTypes> = (existingDoc?: DocWithId<T>) => Promise<DocResponse>;
type UseDocumentResultTuple<T extends DocTypes> = [DocWithId<T>, UpdateDocFn<T>, StoreDocFn<T>, DeleteDocFn<T>];
interface UseDocumentResultObject<T extends DocTypes> {
    doc: DocWithId<T>;
    merge: (newDoc: Partial<T>) => void;
    replace: (newDoc: T) => void;
    reset: () => void;
    refresh: () => Promise<void>;
    save: StoreDocFn<T>;
    remove: DeleteDocFn<T>;
    submit: (e?: Event) => Promise<void>;
}
type UseDocumentResult<T extends DocTypes> = UseDocumentResultObject<T> & UseDocumentResultTuple<T>;
type UseDocumentInitialDocOrFn<T extends DocTypes> = DocSet<T> | (() => DocSet<T>);
type UseDocument = <T extends DocTypes>(initialDocOrFn: UseDocumentInitialDocOrFn<T>) => UseDocumentResult<T>;
interface UseFireproof {
    readonly database: Database;
    readonly useDocument: UseDocument;
    readonly useLiveQuery: UseLiveQuery;
    readonly useAllDocs: UseAllDocs;
    readonly useChanges: UseChanges;
}
declare const FireproofCtx: UseFireproof;
declare function useFireproof(name?: string | Database, config?: ConfigOpts): UseFireproof;

interface TLUseDocument {
    <T extends DocTypes>(initialDoc: DocWithId<T>): UseDocumentResult<T>;
    database: Database;
}
declare const useDocument: TLUseDocument;

interface TLUseLiveQuery {
    <T extends DocTypes, K extends IndexKeyType, R extends DocFragment = T>(...args: Parameters<UseLiveQuery>): LiveQueryResult<T, K, R>;
    database: Database;
}
declare const useLiveQuery: TLUseLiveQuery;

interface TLUseAllDocs {
    <T extends DocTypes>(...args: Parameters<UseAllDocs>): AllDocsResult<T>;
    database: Database;
}
declare const useAllDocs: TLUseAllDocs;

interface TLUseChanges {
    <T extends DocTypes>(...args: Parameters<UseChanges>): ChangesResult<T>;
    database: Database;
}
declare const useChanges: TLUseChanges;

type FileType = File | DocFileMeta;
interface ImgFileProps extends Omit<ImgHTMLAttributes<HTMLImageElement>, "src"> {
    file?: FileType;
    meta?: FileType;
}
declare function ImgFile({ file, meta, ...imgProps }: ImgFileProps): React.DetailedReactHTMLElement<{
    dir?: string | undefined | undefined;
    id?: string | undefined | undefined;
    loading?: "eager" | "lazy" | undefined | undefined;
    alt?: string | undefined | undefined;
    crossOrigin?: "" | "anonymous" | "use-credentials" | undefined;
    decoding?: "async" | "auto" | "sync" | undefined | undefined;
    fetchPriority?: "high" | "low" | "auto" | undefined;
    height?: number | string | undefined | undefined;
    referrerPolicy?: React.HTMLAttributeReferrerPolicy | undefined;
    sizes?: string | undefined | undefined;
    srcSet?: string | undefined | undefined;
    useMap?: string | undefined | undefined;
    width?: number | string | undefined | undefined;
    defaultChecked?: boolean | undefined | undefined;
    defaultValue?: string | number | readonly string[] | undefined;
    suppressContentEditableWarning?: boolean | undefined | undefined;
    suppressHydrationWarning?: boolean | undefined | undefined;
    accessKey?: string | undefined | undefined;
    autoCapitalize?: "off" | "none" | "on" | "sentences" | "words" | "characters" | undefined | (string & {}) | undefined;
    autoFocus?: boolean | undefined | undefined;
    className?: string | undefined | undefined;
    contentEditable?: (boolean | "true" | "false") | "inherit" | "plaintext-only" | undefined;
    contextMenu?: string | undefined | undefined;
    draggable?: (boolean | "true" | "false") | undefined;
    enterKeyHint?: "enter" | "done" | "go" | "next" | "previous" | "search" | "send" | undefined | undefined;
    hidden?: boolean | undefined | undefined;
    lang?: string | undefined | undefined;
    nonce?: string | undefined | undefined;
    slot?: string | undefined | undefined;
    spellCheck?: (boolean | "true" | "false") | undefined;
    style?: React.CSSProperties | undefined;
    tabIndex?: number | undefined | undefined;
    title?: string | undefined | undefined;
    translate?: "yes" | "no" | undefined | undefined;
    radioGroup?: string | undefined | undefined;
    role?: React.AriaRole | undefined;
    about?: string | undefined | undefined;
    content?: string | undefined | undefined;
    datatype?: string | undefined | undefined;
    inlist?: any;
    prefix?: string | undefined | undefined;
    property?: string | undefined | undefined;
    rel?: string | undefined | undefined;
    resource?: string | undefined | undefined;
    rev?: string | undefined | undefined;
    typeof?: string | undefined | undefined;
    vocab?: string | undefined | undefined;
    autoCorrect?: string | undefined | undefined;
    autoSave?: string | undefined | undefined;
    color?: string | undefined | undefined;
    itemProp?: string | undefined | undefined;
    itemScope?: boolean | undefined | undefined;
    itemType?: string | undefined | undefined;
    itemID?: string | undefined | undefined;
    itemRef?: string | undefined | undefined;
    results?: number | undefined | undefined;
    security?: string | undefined | undefined;
    unselectable?: "on" | "off" | undefined | undefined;
    inputMode?: "none" | "text" | "tel" | "url" | "email" | "numeric" | "decimal" | "search" | undefined | undefined;
    is?: string | undefined | undefined;
    "aria-activedescendant"?: string | undefined | undefined;
    "aria-atomic"?: (boolean | "true" | "false") | undefined;
    "aria-autocomplete"?: "none" | "inline" | "list" | "both" | undefined | undefined;
    "aria-braillelabel"?: string | undefined | undefined;
    "aria-brailleroledescription"?: string | undefined | undefined;
    "aria-busy"?: (boolean | "true" | "false") | undefined;
    "aria-checked"?: boolean | "false" | "mixed" | "true" | undefined | undefined;
    "aria-colcount"?: number | undefined | undefined;
    "aria-colindex"?: number | undefined | undefined;
    "aria-colindextext"?: string | undefined | undefined;
    "aria-colspan"?: number | undefined | undefined;
    "aria-controls"?: string | undefined | undefined;
    "aria-current"?: boolean | "false" | "true" | "page" | "step" | "location" | "date" | "time" | undefined | undefined;
    "aria-describedby"?: string | undefined | undefined;
    "aria-description"?: string | undefined | undefined;
    "aria-details"?: string | undefined | undefined;
    "aria-disabled"?: (boolean | "true" | "false") | undefined;
    "aria-dropeffect"?: "none" | "copy" | "execute" | "link" | "move" | "popup" | undefined | undefined;
    "aria-errormessage"?: string | undefined | undefined;
    "aria-expanded"?: (boolean | "true" | "false") | undefined;
    "aria-flowto"?: string | undefined | undefined;
    "aria-grabbed"?: (boolean | "true" | "false") | undefined;
    "aria-haspopup"?: boolean | "false" | "true" | "menu" | "listbox" | "tree" | "grid" | "dialog" | undefined | undefined;
    "aria-hidden"?: (boolean | "true" | "false") | undefined;
    "aria-invalid"?: boolean | "false" | "true" | "grammar" | "spelling" | undefined | undefined;
    "aria-keyshortcuts"?: string | undefined | undefined;
    "aria-label"?: string | undefined | undefined;
    "aria-labelledby"?: string | undefined | undefined;
    "aria-level"?: number | undefined | undefined;
    "aria-live"?: "off" | "assertive" | "polite" | undefined | undefined;
    "aria-modal"?: (boolean | "true" | "false") | undefined;
    "aria-multiline"?: (boolean | "true" | "false") | undefined;
    "aria-multiselectable"?: (boolean | "true" | "false") | undefined;
    "aria-orientation"?: "horizontal" | "vertical" | undefined | undefined;
    "aria-owns"?: string | undefined | undefined;
    "aria-placeholder"?: string | undefined | undefined;
    "aria-posinset"?: number | undefined | undefined;
    "aria-pressed"?: boolean | "false" | "mixed" | "true" | undefined | undefined;
    "aria-readonly"?: (boolean | "true" | "false") | undefined;
    "aria-relevant"?: "additions" | "additions removals" | "additions text" | "all" | "removals" | "removals additions" | "removals text" | "text" | "text additions" | "text removals" | undefined | undefined;
    "aria-required"?: (boolean | "true" | "false") | undefined;
    "aria-roledescription"?: string | undefined | undefined;
    "aria-rowcount"?: number | undefined | undefined;
    "aria-rowindex"?: number | undefined | undefined;
    "aria-rowindextext"?: string | undefined | undefined;
    "aria-rowspan"?: number | undefined | undefined;
    "aria-selected"?: (boolean | "true" | "false") | undefined;
    "aria-setsize"?: number | undefined | undefined;
    "aria-sort"?: "none" | "ascending" | "descending" | "other" | undefined | undefined;
    "aria-valuemax"?: number | undefined | undefined;
    "aria-valuemin"?: number | undefined | undefined;
    "aria-valuenow"?: number | undefined | undefined;
    "aria-valuetext"?: string | undefined | undefined;
    children?: React.ReactNode;
    dangerouslySetInnerHTML?: {
        __html: string | TrustedHTML;
    } | undefined | undefined;
    onCopy?: React.ClipboardEventHandler<HTMLImageElement> | undefined;
    onCopyCapture?: React.ClipboardEventHandler<HTMLImageElement> | undefined;
    onCut?: React.ClipboardEventHandler<HTMLImageElement> | undefined;
    onCutCapture?: React.ClipboardEventHandler<HTMLImageElement> | undefined;
    onPaste?: React.ClipboardEventHandler<HTMLImageElement> | undefined;
    onPasteCapture?: React.ClipboardEventHandler<HTMLImageElement> | undefined;
    onCompositionEnd?: React.CompositionEventHandler<HTMLImageElement> | undefined;
    onCompositionEndCapture?: React.CompositionEventHandler<HTMLImageElement> | undefined;
    onCompositionStart?: React.CompositionEventHandler<HTMLImageElement> | undefined;
    onCompositionStartCapture?: React.CompositionEventHandler<HTMLImageElement> | undefined;
    onCompositionUpdate?: React.CompositionEventHandler<HTMLImageElement> | undefined;
    onCompositionUpdateCapture?: React.CompositionEventHandler<HTMLImageElement> | undefined;
    onFocus?: React.FocusEventHandler<HTMLImageElement> | undefined;
    onFocusCapture?: React.FocusEventHandler<HTMLImageElement> | undefined;
    onBlur?: React.FocusEventHandler<HTMLImageElement> | undefined;
    onBlurCapture?: React.FocusEventHandler<HTMLImageElement> | undefined;
    onChange?: React.FormEventHandler<HTMLImageElement> | undefined;
    onChangeCapture?: React.FormEventHandler<HTMLImageElement> | undefined;
    onBeforeInput?: React.FormEventHandler<HTMLImageElement> | undefined;
    onBeforeInputCapture?: React.FormEventHandler<HTMLImageElement> | undefined;
    onInput?: React.FormEventHandler<HTMLImageElement> | undefined;
    onInputCapture?: React.FormEventHandler<HTMLImageElement> | undefined;
    onReset?: React.FormEventHandler<HTMLImageElement> | undefined;
    onResetCapture?: React.FormEventHandler<HTMLImageElement> | undefined;
    onSubmit?: React.FormEventHandler<HTMLImageElement> | undefined;
    onSubmitCapture?: React.FormEventHandler<HTMLImageElement> | undefined;
    onInvalid?: React.FormEventHandler<HTMLImageElement> | undefined;
    onInvalidCapture?: React.FormEventHandler<HTMLImageElement> | undefined;
    onLoad?: React.ReactEventHandler<HTMLImageElement> | undefined;
    onLoadCapture?: React.ReactEventHandler<HTMLImageElement> | undefined;
    onError?: React.ReactEventHandler<HTMLImageElement> | undefined;
    onErrorCapture?: React.ReactEventHandler<HTMLImageElement> | undefined;
    onKeyDown?: React.KeyboardEventHandler<HTMLImageElement> | undefined;
    onKeyDownCapture?: React.KeyboardEventHandler<HTMLImageElement> | undefined;
    onKeyPress?: React.KeyboardEventHandler<HTMLImageElement> | undefined;
    onKeyPressCapture?: React.KeyboardEventHandler<HTMLImageElement> | undefined;
    onKeyUp?: React.KeyboardEventHandler<HTMLImageElement> | undefined;
    onKeyUpCapture?: React.KeyboardEventHandler<HTMLImageElement> | undefined;
    onAbort?: React.ReactEventHandler<HTMLImageElement> | undefined;
    onAbortCapture?: React.ReactEventHandler<HTMLImageElement> | undefined;
    onCanPlay?: React.ReactEventHandler<HTMLImageElement> | undefined;
    onCanPlayCapture?: React.ReactEventHandler<HTMLImageElement> | undefined;
    onCanPlayThrough?: React.ReactEventHandler<HTMLImageElement> | undefined;
    onCanPlayThroughCapture?: React.ReactEventHandler<HTMLImageElement> | undefined;
    onDurationChange?: React.ReactEventHandler<HTMLImageElement> | undefined;
    onDurationChangeCapture?: React.ReactEventHandler<HTMLImageElement> | undefined;
    onEmptied?: React.ReactEventHandler<HTMLImageElement> | undefined;
    onEmptiedCapture?: React.ReactEventHandler<HTMLImageElement> | undefined;
    onEncrypted?: React.ReactEventHandler<HTMLImageElement> | undefined;
    onEncryptedCapture?: React.ReactEventHandler<HTMLImageElement> | undefined;
    onEnded?: React.ReactEventHandler<HTMLImageElement> | undefined;
    onEndedCapture?: React.ReactEventHandler<HTMLImageElement> | undefined;
    onLoadedData?: React.ReactEventHandler<HTMLImageElement> | undefined;
    onLoadedDataCapture?: React.ReactEventHandler<HTMLImageElement> | undefined;
    onLoadedMetadata?: React.ReactEventHandler<HTMLImageElement> | undefined;
    onLoadedMetadataCapture?: React.ReactEventHandler<HTMLImageElement> | undefined;
    onLoadStart?: React.ReactEventHandler<HTMLImageElement> | undefined;
    onLoadStartCapture?: React.ReactEventHandler<HTMLImageElement> | undefined;
    onPause?: React.ReactEventHandler<HTMLImageElement> | undefined;
    onPauseCapture?: React.ReactEventHandler<HTMLImageElement> | undefined;
    onPlay?: React.ReactEventHandler<HTMLImageElement> | undefined;
    onPlayCapture?: React.ReactEventHandler<HTMLImageElement> | undefined;
    onPlaying?: React.ReactEventHandler<HTMLImageElement> | undefined;
    onPlayingCapture?: React.ReactEventHandler<HTMLImageElement> | undefined;
    onProgress?: React.ReactEventHandler<HTMLImageElement> | undefined;
    onProgressCapture?: React.ReactEventHandler<HTMLImageElement> | undefined;
    onRateChange?: React.ReactEventHandler<HTMLImageElement> | undefined;
    onRateChangeCapture?: React.ReactEventHandler<HTMLImageElement> | undefined;
    onResize?: React.ReactEventHandler<HTMLImageElement> | undefined;
    onResizeCapture?: React.ReactEventHandler<HTMLImageElement> | undefined;
    onSeeked?: React.ReactEventHandler<HTMLImageElement> | undefined;
    onSeekedCapture?: React.ReactEventHandler<HTMLImageElement> | undefined;
    onSeeking?: React.ReactEventHandler<HTMLImageElement> | undefined;
    onSeekingCapture?: React.ReactEventHandler<HTMLImageElement> | undefined;
    onStalled?: React.ReactEventHandler<HTMLImageElement> | undefined;
    onStalledCapture?: React.ReactEventHandler<HTMLImageElement> | undefined;
    onSuspend?: React.ReactEventHandler<HTMLImageElement> | undefined;
    onSuspendCapture?: React.ReactEventHandler<HTMLImageElement> | undefined;
    onTimeUpdate?: React.ReactEventHandler<HTMLImageElement> | undefined;
    onTimeUpdateCapture?: React.ReactEventHandler<HTMLImageElement> | undefined;
    onVolumeChange?: React.ReactEventHandler<HTMLImageElement> | undefined;
    onVolumeChangeCapture?: React.ReactEventHandler<HTMLImageElement> | undefined;
    onWaiting?: React.ReactEventHandler<HTMLImageElement> | undefined;
    onWaitingCapture?: React.ReactEventHandler<HTMLImageElement> | undefined;
    onAuxClick?: React.MouseEventHandler<HTMLImageElement> | undefined;
    onAuxClickCapture?: React.MouseEventHandler<HTMLImageElement> | undefined;
    onClick?: React.MouseEventHandler<HTMLImageElement> | undefined;
    onClickCapture?: React.MouseEventHandler<HTMLImageElement> | undefined;
    onContextMenu?: React.MouseEventHandler<HTMLImageElement> | undefined;
    onContextMenuCapture?: React.MouseEventHandler<HTMLImageElement> | undefined;
    onDoubleClick?: React.MouseEventHandler<HTMLImageElement> | undefined;
    onDoubleClickCapture?: React.MouseEventHandler<HTMLImageElement> | undefined;
    onDrag?: React.DragEventHandler<HTMLImageElement> | undefined;
    onDragCapture?: React.DragEventHandler<HTMLImageElement> | undefined;
    onDragEnd?: React.DragEventHandler<HTMLImageElement> | undefined;
    onDragEndCapture?: React.DragEventHandler<HTMLImageElement> | undefined;
    onDragEnter?: React.DragEventHandler<HTMLImageElement> | undefined;
    onDragEnterCapture?: React.DragEventHandler<HTMLImageElement> | undefined;
    onDragExit?: React.DragEventHandler<HTMLImageElement> | undefined;
    onDragExitCapture?: React.DragEventHandler<HTMLImageElement> | undefined;
    onDragLeave?: React.DragEventHandler<HTMLImageElement> | undefined;
    onDragLeaveCapture?: React.DragEventHandler<HTMLImageElement> | undefined;
    onDragOver?: React.DragEventHandler<HTMLImageElement> | undefined;
    onDragOverCapture?: React.DragEventHandler<HTMLImageElement> | undefined;
    onDragStart?: React.DragEventHandler<HTMLImageElement> | undefined;
    onDragStartCapture?: React.DragEventHandler<HTMLImageElement> | undefined;
    onDrop?: React.DragEventHandler<HTMLImageElement> | undefined;
    onDropCapture?: React.DragEventHandler<HTMLImageElement> | undefined;
    onMouseDown?: React.MouseEventHandler<HTMLImageElement> | undefined;
    onMouseDownCapture?: React.MouseEventHandler<HTMLImageElement> | undefined;
    onMouseEnter?: React.MouseEventHandler<HTMLImageElement> | undefined;
    onMouseLeave?: React.MouseEventHandler<HTMLImageElement> | undefined;
    onMouseMove?: React.MouseEventHandler<HTMLImageElement> | undefined;
    onMouseMoveCapture?: React.MouseEventHandler<HTMLImageElement> | undefined;
    onMouseOut?: React.MouseEventHandler<HTMLImageElement> | undefined;
    onMouseOutCapture?: React.MouseEventHandler<HTMLImageElement> | undefined;
    onMouseOver?: React.MouseEventHandler<HTMLImageElement> | undefined;
    onMouseOverCapture?: React.MouseEventHandler<HTMLImageElement> | undefined;
    onMouseUp?: React.MouseEventHandler<HTMLImageElement> | undefined;
    onMouseUpCapture?: React.MouseEventHandler<HTMLImageElement> | undefined;
    onSelect?: React.ReactEventHandler<HTMLImageElement> | undefined;
    onSelectCapture?: React.ReactEventHandler<HTMLImageElement> | undefined;
    onTouchCancel?: React.TouchEventHandler<HTMLImageElement> | undefined;
    onTouchCancelCapture?: React.TouchEventHandler<HTMLImageElement> | undefined;
    onTouchEnd?: React.TouchEventHandler<HTMLImageElement> | undefined;
    onTouchEndCapture?: React.TouchEventHandler<HTMLImageElement> | undefined;
    onTouchMove?: React.TouchEventHandler<HTMLImageElement> | undefined;
    onTouchMoveCapture?: React.TouchEventHandler<HTMLImageElement> | undefined;
    onTouchStart?: React.TouchEventHandler<HTMLImageElement> | undefined;
    onTouchStartCapture?: React.TouchEventHandler<HTMLImageElement> | undefined;
    onPointerDown?: React.PointerEventHandler<HTMLImageElement> | undefined;
    onPointerDownCapture?: React.PointerEventHandler<HTMLImageElement> | undefined;
    onPointerMove?: React.PointerEventHandler<HTMLImageElement> | undefined;
    onPointerMoveCapture?: React.PointerEventHandler<HTMLImageElement> | undefined;
    onPointerUp?: React.PointerEventHandler<HTMLImageElement> | undefined;
    onPointerUpCapture?: React.PointerEventHandler<HTMLImageElement> | undefined;
    onPointerCancel?: React.PointerEventHandler<HTMLImageElement> | undefined;
    onPointerCancelCapture?: React.PointerEventHandler<HTMLImageElement> | undefined;
    onPointerEnter?: React.PointerEventHandler<HTMLImageElement> | undefined;
    onPointerLeave?: React.PointerEventHandler<HTMLImageElement> | undefined;
    onPointerOver?: React.PointerEventHandler<HTMLImageElement> | undefined;
    onPointerOverCapture?: React.PointerEventHandler<HTMLImageElement> | undefined;
    onPointerOut?: React.PointerEventHandler<HTMLImageElement> | undefined;
    onPointerOutCapture?: React.PointerEventHandler<HTMLImageElement> | undefined;
    onGotPointerCapture?: React.PointerEventHandler<HTMLImageElement> | undefined;
    onGotPointerCaptureCapture?: React.PointerEventHandler<HTMLImageElement> | undefined;
    onLostPointerCapture?: React.PointerEventHandler<HTMLImageElement> | undefined;
    onLostPointerCaptureCapture?: React.PointerEventHandler<HTMLImageElement> | undefined;
    onScroll?: React.UIEventHandler<HTMLImageElement> | undefined;
    onScrollCapture?: React.UIEventHandler<HTMLImageElement> | undefined;
    onWheel?: React.WheelEventHandler<HTMLImageElement> | undefined;
    onWheelCapture?: React.WheelEventHandler<HTMLImageElement> | undefined;
    onAnimationStart?: React.AnimationEventHandler<HTMLImageElement> | undefined;
    onAnimationStartCapture?: React.AnimationEventHandler<HTMLImageElement> | undefined;
    onAnimationEnd?: React.AnimationEventHandler<HTMLImageElement> | undefined;
    onAnimationEndCapture?: React.AnimationEventHandler<HTMLImageElement> | undefined;
    onAnimationIteration?: React.AnimationEventHandler<HTMLImageElement> | undefined;
    onAnimationIterationCapture?: React.AnimationEventHandler<HTMLImageElement> | undefined;
    onTransitionEnd?: React.TransitionEventHandler<HTMLImageElement> | undefined;
    onTransitionEndCapture?: React.TransitionEventHandler<HTMLImageElement> | undefined;
    src: string;
}, HTMLElement> | null;

export { FireproofCtx, ImgFile, type LiveQueryResult, type TLUseAllDocs, type TLUseChanges, type TLUseDocument, type TLUseLiveQuery, type UseDocumentResult, type UseFireproof, useAllDocs, useChanges, useDocument, useFireproof, useLiveQuery };
declare module '@fireproof/core/web'
