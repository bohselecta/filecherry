{"version":3,"sources":["../../../src/runtime/gateways/file/node/to-array-buffer.ts","../../../src/runtime/gateways/file/node/mem-filesystem.ts","../../../src/runtime/gateways/file/node/index.ts","../../../src/runtime/gateways/file/node/key-bag-file.ts","../../../src/runtime/gateways/file/node/get-file-system.ts","../../../src/runtime/gateways/file/node/node-filesystem.ts","../../../src/runtime/gateways/file/version.ts","../../../src/runtime/gateways/file/node/gateway-impl.ts","../../../src/runtime/gateways/file/node/utils.ts"],"sourcesContent":["export function toArrayBuffer(buffer: Buffer | string): Uint8Array {\n  if (typeof buffer === \"string\") {\n    buffer = Buffer.from(buffer);\n  }\n  const ab = new ArrayBuffer(buffer.length);\n  const view = new Uint8Array(ab);\n  for (let i = 0; i < buffer.length; ++i) {\n    view[i] = buffer[i];\n  }\n  return view;\n}\n","import type { PathLike, MakeDirectoryOptions, Stats } from \"fs\";\nimport { fs } from \"memfs\";\nimport { IReaddirOptions } from \"memfs/lib/node/types/options.js\";\nimport { toArrayBuffer } from \"./to-array-buffer.js\";\nimport type { SysFileSystem } from \"@fireproof/core\";\n\nexport class MemFileSystem implements SysFileSystem {\n  async start(): Promise<SysFileSystem> {\n    return this;\n  }\n  mkdir(path: PathLike, options?: { recursive: boolean }): Promise<string | undefined> {\n    return fs.promises.mkdir(path, options);\n  }\n  readdir(path: PathLike, options?: IReaddirOptions): Promise<string[]> {\n    return fs.promises.readdir(path, options) as Promise<string[]>;\n  }\n  rm(path: PathLike, options?: MakeDirectoryOptions & { recursive: boolean }): Promise<void> {\n    return fs.promises.rm(path, options);\n  }\n  copyFile(source: PathLike, destination: PathLike): Promise<void> {\n    return fs.promises.copyFile(source, destination);\n  }\n  async readfile(path: PathLike, options?: { encoding: BufferEncoding; flag?: string }): Promise<Uint8Array> {\n    const ret = await fs.promises.readFile(path, options);\n    return toArrayBuffer(ret);\n  }\n  stat(path: PathLike): Promise<Stats> {\n    return fs.promises.stat(path) as Promise<Stats>;\n  }\n  unlink(path: PathLike): Promise<void> {\n    return fs.promises.unlink(path);\n  }\n  writefile(path: PathLike, data: Uint8Array | string): Promise<void> {\n    return fs.promises.writeFile(path, Buffer.from(data));\n  }\n}\n","export * from \"./key-bag-file.js\";\n\n// test needs that\nexport * from \"./get-file-system.js\";\n\nimport { KeyBagProviderFile as KeyBagProviderImpl } from \"./key-bag-file.js\";\n\nexport { KeyBagProviderImpl };\n\nimport { FileGateway as GatewayImpl, FileTestGateway as GatewayTestImpl } from \"./gateway-impl.js\";\nexport { GatewayImpl, GatewayTestImpl };\n","import { URI } from \"@adviser/cement\";\nimport { isNotFoundError, Logger } from \"@fireproof/core\";\nimport type { rt, SuperThis, SysFileSystem } from \"@fireproof/core\";\nimport { getFileSystem } from \"./get-file-system.js\";\n\ninterface KeyBagCtx {\n  readonly dirName: string;\n  readonly sysFS: SysFileSystem;\n  readonly fName: string;\n}\n\nexport class KeyBagProviderFile implements rt.kb.KeyBagProvider {\n  async _prepare(id: string): Promise<KeyBagCtx> {\n    await this.sthis.start();\n    let sysFS: SysFileSystem;\n    switch (this.url.protocol) {\n      case \"file:\": {\n        sysFS = await getFileSystem(this.url);\n        break;\n      }\n      default:\n        throw this.logger.Error().Url(this.url).Msg(\"unsupported protocol\").AsError();\n    }\n    const dirName = this.url.pathname;\n    await sysFS.mkdir(dirName, { recursive: true });\n    return {\n      dirName,\n      sysFS,\n      fName: this.sthis.pathOps.join(dirName, `${id.replace(/[^a-zA-Z0-9]/g, \"_\")}.json`),\n    };\n  }\n\n  private readonly url: URI;\n  readonly logger: Logger;\n  readonly sthis: SuperThis;\n  constructor(url: URI, sthis: SuperThis) {\n    this.url = url;\n    this.sthis = sthis;\n    this.logger = sthis.logger;\n  }\n\n  async get(id: string): Promise<rt.kb.KeyItem | undefined> {\n    const ctx = await this._prepare(id);\n    try {\n      const p = await ctx.sysFS.readfile(ctx.fName);\n      const ki = JSON.parse(this.sthis.txt.decode(p)) as rt.kb.KeyItem;\n      return ki;\n    } catch (e) {\n      if (isNotFoundError(e)) {\n        return undefined;\n      }\n      throw this.logger.Error().Err(e).Str(\"file\", ctx.dirName).Msg(\"read bag failed\").AsError();\n    }\n  }\n\n  async set(id: string, item: rt.kb.KeyItem): Promise<void> {\n    const ctx = await this._prepare(id);\n    const p = this.sthis.txt.encode(JSON.stringify(item, null, 2));\n    await ctx.sysFS.writefile(ctx.fName, p);\n  }\n}\n","import { KeyedResolvOnce, type URI } from \"@adviser/cement\";\nimport type { SysFileSystem } from \"@fireproof/core\";\nimport { NodeFileSystem } from \"./node-filesystem.js\";\n\nconst externalLoaders = new KeyedResolvOnce<SysFileSystem>();\nexport async function getFileSystem(url: URI): Promise<SysFileSystem> {\n  const name = url.getParam(\"fs\", \"node\");\n  let fs: SysFileSystem;\n  switch (name) {\n    case \"mem\":\n      fs = await externalLoaders.get(name).once(async () => {\n        const { MemFileSystem } = await import(\"./mem-filesystem.js\");\n        return new MemFileSystem();\n      });\n      break;\n    // case 'deno': {\n    //   const { DenoFileSystem } = await import(\"./deno-filesystem.js\");\n    //   fs = new DenoFileSystem();\n    //   break;\n    // }\n    default:\n      fs = await externalLoaders.get(name).once(async () => {\n        return new NodeFileSystem();\n      });\n  }\n  return fs.start();\n}\n","import type { PathLike, MakeDirectoryOptions, Stats, ObjectEncodingOptions } from \"node:fs\";\nimport type { mkdir, readdir, rm, copyFile, readFile, stat, unlink, writeFile } from \"node:fs/promises\";\nimport { toArrayBuffer } from \"./to-array-buffer.js\";\nimport type { SysFileSystem } from \"@fireproof/core\";\nimport { runtimeFn } from \"@adviser/cement\";\n\nexport class NodeFileSystem implements SysFileSystem {\n  fs?: {\n    mkdir: typeof mkdir;\n    readdir: typeof readdir;\n    rm: typeof rm;\n    copyFile: typeof copyFile;\n    readFile: typeof readFile;\n    stat: typeof stat;\n    unlink: typeof unlink;\n    writeFile: typeof writeFile;\n  };\n\n  async start(): Promise<SysFileSystem> {\n    this.fs = await import(\"node:fs/promises\");\n    return this;\n  }\n  async mkdir(path: PathLike, options?: { recursive: boolean }): Promise<string | undefined> {\n    return this.fs?.mkdir(path, options);\n  }\n  async readdir(path: PathLike, options?: ObjectEncodingOptions): Promise<string[]> {\n    return this.fs?.readdir(path, options) as Promise<string[]>;\n  }\n  async rm(path: PathLike, options?: MakeDirectoryOptions & { recursive: boolean }): Promise<void> {\n    return this.fs?.rm(path, options);\n  }\n  async copyFile(source: PathLike, destination: PathLike): Promise<void> {\n    return this.fs?.copyFile(source, destination);\n  }\n  async readfile(path: PathLike, options?: { encoding: BufferEncoding; flag?: string }): Promise<Uint8Array> {\n    const ret = (await this.fs?.readFile(path, options)) as Buffer;\n    return toArrayBuffer(ret);\n  }\n  stat(path: PathLike): Promise<Stats> {\n    return this.fs?.stat(path) as Promise<Stats>;\n  }\n  async unlink(path: PathLike): Promise<void> {\n    return this.fs?.unlink(path);\n  }\n  async writefile(path: PathLike, data: Uint8Array | string): Promise<void> {\n    if (runtimeFn().isDeno) {\n      return this.fs?.writeFile(path, data);\n    }\n    return this.fs?.writeFile(path, Buffer.from(data));\n  }\n}\n\n// import { type NodeMap, join } from \"../../sys-container.js\";\n// import type { ObjectEncodingOptions, PathLike } from \"fs\";\n// import * as fs from \"fs/promises\";\n// import * as path from \"path\";\n// import * as os from \"os\";\n// import * as url from \"url\";\n// import { toArrayBuffer } from \"./utils.js\";\n\n// export async function createNodeSysContainer(): Promise<NodeMap> {\n//   // const nodePath = \"node:path\";\n//   // const nodeOS = \"node:os\";\n//   // const nodeURL = \"node:url\";\n//   // const nodeFS = \"node:fs\";\n//   // const fs = (await import(\"node:fs\")).promises;\n//   // const assert = \"assert\";\n//   // const path = await import(\"node:path\");\n//   return {\n//     state: \"node\",\n//     ...path,\n//     // ...(await import(\"node:os\")),\n//     // ...(await import(\"node:url\")),\n//     ...os,\n//     ...url,\n//     ...fs,\n//     join,\n//     stat: fs.stat as NodeMap[\"stat\"],\n//     readdir: fs.readdir as NodeMap[\"readdir\"],\n//     readfile: async (path: PathLike, options?: ObjectEncodingOptions): Promise<Uint8Array> => {\n//       const rs = await fs.readFile(path, options);\n//       return toArrayBuffer(rs);\n//     },\n//     writefile: fs.writeFile as NodeMap[\"writefile\"],\n//   };\n// }\n","export const FILESTORE_VERSION = \"v0.19-file\";\n","import { FILESTORE_VERSION } from \"../version.js\";\nimport { exception2Result, KeyedResolvOnce, Logger, Result, URI } from \"@adviser/cement\";\nimport { ensureLogger, exceptionWrapper, isNotFoundError, NotFoundError, bs } from \"@fireproof/core\";\nimport { getFileName, getPath } from \"./utils.js\";\nimport type { SuperThis, SysFileSystem } from \"@fireproof/core\";\nimport { getFileSystem } from \"./get-file-system.js\";\n\nconst versionFiles = new KeyedResolvOnce<string>();\n\nexport class FileGateway implements bs.Gateway {\n  // abstract readonly storeType: StoreType;\n  readonly logger: Logger;\n  readonly sthis: SuperThis;\n\n  constructor(sthis: SuperThis) {\n    this.sthis = sthis;\n    this.logger = sthis.logger;\n  }\n\n  async getVersionFromFile(fs: SysFileSystem, path: string, logger: Logger): Promise<string> {\n    return versionFiles.get(path).once(async () => {\n      await fs.mkdir(path, { recursive: true });\n      const vFile = this.sthis.pathOps.join(path, \"version\");\n      const vFileStat = await fs.stat(vFile).catch(() => undefined);\n      if (!vFileStat) {\n        await fs.writefile(this.sthis.pathOps.join(path, \"version\"), FILESTORE_VERSION);\n        return FILESTORE_VERSION;\n      } else if (!vFileStat.isFile()) {\n        throw logger.Error().Str(\"file\", vFile).Msg(`version file is a directory`).AsError();\n      }\n      const v = await fs.readfile(vFile);\n      const vStr = this.sthis.txt.decode(v);\n      if (vStr !== FILESTORE_VERSION) {\n        logger.Warn().Str(\"file\", vFile).Str(\"from\", vStr).Str(\"expected\", FILESTORE_VERSION).Msg(`version mismatch`);\n      }\n      return vStr;\n    });\n  }\n\n  start(baseURL: URI): Promise<Result<URI>> {\n    return exception2Result(async () => {\n      const fs = await getFileSystem(baseURL);\n      const url = baseURL.build();\n      url.defParam(\"version\", FILESTORE_VERSION);\n      // url.defParam(\"store\", this.storeType);\n      const dbUrl = await this.buildUrl(url.URI(), \"dummy\");\n      const dbdirFile = this.getFilePath(dbUrl.Ok());\n      await fs.mkdir(this.sthis.pathOps.dirname(dbdirFile), { recursive: true });\n      const dbroot = this.sthis.pathOps.dirname(dbdirFile);\n      this.logger.Debug().Url(url.URI()).Str(\"dbroot\", dbroot).Msg(\"start\");\n      url.setParam(\"version\", await this.getVersionFromFile(fs, dbroot, this.logger));\n      return url.URI();\n    });\n  }\n\n  async buildUrl(baseUrl: URI, key: string): Promise<Result<URI>> {\n    return Result.Ok(baseUrl.build().setParam(\"key\", key).URI());\n  }\n\n  async close(): Promise<Result<void>> {\n    return Result.Ok(undefined);\n  }\n  // abstract buildUrl(baseUrl: URL, key: string): Promise<Result<URL>>;\n\n  getFilePath(url: URI): string {\n    const key = url.getParam(\"key\");\n    if (!key) throw this.logger.Error().Url(url).Msg(`key not found`).AsError();\n    return this.sthis.pathOps.join(getPath(url, this.sthis), getFileName(url, this.sthis));\n  }\n\n  async put(url: URI, body: Uint8Array): Promise<Result<void>> {\n    return exception2Result(async () => {\n      const file = await this.getFilePath(url);\n      this.logger.Debug().Str(\"url\", url.toString()).Str(\"file\", file).Msg(\"put\");\n      await getFileSystem(url).then((fs) => fs.writefile(file, body));\n    });\n  }\n\n  async get(url: URI): Promise<bs.GetResult> {\n    return exceptionWrapper(async () => {\n      const file = this.getFilePath(url);\n      try {\n        const res = await getFileSystem(url).then((fs) => fs.readfile(file));\n        this.logger.Debug().Url(url.asURL()).Str(\"file\", file).Msg(\"get\");\n        return Result.Ok(new Uint8Array(res));\n      } catch (e: unknown) {\n        // this.logger.Error().Err(e).Str(\"file\", file).Msg(\"get\");\n        if (isNotFoundError(e)) {\n          return Result.Err(new NotFoundError(`file not found: ${file}`));\n        }\n        return Result.Err(e as Error);\n      }\n    });\n  }\n\n  async delete(url: URI): Promise<Result<void>> {\n    return exception2Result(async () => {\n      await getFileSystem(url).then((fs) => fs.unlink(this.getFilePath(url)));\n    });\n  }\n\n  async destroy(baseURL: URI): Promise<Result<void>> {\n    const url = await this.buildUrl(baseURL, \"x\");\n    if (url.isErr()) return url;\n    const filepath = this.sthis.pathOps.dirname(this.getFilePath(url.Ok()));\n    const fs = await getFileSystem(baseURL);\n    let files: string[] = [];\n    try {\n      files = await fs.readdir(filepath);\n    } catch (e: unknown) {\n      if (!isNotFoundError(e)) {\n        throw this.logger.Error().Err(e).Str(\"dir\", filepath).Msg(\"destroy:readdir\").AsError();\n      }\n    }\n    for (const file of files) {\n      const pathed = this.sthis.pathOps.join(filepath, file);\n      try {\n        await fs.unlink(pathed);\n      } catch (e: unknown) {\n        if (!isNotFoundError(e)) {\n          throw this.logger.Error().Err(e).Str(\"file\", pathed).Msg(\"destroy:unlink\").AsError();\n        }\n      }\n    }\n    return Result.Ok(undefined);\n  }\n}\n\nexport class FileTestGateway implements bs.TestGateway {\n  readonly logger: Logger;\n  readonly sthis: SuperThis;\n  constructor(sthis: SuperThis) {\n    this.logger = ensureLogger(sthis, \"FileTestStore\");\n    this.sthis = sthis;\n  }\n\n  async get(iurl: URI, key: string) {\n    const url = iurl.build().setParam(\"key\", key).URI();\n    const dbFile = this.sthis.pathOps.join(getPath(url, this.sthis), getFileName(url, this.sthis));\n    this.logger.Debug().Url(url).Str(\"dbFile\", dbFile).Msg(\"get\");\n    const buffer = await (await getFileSystem(url)).readfile(dbFile);\n    this.logger.Debug().Url(url).Str(\"dbFile\", dbFile).Len(buffer).Msg(\"got\");\n    return buffer;\n  }\n}\n","import type { URI } from \"@adviser/cement\";\nimport { getStore } from \"@fireproof/core\";\nimport type { SuperThis } from \"@fireproof/core\";\n\nexport function getPath(url: URI, sthis: SuperThis): string {\n  const basePath = url.pathname;\n  // .toString()\n  // .replace(new RegExp(`^${url.protocol}//`), \"\")\n  // .replace(/\\?.*$/, \"\");\n  const name = url.getParam(\"name\");\n  if (name) {\n    const version = url.getParam(\"version\");\n    if (!version) throw sthis.logger.Error().Url(url).Msg(`version not found`).AsError();\n    return sthis.pathOps.join(basePath, version, name);\n  }\n  return sthis.pathOps.join(basePath);\n}\n\nexport function getFileName(url: URI, sthis: SuperThis): string {\n  const key = url.getParam(\"key\");\n  if (!key) throw sthis.logger.Error().Url(url).Msg(`key not found`).AsError();\n  const res = getStore(url, sthis, (...a: string[]) => a.join(\"-\"));\n  switch (res.store) {\n    case \"data\":\n      return sthis.pathOps.join(res.name, key + \".car\");\n    case \"wal\":\n    case \"meta\":\n      return sthis.pathOps.join(res.name, key + \".json\");\n    default:\n      throw sthis.logger.Error().Url(url).Msg(`unsupported store type`).AsError();\n  }\n}\n"],"mappings":"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","names":["import_cement","fs","MemFileSystem","import_cement","import_core","import_core","fs"]}