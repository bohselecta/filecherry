import {
  toArrayBuffer
} from "./chunk-4A4RAVNS.js";

// src/runtime/gateways/file/node/key-bag-file.ts
import { isNotFoundError } from "@fireproof/core";

// src/runtime/gateways/file/node/get-file-system.ts
import { KeyedResolvOnce } from "@adviser/cement";

// src/runtime/gateways/file/node/node-filesystem.ts
import { runtimeFn } from "@adviser/cement";
var NodeFileSystem = class {
  async start() {
    this.fs = await import("node:fs/promises");
    return this;
  }
  async mkdir(path, options) {
    return this.fs?.mkdir(path, options);
  }
  async readdir(path, options) {
    return this.fs?.readdir(path, options);
  }
  async rm(path, options) {
    return this.fs?.rm(path, options);
  }
  async copyFile(source, destination) {
    return this.fs?.copyFile(source, destination);
  }
  async readfile(path, options) {
    const ret = await this.fs?.readFile(path, options);
    return toArrayBuffer(ret);
  }
  stat(path) {
    return this.fs?.stat(path);
  }
  async unlink(path) {
    return this.fs?.unlink(path);
  }
  async writefile(path, data) {
    if (runtimeFn().isDeno) {
      return this.fs?.writeFile(path, data);
    }
    return this.fs?.writeFile(path, Buffer.from(data));
  }
};

// src/runtime/gateways/file/node/get-file-system.ts
var externalLoaders = new KeyedResolvOnce();
async function getFileSystem(url) {
  const name = url.getParam("fs", "node");
  let fs;
  switch (name) {
    case "mem":
      fs = await externalLoaders.get(name).once(async () => {
        const { MemFileSystem } = await import("./mem-filesystem-LPPT7QV5.js");
        return new MemFileSystem();
      });
      break;
    // case 'deno': {
    //   const { DenoFileSystem } = await import("./deno-filesystem.js");
    //   fs = new DenoFileSystem();
    //   break;
    // }
    default:
      fs = await externalLoaders.get(name).once(async () => {
        return new NodeFileSystem();
      });
  }
  return fs.start();
}

// src/runtime/gateways/file/node/key-bag-file.ts
var KeyBagProviderFile = class {
  async _prepare(id) {
    await this.sthis.start();
    let sysFS;
    switch (this.url.protocol) {
      case "file:": {
        sysFS = await getFileSystem(this.url);
        break;
      }
      default:
        throw this.logger.Error().Url(this.url).Msg("unsupported protocol").AsError();
    }
    const dirName = this.url.pathname;
    await sysFS.mkdir(dirName, { recursive: true });
    return {
      dirName,
      sysFS,
      fName: this.sthis.pathOps.join(dirName, `${id.replace(/[^a-zA-Z0-9]/g, "_")}.json`)
    };
  }
  constructor(url, sthis) {
    this.url = url;
    this.sthis = sthis;
    this.logger = sthis.logger;
  }
  async get(id) {
    const ctx = await this._prepare(id);
    try {
      const p = await ctx.sysFS.readfile(ctx.fName);
      const ki = JSON.parse(this.sthis.txt.decode(p));
      return ki;
    } catch (e) {
      if (isNotFoundError(e)) {
        return void 0;
      }
      throw this.logger.Error().Err(e).Str("file", ctx.dirName).Msg("read bag failed").AsError();
    }
  }
  async set(id, item) {
    const ctx = await this._prepare(id);
    const p = this.sthis.txt.encode(JSON.stringify(item, null, 2));
    await ctx.sysFS.writefile(ctx.fName, p);
  }
};

// src/runtime/gateways/file/version.ts
var FILESTORE_VERSION = "v0.19-file";

// src/runtime/gateways/file/node/gateway-impl.ts
import { exception2Result, KeyedResolvOnce as KeyedResolvOnce2, Result } from "@adviser/cement";
import { ensureLogger, exceptionWrapper, isNotFoundError as isNotFoundError2, NotFoundError } from "@fireproof/core";

// src/runtime/gateways/file/node/utils.ts
import { getStore } from "@fireproof/core";
function getPath(url, sthis) {
  const basePath = url.pathname;
  const name = url.getParam("name");
  if (name) {
    const version = url.getParam("version");
    if (!version) throw sthis.logger.Error().Url(url).Msg(`version not found`).AsError();
    return sthis.pathOps.join(basePath, version, name);
  }
  return sthis.pathOps.join(basePath);
}
function getFileName(url, sthis) {
  const key = url.getParam("key");
  if (!key) throw sthis.logger.Error().Url(url).Msg(`key not found`).AsError();
  const res = getStore(url, sthis, (...a) => a.join("-"));
  switch (res.store) {
    case "data":
      return sthis.pathOps.join(res.name, key + ".car");
    case "wal":
    case "meta":
      return sthis.pathOps.join(res.name, key + ".json");
    default:
      throw sthis.logger.Error().Url(url).Msg(`unsupported store type`).AsError();
  }
}

// src/runtime/gateways/file/node/gateway-impl.ts
var versionFiles = new KeyedResolvOnce2();
var FileGateway = class {
  constructor(sthis) {
    this.sthis = sthis;
    this.logger = sthis.logger;
  }
  async getVersionFromFile(fs, path, logger) {
    return versionFiles.get(path).once(async () => {
      await fs.mkdir(path, { recursive: true });
      const vFile = this.sthis.pathOps.join(path, "version");
      const vFileStat = await fs.stat(vFile).catch(() => void 0);
      if (!vFileStat) {
        await fs.writefile(this.sthis.pathOps.join(path, "version"), FILESTORE_VERSION);
        return FILESTORE_VERSION;
      } else if (!vFileStat.isFile()) {
        throw logger.Error().Str("file", vFile).Msg(`version file is a directory`).AsError();
      }
      const v = await fs.readfile(vFile);
      const vStr = this.sthis.txt.decode(v);
      if (vStr !== FILESTORE_VERSION) {
        logger.Warn().Str("file", vFile).Str("from", vStr).Str("expected", FILESTORE_VERSION).Msg(`version mismatch`);
      }
      return vStr;
    });
  }
  start(baseURL) {
    return exception2Result(async () => {
      const fs = await getFileSystem(baseURL);
      const url = baseURL.build();
      url.defParam("version", FILESTORE_VERSION);
      const dbUrl = await this.buildUrl(url.URI(), "dummy");
      const dbdirFile = this.getFilePath(dbUrl.Ok());
      await fs.mkdir(this.sthis.pathOps.dirname(dbdirFile), { recursive: true });
      const dbroot = this.sthis.pathOps.dirname(dbdirFile);
      this.logger.Debug().Url(url.URI()).Str("dbroot", dbroot).Msg("start");
      url.setParam("version", await this.getVersionFromFile(fs, dbroot, this.logger));
      return url.URI();
    });
  }
  async buildUrl(baseUrl, key) {
    return Result.Ok(baseUrl.build().setParam("key", key).URI());
  }
  async close() {
    return Result.Ok(void 0);
  }
  // abstract buildUrl(baseUrl: URL, key: string): Promise<Result<URL>>;
  getFilePath(url) {
    const key = url.getParam("key");
    if (!key) throw this.logger.Error().Url(url).Msg(`key not found`).AsError();
    return this.sthis.pathOps.join(getPath(url, this.sthis), getFileName(url, this.sthis));
  }
  async put(url, body) {
    return exception2Result(async () => {
      const file = await this.getFilePath(url);
      this.logger.Debug().Str("url", url.toString()).Str("file", file).Msg("put");
      await getFileSystem(url).then((fs) => fs.writefile(file, body));
    });
  }
  async get(url) {
    return exceptionWrapper(async () => {
      const file = this.getFilePath(url);
      try {
        const res = await getFileSystem(url).then((fs) => fs.readfile(file));
        this.logger.Debug().Url(url.asURL()).Str("file", file).Msg("get");
        return Result.Ok(new Uint8Array(res));
      } catch (e) {
        if (isNotFoundError2(e)) {
          return Result.Err(new NotFoundError(`file not found: ${file}`));
        }
        return Result.Err(e);
      }
    });
  }
  async delete(url) {
    return exception2Result(async () => {
      await getFileSystem(url).then((fs) => fs.unlink(this.getFilePath(url)));
    });
  }
  async destroy(baseURL) {
    const url = await this.buildUrl(baseURL, "x");
    if (url.isErr()) return url;
    const filepath = this.sthis.pathOps.dirname(this.getFilePath(url.Ok()));
    const fs = await getFileSystem(baseURL);
    let files = [];
    try {
      files = await fs.readdir(filepath);
    } catch (e) {
      if (!isNotFoundError2(e)) {
        throw this.logger.Error().Err(e).Str("dir", filepath).Msg("destroy:readdir").AsError();
      }
    }
    for (const file of files) {
      const pathed = this.sthis.pathOps.join(filepath, file);
      try {
        await fs.unlink(pathed);
      } catch (e) {
        if (!isNotFoundError2(e)) {
          throw this.logger.Error().Err(e).Str("file", pathed).Msg("destroy:unlink").AsError();
        }
      }
    }
    return Result.Ok(void 0);
  }
};
var FileTestGateway = class {
  constructor(sthis) {
    this.logger = ensureLogger(sthis, "FileTestStore");
    this.sthis = sthis;
  }
  async get(iurl, key) {
    const url = iurl.build().setParam("key", key).URI();
    const dbFile = this.sthis.pathOps.join(getPath(url, this.sthis), getFileName(url, this.sthis));
    this.logger.Debug().Url(url).Str("dbFile", dbFile).Msg("get");
    const buffer = await (await getFileSystem(url)).readfile(dbFile);
    this.logger.Debug().Url(url).Str("dbFile", dbFile).Len(buffer).Msg("got");
    return buffer;
  }
};
export {
  FileGateway as GatewayImpl,
  FileTestGateway as GatewayTestImpl,
  KeyBagProviderFile,
  KeyBagProviderFile as KeyBagProviderImpl,
  getFileSystem
};
//# sourceMappingURL=index.js.map