import { URI, Logger as Logger$1, Result } from '@adviser/cement';
import { rt, Logger, SuperThis, SysFileSystem, bs } from '@fireproof/core';

interface KeyBagCtx {
    readonly dirName: string;
    readonly sysFS: SysFileSystem;
    readonly fName: string;
}
declare class KeyBagProviderFile implements rt.kb.KeyBagProvider {
    _prepare(id: string): Promise<KeyBagCtx>;
    private readonly url;
    readonly logger: Logger;
    readonly sthis: SuperThis;
    constructor(url: URI, sthis: SuperThis);
    get(id: string): Promise<rt.kb.KeyItem | undefined>;
    set(id: string, item: rt.kb.KeyItem): Promise<void>;
}

declare function getFileSystem(url: URI): Promise<SysFileSystem>;

declare class FileGateway implements bs.Gateway {
    readonly logger: Logger$1;
    readonly sthis: SuperThis;
    constructor(sthis: SuperThis);
    getVersionFromFile(fs: SysFileSystem, path: string, logger: Logger$1): Promise<string>;
    start(baseURL: URI): Promise<Result<URI>>;
    buildUrl(baseUrl: URI, key: string): Promise<Result<URI>>;
    close(): Promise<Result<void>>;
    getFilePath(url: URI): string;
    put(url: URI, body: Uint8Array): Promise<Result<void>>;
    get(url: URI): Promise<bs.GetResult>;
    delete(url: URI): Promise<Result<void>>;
    destroy(baseURL: URI): Promise<Result<void>>;
}
declare class FileTestGateway implements bs.TestGateway {
    readonly logger: Logger$1;
    readonly sthis: SuperThis;
    constructor(sthis: SuperThis);
    get(iurl: URI, key: string): Promise<Uint8Array<ArrayBufferLike>>;
}

export { FileGateway as GatewayImpl, FileTestGateway as GatewayTestImpl, KeyBagProviderFile, KeyBagProviderFile as KeyBagProviderImpl, getFileSystem };
declare module '@fireproof/core/node'
