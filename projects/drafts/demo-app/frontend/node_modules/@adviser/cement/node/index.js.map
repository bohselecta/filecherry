{"version":3,"sources":["../../../src/node/node-file-service.ts","../../../src/node/node-sys-abstraction.ts","../../../src/node/mock-file-service.ts"],"sourcesContent":["import path from \"node:path\";\nimport fs from \"node:fs\";\nimport process from \"node:process\";\nimport { FileService, NamedWritableStream } from \"../file-service.js\";\nimport { TxtEnDecoder, TxtEnDecoderSingleton } from \"../txt-en-decoder.js\";\n\nexport class NodeFileService implements FileService {\n  readonly baseDir: string;\n  constructor(baseDir: string = process.cwd()) {\n    this.baseDir = this.abs(baseDir);\n  }\n\n  // nodeImport(fname: string): string {\n  //   // console.log('nodeImport:'+ fname);\n  //   if (path.isAbsolute(fname)) {\n  //     return fname;\n  //   } else {\n  //     return \"./\" + path.normalize(fname);\n  //   }\n  // }\n\n  readFileString(fname: string): Promise<string> {\n    return fs.promises.readFile(fname, { encoding: \"utf-8\" });\n  }\n\n  dirname(fname: string): string {\n    return path.dirname(fname);\n  }\n  basename(fname: string): string {\n    return path.basename(fname);\n  }\n\n  join(...paths: string[]): string {\n    return path.join(...paths);\n  }\n\n  relative(from: string, to?: string): string {\n    if (to === undefined) {\n      to = from;\n      from = process.cwd();\n    }\n    const ret = path.relative(from, to);\n    // console.log('relative:'+ from + \" -> \" + to +   \"= \" + ret);\n    return ret;\n  }\n\n  abs(fname: string): string {\n    if (path.isAbsolute(fname)) {\n      return fname;\n    } else {\n      const cwd = process.cwd();\n      return path.resolve(cwd, fname);\n    }\n  }\n\n  isAbsolute(fname: string): boolean {\n    return path.isAbsolute(fname);\n  }\n\n  async writeFileString(fname: string, content: string, ende: TxtEnDecoder = TxtEnDecoderSingleton()): Promise<void> {\n    const o = await this.create(fname);\n    const wr = o.stream.getWriter();\n    await wr.write(ende.encode(content));\n    await wr.close();\n  }\n\n  async create(fname: string): Promise<NamedWritableStream> {\n    let oName = fname;\n    if (!path.isAbsolute(fname)) {\n      oName = this.abs(fname);\n    }\n\n    const base = path.dirname(oName);\n    await fs.promises.mkdir(base, { recursive: true });\n    const out = fs.createWriteStream(oName);\n    return {\n      name: oName,\n      stream: new WritableStream<Uint8Array>({\n        write(chunk): void {\n          out.write(chunk);\n        },\n        close(): void {\n          out.close();\n        },\n        abort(): void {\n          throw new Error(\"not implemented\");\n        },\n      }),\n    };\n  }\n}\n","import { SysAbstraction, SystemService, VoidFunc } from \"../sys-abstraction.js\";\nimport {\n  BaseSysAbstraction,\n  ExitHandler,\n  ExitService,\n  WrapperSysAbstraction,\n  WrapperSysAbstractionParams,\n} from \"../base-sys-abstraction.js\";\nimport { NodeFileService } from \"./node-file-service.js\";\nimport { Env, envFactory } from \"../sys-env.js\";\nimport { TxtEnDecoderSingleton } from \"../txt-en-decoder.js\";\nimport process from \"node:process\";\n\nexport class NodeExitServiceImpl implements ExitService {\n  constructor() {\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    process.on(\"unhandledRejection\", (reason: string, p: Promise<unknown>) => {\n      this.exit(19);\n    });\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    process.on(\"uncaughtException\", (error: Error) => {\n      this.exit(18);\n    });\n    process.on(\"close\", () => {\n      this.exit(0);\n    });\n    process.on(\"exit\", () => {\n      this.exit(0);\n    });\n    process.on(\"SIGQUIT\", () => {\n      this.exit(3);\n    });\n    process.on(\"SIGINT\", () => {\n      this.exit(2);\n    });\n    process.on(\"SIGTERM\", () => {\n      this.exit(9);\n    });\n  }\n  _exitHandlers: ExitHandler[] = [];\n  injectExitHandlers(hdls: ExitHandler[]): void {\n    // console.log(\"ExitService: injecting exit handlers\", hdls)\n    this._exitHandlers = hdls;\n  }\n  invoked = false;\n  readonly _handleExit = async (): Promise<void> => {\n    if (this.invoked) {\n      // console.error(\"ExitService: already invoked\");\n      return;\n    }\n    this.invoked = true;\n    for (const h of this._exitHandlers) {\n      try {\n        // console.log(`ExitService: calling handler ${h.id}`)\n        const ret = h.hdl();\n        // console.log(`ExitService: called handler ${h.id}`, ret)\n        if (typeof (ret as Promise<void>).then === \"function\") {\n          await ret;\n        }\n      } finally {\n        // ignore\n      }\n    }\n  };\n\n  exit(code: number): void {\n    // console.log(\"ExitService: exit called\", code)\n    this._handleExit()\n      .then(() => {\n        process.exit(code);\n      })\n      .catch((err) => {\n        // eslint-disable-next-line no-console\n        console.error(\"ExitService: failed to handle exit\", err);\n        process.exit(code);\n      });\n  }\n}\n\nexport class NodeSystemService implements SystemService {\n  static readonly _exitHandlers: ExitHandler[] = [];\n  readonly _exitService: ExitService = new NodeExitServiceImpl();\n  constructor() {\n    this._exitService.injectExitHandlers(NodeSystemService._exitHandlers);\n  }\n\n  Env(): Env {\n    return envFactory();\n  }\n\n  Args(): string[] {\n    return process.argv;\n  }\n\n  OnExit(hdl: VoidFunc): VoidFunc {\n    const id = crypto.randomUUID();\n    NodeSystemService._exitHandlers.push({ hdl, id });\n    return () => {\n      const idx = NodeSystemService._exitHandlers.findIndex((h) => h.id === id);\n      if (idx >= 0) {\n        NodeSystemService._exitHandlers.splice(idx, 1);\n      }\n    };\n  }\n\n  Exit(code: number): void {\n    this._exitService.exit(code);\n  }\n}\n\nlet my: BaseSysAbstraction | undefined = undefined;\nexport function NodeSysAbstraction(param?: WrapperSysAbstractionParams): SysAbstraction {\n  if (!my) {\n    my = new BaseSysAbstraction({\n      TxtEnDecoder: param?.TxtEnDecoder || TxtEnDecoderSingleton(),\n      FileSystem: new NodeFileService(),\n      SystemService: new NodeSystemService(),\n    });\n  }\n  return new WrapperSysAbstraction(my, param);\n}\n","import { NamedWritableStream } from \"../file-service.js\";\nimport { NodeFileService } from \"./node-file-service.js\";\n\nexport interface FileCollector {\n  readonly name: string;\n  content: string;\n}\n\nexport class MockFileService extends NodeFileService {\n  readonly files = {} as Record<string, FileCollector>;\n\n  // override abs(fname: string): string {\n  //   return this.join(\"/mock/\", fname);\n  // }\n\n  override create(fname: string): Promise<NamedWritableStream> {\n    let oName = fname;\n    if (!this.isAbsolute(fname)) {\n      oName = this.abs(fname);\n    }\n\n    const fc = {\n      name: oName,\n      content: \"\",\n    };\n    this.files[oName] = fc;\n    this.files[fname] = fc;\n    const decoder = new TextDecoder();\n\n    return Promise.resolve({\n      name: oName,\n      stream: new WritableStream<Uint8Array>({\n        write(chunk): void {\n          fc.content = fc.content + decoder.decode(chunk);\n        },\n        close(): void {\n          // do nothing\n        },\n        abort(): void {\n          throw new Error(\"not implemented\");\n        },\n      }),\n    });\n  }\n}\n"],"mappings":"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","names":["process"]}