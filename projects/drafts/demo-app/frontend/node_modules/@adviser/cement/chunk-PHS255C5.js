// src/utils/stripper.ts
function stripper(strip, obj) {
  const strips = Array.isArray(strip) ? strip : [strip];
  const restrips = strips.map((s) => {
    if (typeof s === "string") {
      const escaped = s.replace(/[-\\[\]\\/\\{\\}\\(\\)\\*\\+\\?\\.\\\\^\\$\\|]/g, "\\$&");
      return new RegExp(`^${escaped}$`);
    }
    return s;
  });
  return localStripper(void 0, restrips, obj);
}
function localStripper(path, restrips, obj) {
  if (typeof obj !== "object" || obj === null) {
    return obj;
  }
  if (Array.isArray(obj)) {
    return obj.map((i) => localStripper(path, restrips, i));
  }
  const ret = { ...obj };
  const matcher = (key, nextPath) => {
    for (const re of restrips) {
      if (re.test(key) || re.test(nextPath)) {
        return true;
      }
    }
    return false;
  };
  for (const key in ret) {
    if (Object.prototype.hasOwnProperty.call(ret, key)) {
      let nextPath;
      if (path) {
        nextPath = [path, key].join(".");
      } else {
        nextPath = key;
      }
      if (matcher(key, nextPath)) {
        delete ret[key];
        continue;
      }
      if (typeof ret[key] === "object") {
        if (Array.isArray(ret[key])) {
          ret[key] = ret[key].reduce((acc, v, i) => {
            const toDelete = matcher(key, `${nextPath}[${i}]`);
            if (!toDelete) {
              acc.push(localStripper(`${nextPath}[${i}]`, restrips, v));
            }
            return acc;
          }, []);
        } else {
          ret[key] = localStripper(nextPath, restrips, ret[key]);
        }
      }
    }
  }
  return ret;
}

// src/utils/console-write-stream.ts
var ConsoleWriterStreamDefaultWriter = class {
  constructor(stream) {
    this.stream = stream;
    this.desiredSize = null;
    this.decoder = new TextDecoder();
    this._stream = stream;
    this.ready = Promise.resolve(void 0);
    this.closed = Promise.resolve(void 0);
  }
  // eslint-disable-next-line @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any
  abort(reason) {
    throw new Error("Method not implemented.");
  }
  async close() {
  }
  releaseLock() {
    this._stream.locked = false;
    this.ready = Promise.resolve(void 0);
    this.closed = Promise.resolve(void 0);
  }
  write(chunk) {
    let strObj = this.decoder.decode(chunk).trimEnd();
    let output = "log";
    try {
      strObj = JSON.parse(strObj);
      output = strObj.level;
    } catch (e) {
    }
    switch (output) {
      case "error":
        console.error(strObj);
        break;
      case "warn":
        console.warn(strObj);
        break;
      default:
        console.log(strObj);
    }
    return Promise.resolve();
  }
};
var ConsoleWriterStream = class {
  constructor() {
    this.locked = false;
  }
  // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/no-unused-vars
  abort(reason) {
    throw new Error("Method not implemented.");
  }
  close() {
    return Promise.resolve();
  }
  getWriter() {
    if (this.locked) {
      throw new Error("Stream is locked");
    }
    this.locked = true;
    if (!this._writer) {
      this._writer = new ConsoleWriterStreamDefaultWriter(this);
    }
    return this._writer;
  }
};

// src/utils/fanout-write-stream.ts
var FanoutWriteStream = class {
  constructor(writers) {
    this.desiredSize = null;
    this._writers = writers;
    this.ready = Promise.all(this._writers.map((w) => w.ready)).then(() => void 0);
    this.closed = Promise.all(this._writers.map((w) => w.closed)).then(() => void 0);
  }
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  abort(reason) {
    return Promise.all(this._writers.map((w) => w.abort(reason))).then(() => {
    });
  }
  close() {
    return Promise.all(this._writers.map((w) => w.close())).then(() => {
    });
  }
  releaseLock() {
    this._writers.map((w) => w.releaseLock());
  }
  write(chunk) {
    return Promise.all(this._writers.map((w) => w.write(chunk))).then(() => {
    });
  }
};

export {
  stripper,
  ConsoleWriterStreamDefaultWriter,
  ConsoleWriterStream,
  FanoutWriteStream
};
//# sourceMappingURL=chunk-PHS255C5.js.map