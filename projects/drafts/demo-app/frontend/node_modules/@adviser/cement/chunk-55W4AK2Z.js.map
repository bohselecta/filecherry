{"version":3,"sources":["../../src/utils/index.ts","../../src/utils/stream-map.ts","../../src/utils/rebuffer.ts","../../src/utils/stream2string.ts","../../src/utils/string2stream.ts","../../src/utils/sorted-object.ts","../../src/utils/uint8array-equal.ts"],"sourcesContent":["export * from \"./rebuffer.js\";\nexport * from \"./stream-map.js\";\nexport * from \"./stream2string.js\";\nexport * from \"./string2stream.js\";\nexport * from \"./console-write-stream.js\";\nexport * from \"./fanout-write-stream.js\";\nexport * from \"./get-params-result.js\";\nexport * from \"./stripper.js\";\nexport * from \"./sorted-object.js\";\nexport * from \"./uint8array-equal.js\";\nexport * from \"./coerce-uint8.js\";\n","export interface StreamMap<T, U> {\n  Map(s: T, idx: number): U | Promise<U>;\n  readonly Close?: () => void;\n}\nexport function streamMap<T, U>(s: ReadableStream<T>, sm: StreamMap<T, U>): ReadableStream<U> {\n  const state = { reader: s.getReader(), streamMap: sm, idx: 0 };\n  return new ReadableStream<U>({\n    async pull(controller): Promise<void> {\n      const { done, value } = await state.reader.read();\n      if (done) {\n        if (state.streamMap.Close) {\n          state.streamMap.Close();\n        }\n        controller.close();\n        return;\n      }\n      const promiseOrU = state.streamMap.Map(value, state.idx++);\n      let mapped: U;\n      if (promiseOrU instanceof Promise || typeof (promiseOrU as { then: () => void }).then === \"function\") {\n        mapped = await promiseOrU;\n      } else {\n        mapped = promiseOrU;\n      }\n      controller.enqueue(mapped);\n    },\n  });\n}\n\nexport async function devnull<T>(a: ReadableStream<T>): Promise<number> {\n  const reader = a.getReader();\n  let cnt = 0;\n  while (true) {\n    const { done } = await reader.read();\n    if (done) {\n      break;\n    }\n    cnt++;\n  }\n  return cnt;\n}\n\nexport function array2stream<T>(a: T[]): ReadableStream<T> {\n  let i = 0;\n  return new ReadableStream<T>({\n    pull(controller): void {\n      if (i >= a.length) {\n        controller.close();\n        return;\n      }\n      controller.enqueue(a[i]);\n      i++;\n    },\n  });\n}\n\nexport async function stream2array<T>(a: ReadableStream<T>): Promise<T[]> {\n  const ret: T[] = [];\n  const reader = a.getReader();\n  while (true) {\n    const { done, value } = await reader.read();\n    if (done) {\n      break;\n    }\n    ret.push(value);\n  }\n  return ret;\n}\n","import { array2stream, stream2array } from \"./stream-map.js\";\n\ninterface ReChunkResult {\n  readonly rest: Uint8Array;\n  readonly chunk: Uint8Array;\n}\n\nexport async function rebufferArray(a: Uint8Array[], chunkSize: number): Promise<Uint8Array[]> {\n  return stream2array(rebuffer(array2stream(a), chunkSize));\n}\n\nfunction reChunk(cs: Uint8Array[], chunkSize: number): ReChunkResult {\n  const len = cs.reduce((acc, v) => acc + v.length, 0);\n  const last = cs[cs.length - 1];\n  const lastOfs = len - last.length;\n  // console.log(\"reChunk\", len, lastOfs, last.length, chunkSize, chunkSize - lastOfs)\n  const rest = last.subarray(chunkSize - lastOfs);\n  cs[cs.length - 1] = last.subarray(0, chunkSize - lastOfs);\n  const chunk = new Uint8Array(chunkSize);\n  let ofs = 0;\n  for (const c of cs) {\n    chunk.set(c, ofs);\n    ofs += c.length;\n  }\n  return { rest, chunk };\n}\n\ninterface pumpState {\n  readonly reader: ReadableStreamDefaultReader<Uint8Array>;\n  tmp: Uint8Array[];\n  tmpLen: number;\n  readonly chunkSize: number;\n}\n\nfunction pump(ps: pumpState, controller: ReadableStreamDefaultController<Uint8Array>, next: () => void): void {\n  ps.reader\n    .read()\n    .then(({ done, value }) => {\n      if (done) {\n        if (ps.tmpLen > 0) {\n          controller.enqueue(reChunk(ps.tmp, ps.tmpLen).chunk);\n        }\n        controller.close();\n        next();\n        return;\n      }\n      if (ps.tmpLen + value.length > ps.chunkSize) {\n        ps.tmp.push(value);\n        const res = reChunk(ps.tmp, ps.chunkSize);\n        controller.enqueue(res.chunk);\n        ps.tmp = [res.rest];\n        ps.tmpLen = res.rest.length;\n        next();\n        return;\n      } else if (value.length) {\n        ps.tmp.push(value);\n        ps.tmpLen += value.length;\n      }\n      pump(ps, controller, next);\n    })\n    .catch((err) => {\n      controller.error(err);\n      next();\n    });\n}\n\nexport function rebuffer(a: ReadableStream<Uint8Array>, chunkSize: number): ReadableStream<Uint8Array> {\n  const state: pumpState = {\n    reader: a.getReader(),\n    tmp: [],\n    tmpLen: 0,\n    chunkSize,\n  };\n  return new ReadableStream<Uint8Array>({\n    async pull(controller): Promise<void> {\n      return new Promise<void>((resolve) => {\n        pump(state, controller, resolve);\n      });\n    },\n  });\n}\n","export async function stream2string(stream?: ReadableStream<Uint8Array> | null, maxSize?: number): Promise<string> {\n  if (!stream) {\n    return Promise.resolve(\"\");\n  }\n  const reader = stream.getReader();\n  let res = \"\";\n  const decoder = new TextDecoder();\n  let rSize = 0;\n  while (typeof maxSize === \"undefined\" || rSize < maxSize) {\n    try {\n      const read = await reader.read();\n      if (read.done) {\n        break;\n      }\n      if (maxSize && rSize + read.value.length > maxSize) {\n        read.value = read.value.slice(0, maxSize - rSize);\n      }\n      const block = decoder.decode(read.value, { stream: true });\n      rSize += read.value.length;\n      res += block;\n    } catch (err) {\n      return Promise.reject(err as Error);\n    }\n  }\n  return Promise.resolve(res);\n}\n\nexport async function stream2uint8array(stream?: ReadableStream<Uint8Array> | null): Promise<Uint8Array> {\n  if (!stream) {\n    return Promise.resolve(new Uint8Array());\n  }\n  const reader = stream.getReader();\n  let res = new Uint8Array();\n  // eslint-disable-next-line no-constant-condition\n  while (1) {\n    try {\n      const { done, value } = await reader.read();\n      if (done) {\n        break;\n      }\n      res = new Uint8Array([...res, ...value]);\n    } catch (err) {\n      return Promise.reject(err as Error);\n    }\n  }\n  return Promise.resolve(res);\n}\n","import { TxtEnDecoder, TxtEnDecoderSingleton } from \"../txt-en-decoder.js\";\n\nexport function string2stream(str: string, ende: TxtEnDecoder = TxtEnDecoderSingleton()): ReadableStream<Uint8Array> {\n  return uint8array2stream(ende.encode(str));\n}\n\nexport function uint8array2stream(str: Uint8Array): ReadableStream<Uint8Array> {\n  return new ReadableStream<Uint8Array>({\n    start(controller): void {\n      controller.enqueue(str);\n      controller.close();\n    },\n  });\n}\n","export function toSortedObjectArray<T>(set?: T): Record<string, unknown>[] {\n  if (!set) return [];\n  return toSortedArray(set).map(([k, v]) => ({ [k]: v }));\n}\n\nexport function toSortedArray<T>(set?: T): [string, unknown][] {\n  if (!set) return [];\n  return Object.entries(set).sort(([a], [b]) => a.localeCompare(b));\n}\n\nexport function toSortedObject<S, T extends NonNullable<S>>(set?: T): T {\n  if (!set) return set as T;\n  return Object.fromEntries(toSortedArray(set)) as T;\n  // return toSortedArray(set).reduce((acc, cur) => {\n  //     acc[cur[0]] = cur[1];\n  //     return acc\n  // }, {} as Record<string, unknown>) as T;\n}\n","export function UInt8ArrayEqual(a: Uint8Array, b: Uint8Array): boolean {\n  if (a.length !== b.length) {\n    return false;\n  }\n  for (let i = 0; i < a.length; i++) {\n    if (a[i] !== b[i]) {\n      return false;\n    }\n  }\n  return true;\n}\n"],"mappings":"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","names":[]}