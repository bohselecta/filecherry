var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _pathOpsImpl_instances, _pathOpsImpl_parts;
class pathOpsImpl {
    constructor() {
        _pathOpsImpl_instances.add(this);
    }
    join(...paths) {
        return paths.map((i) => i.replace(/\/+$/, "")).join("/");
    }
    dirname(path) {
        return __classPrivateFieldGet(this, _pathOpsImpl_instances, "m", _pathOpsImpl_parts).call(this, path).dirname;
    }
    basename(path) {
        return __classPrivateFieldGet(this, _pathOpsImpl_instances, "m", _pathOpsImpl_parts).call(this, path).basename;
    }
}
_pathOpsImpl_instances = new WeakSet(), _pathOpsImpl_parts = function _pathOpsImpl_parts(path) {
    const splitted = path.split("/");
    const last = splitted.pop();
    if (splitted.length && last === "") {
        return __classPrivateFieldGet(this, _pathOpsImpl_instances, "m", _pathOpsImpl_parts).call(this, this.join(...splitted));
    }
    return {
        dirname: this.join(...splitted),
        basename: last !== null && last !== void 0 ? last : "",
    };
};
export const pathOps = new pathOpsImpl();
//# sourceMappingURL=path-ops.js.map