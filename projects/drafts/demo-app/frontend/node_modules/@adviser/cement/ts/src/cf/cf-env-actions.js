import { ResolveOnce } from "../resolve-once.js";
import { runtimeFn } from "../runtime.js";
const once = new ResolveOnce();
export class CFEnvActions {
    static new(opts) {
        return once.once(() => new CFEnvActions(opts));
    }
    static inject(o) {
        const env = CFEnvActions.new({});
        for (const key in o) {
            const value = o[key];
            if (typeof value === "string") {
                if (env.env) {
                    env.env.set(key, value);
                }
                else {
                    env.injectOnRegister[key] = value;
                }
            }
        }
    }
    constructor(env) {
        this.injectOnRegister = {};
        this.cfEnv = new Map(Object.entries(env.presetEnv || {}));
    }
    active() {
        return runtimeFn().isCFWorker;
    }
    register(env) {
        this.env = env;
        for (const key in this.injectOnRegister) {
            env.set(key, this.injectOnRegister[key]);
        }
        return env;
    }
    get(key) {
        return this.cfEnv.get(key);
    }
    set(key, value) {
        if (value) {
            this.cfEnv.set(key, value);
        }
    }
    delete(key) {
        this.cfEnv.delete(key);
    }
    keys() {
        return Array.from(this.cfEnv.keys());
    }
}
//# sourceMappingURL=cf-env-actions.js.map