export declare class HeadersImpl extends Headers {
    readonly _headers: Map<string, string>;
    constructor(init: Map<string, string>);
    [Symbol.iterator](): IterableIterator<[string, string]>;
    entries(): IterableIterator<[string, string]>;
    keys(): IterableIterator<string>;
    values(): IterableIterator<string>;
    append(key: string, value: string | string[] | undefined): HeadersImpl;
}
export declare class HttpHeader {
    readonly _headers: Map<string, string[]>;
    static from(headers?: HeadersInit | Headers | HttpHeader): HttpHeader;
    _asStringString(): Map<string, string>;
    _key(key: string): string;
    Values(key: string): string[];
    Get(key: string): string | undefined;
    Set(key: string, valueOr: string | string[]): HttpHeader;
    Add(key: string, value: string | string[] | undefined): HttpHeader;
    Del(ey: string): HttpHeader;
    Items(): [string, string[]][];
    SortItems(): [string, string[]][];
    Clone(): HttpHeader;
    AsRecordStringStringArray(): Record<string, string[]>;
    AsRecordStringString(): Record<string, string>;
    AsHeaderInit(): HeadersInit;
    AsHeaders(): Headers;
    Merge(other?: HttpHeader): HttpHeader;
}
//# sourceMappingURL=http_header.d.ts.map