import { FanoutWriteStream } from "../utils/fanout-write-stream.js";
import { Future } from "../future.js";
import { TxtEnDecoderSingleton } from "../txt-en-decoder.js";
export class LogWriteStream {
    constructor(bufferArr) {
        this._resolveClosed = new Future();
        this.closed = this._resolveClosed.asPromise();
        this.desiredSize = null;
        this.ready = Promise.resolve(undefined);
        this._bufferArr = bufferArr;
    }
    abort(reason) {
        throw new Error("Method not implemented.");
    }
    async close() {
        await this.closed;
        return Promise.resolve(undefined);
    }
    releaseLock() {
    }
    async write(chunk) {
        if (chunk) {
            this._bufferArr.push(chunk);
        }
        return Promise.resolve(undefined);
    }
}
export class LogCollector {
    constructor(pass, txtEnDe) {
        this.locked = false;
        this._bufferArr = [];
        this._pass = pass;
        this._txtEnDe = txtEnDe || TxtEnDecoderSingleton();
    }
    abort(reason) {
        throw new Error("Method not implemented.");
    }
    async close() {
        if (this._writer) {
            const ret = await this._writer.close();
            this._writer = undefined;
            return ret;
        }
        return Promise.resolve(undefined);
    }
    getWriter() {
        if (!this._writer) {
            const dests = [new LogWriteStream(this._bufferArr)];
            if (this._pass) {
                dests.push(this._pass);
            }
            this._writer = new FanoutWriteStream(dests);
        }
        return this._writer;
    }
    Logs(notJsonLine = false) {
        if (!this._writer) {
            return [];
        }
        const jsonNlStr = this._txtEnDe.decode(new Uint8Array((function* (res) {
            for (const x of res) {
                yield* x;
            }
        })(this._bufferArr)));
        if (!notJsonLine) {
            const splitStr = jsonNlStr.split("\n");
            const filterStr = splitStr.filter((a) => a.length);
            const mapStr = filterStr.map((a) => JSON.parse(a));
            return mapStr;
        }
        return jsonNlStr.split("\n").filter((a) => a.length);
    }
}
//# sourceMappingURL=log-write-stream.js.map