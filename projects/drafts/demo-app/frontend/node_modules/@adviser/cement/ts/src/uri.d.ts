import { Result } from "./result.js";
import { KeysParam } from "./utils/get-params-result.js";
import { StripCommand } from "./utils/stripper.js";
type NullOrUndef = null | undefined;
type OneKey<K extends string, V = string> = Record<K, V>;
export interface URIInterface<R extends URIInterface<R>> {
    readonly getParams: Iterable<[string, string]>;
    hasParam(key: string): boolean;
    getParam<T extends string | undefined>(key: string | OneKey<string>, def?: T): T extends string ? string : string | undefined;
    getParamResult(key: string, msgFn?: (key: string) => string): Result<string>;
    getParamsResult(...keys: KeysParam): Result<Record<string, string>>;
    match(other: CoerceURI): MatchResult;
    clone(): R;
    asURL(): URL;
    toString(): string;
    toJSON(): string;
    asObj(...strips: StripCommand[]): Partial<HostURIObject | PathURIObject>;
}
export interface MatchResult {
    readonly score: number;
    readonly protocol: boolean;
    readonly hostname: boolean;
    readonly port: boolean;
    readonly pathname: boolean;
    readonly pathParts: string[];
    readonly params: Record<string, string>;
}
export interface URIObject {
    readonly style: "host" | "path";
    readonly protocol: string;
    readonly pathname: string;
    readonly searchParams: Record<string, string>;
}
export interface PathURIObject extends URIObject {
    readonly style: "path";
}
export interface HostURIObject extends URIObject {
    readonly style: "host";
    readonly hostname: string;
    readonly port: string;
}
export declare function isURL(value: unknown): value is URL;
export declare class MutableURL extends URL {
    private readonly _sysURL;
    private _protocol;
    private _pathname;
    private _hasHostpart;
    readonly hash: string;
    constructor(urlStr: string);
    clone(): MutableURL;
    get host(): string;
    get port(): string;
    set port(p: string);
    get hostname(): string;
    set hostname(h: string);
    set pathname(p: string);
    get pathname(): string;
    get protocol(): string;
    set protocol(p: string);
    get searchParams(): URLSearchParams;
    toString(): string;
}
export declare class BuildURI implements URIInterface<BuildURI> {
    _url: MutableURL;
    private constructor();
    static is(value: unknown): value is BuildURI;
    static from(strURLUri?: CoerceURI, defaultProtocol?: string): BuildURI;
    match(other: CoerceURI): MatchResult;
    port(p: string): BuildURI;
    hostname(h: string): BuildURI;
    protocol(p: string): BuildURI;
    pathname(p: string): BuildURI;
    resolve(p: CoerceURI): BuildURI;
    appendRelative(p: CoerceURI): BuildURI;
    cleanParams(): BuildURI;
    delParam(key: string): BuildURI;
    defParam(key: string, str: string): BuildURI;
    setParam(key: string, str: string): BuildURI;
    hasParam(key: string): boolean;
    get getParams(): Iterable<[string, string]>;
    getParam<T extends string | undefined>(key: string | OneKey<string>, def?: T): T extends string ? string : string | undefined;
    getParamResult(key: string, msgFn?: (key: string) => string): Result<string>;
    getParamsResult(...keys: KeysParam): Result<Record<string, string>>;
    toString(): string;
    toJSON(): string;
    asURL(): URL;
    asObj(...strips: StripCommand[]): Partial<HostURIObject | PathURIObject>;
    clone(): BuildURI;
    URI(): URI;
}
export type CoerceURI = string | URI | MutableURL | URL | BuildURI | NullOrUndef;
export declare function isCoerceURI(value: unknown): value is CoerceURI;
export declare const hasHostPartProtocols: Set<string>;
export declare class URI implements URIInterface<URI> {
    static protocolHasHostpart(protocol: string): () => void;
    match(other: CoerceURI): MatchResult;
    static merge(into: CoerceURI, from: CoerceURI, defaultProtocol?: string): URI;
    static is(value: unknown): value is URI;
    static from(strURLUri?: CoerceURI, defaultProtocol?: string): URI;
    static fromResult(strURLUri?: CoerceURI, defaultProtocol?: string): Result<URI>;
    readonly _url: MutableURL;
    private constructor();
    build(): BuildURI;
    get hostname(): string;
    get port(): string;
    get host(): string;
    get protocol(): string;
    get pathname(): string;
    get getParams(): Iterable<[string, string]>;
    hasParam(key: string): boolean;
    getParam<T extends string | undefined>(key: string | OneKey<string>, def?: T): T extends string ? string : string | undefined;
    getParamResult(key: string, msgFn?: (key: string) => string): Result<string>;
    getParamsResult(...keys: KeysParam): Result<Record<string, string>>;
    clone(): URI;
    asURL(): URL;
    toString(): string;
    toJSON(): string;
    asObj(...strips: StripCommand[]): Partial<HostURIObject | PathURIObject>;
}
export {};
//# sourceMappingURL=uri.d.ts.map