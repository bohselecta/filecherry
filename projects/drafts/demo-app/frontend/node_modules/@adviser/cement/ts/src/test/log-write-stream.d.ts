import { Future } from "../future.js";
import { TxtEnDecoder } from "../txt-en-decoder.js";
export declare class LogWriteStream implements WritableStreamDefaultWriter<Uint8Array> {
    private readonly _bufferArr;
    constructor(bufferArr: Uint8Array[]);
    readonly _resolveClosed: Future<undefined>;
    readonly closed: Promise<undefined>;
    readonly desiredSize: number | null;
    readonly ready: Promise<undefined>;
    abort(reason?: any): Promise<void>;
    close(): Promise<void>;
    releaseLock(): void;
    write(chunk?: Uint8Array): Promise<void>;
}
export declare class LogCollector implements WritableStream<Uint8Array> {
    readonly locked: boolean;
    private _writer?;
    private readonly _pass?;
    private readonly _bufferArr;
    private readonly _txtEnDe;
    constructor(pass?: WritableStreamDefaultWriter<Uint8Array>, txtEnDe?: TxtEnDecoder);
    abort(reason?: Uint8Array): Promise<void>;
    close(): Promise<void>;
    getWriter(): WritableStreamDefaultWriter<Uint8Array>;
    Logs(notJsonLine?: boolean): any[];
}
//# sourceMappingURL=log-write-stream.d.ts.map