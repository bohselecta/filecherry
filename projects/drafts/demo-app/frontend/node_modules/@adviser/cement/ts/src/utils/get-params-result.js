import { Result } from "../result.js";
import { param } from "../types.js";
export function getParamsResult(keys, getParam) {
    const keyDef = keys.flat().reduce((acc, i) => {
        if (typeof i === "string") {
            acc.push({ key: i, def: undefined, isOptional: false });
        }
        else if (typeof i === "object") {
            acc.push(...Object.keys(i).map((k) => ({
                key: k,
                def: typeof i[k] === "string" ? i[k] : undefined,
                isOptional: i[k] === param.OPTIONAL,
            })));
        }
        return acc;
    }, []);
    const msgFn = keys.find((k) => typeof k === "function") ||
        ((...keys) => {
            const msg = keys.join(",");
            return `missing parameters: ${msg}`;
        });
    const errors = [];
    const result = {};
    for (const kd of keyDef) {
        const val = getParam.getParam(kd.key);
        if (val === undefined) {
            if (typeof kd.def === "string") {
                result[kd.key] = kd.def;
            }
            else {
                if (!kd.isOptional) {
                    errors.push(kd.key);
                }
            }
        }
        else {
            result[kd.key] = val;
        }
    }
    if (errors.length) {
        return Result.Err(msgFn(...errors));
    }
    return Result.Ok(result);
}
//# sourceMappingURL=get-params-result.js.map