import { Result } from "../result.js";
const globalBuffer = globalThis;
export function coerceIntoUint8(raw) {
    if (raw instanceof ArrayBuffer) {
        return Result.Ok(new Uint8Array(raw));
    }
    if (ArrayBuffer.isView(raw)) {
        return Result.Ok(new Uint8Array(raw.buffer, raw.byteOffset, raw.byteLength));
    }
    if (raw instanceof Blob) {
        return Result.Err("Blob not supported");
    }
    if (globalBuffer.Buffer && globalBuffer.Buffer.isBuffer(raw)) {
        return Result.Ok(new Uint8Array(raw.buffer, raw.byteOffset, raw.byteLength));
    }
    if (raw instanceof Uint8Array) {
        return Result.Ok(raw);
    }
    if (Result.Is(raw)) {
        if (raw.isErr()) {
            return Result.Err(raw);
        }
        return coerceIntoUint8(raw.unwrap());
    }
    return Result.Err("Not a Uint8Array");
}
export async function asyncCoerceIntoUint8(raw) {
    let resolved = await raw;
    if (resolved instanceof Blob) {
        resolved = await resolved.arrayBuffer();
    }
    return coerceIntoUint8(resolved);
}
//# sourceMappingURL=coerce-uint8.js.map