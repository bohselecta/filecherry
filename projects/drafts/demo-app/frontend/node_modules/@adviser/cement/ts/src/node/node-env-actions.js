var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _NodeEnvActions_node;
import { ResolveOnce } from "../resolve-once.js";
import { runtimeFn } from "../runtime.js";
const once = new ResolveOnce();
export class NodeEnvActions {
    static new(opts) {
        return once.once(() => new NodeEnvActions(opts));
    }
    constructor(opts) {
        _NodeEnvActions_node.set(this, globalThis);
        this._env = this.active() ? __classPrivateFieldGet(this, _NodeEnvActions_node, "f").process.env : {};
        this.opts = opts;
    }
    register(env) {
        for (const key of env.keys()) {
            this._env[key] = env.get(key) || "";
        }
        return env;
    }
    active() {
        return runtimeFn().isNodeIsh;
    }
    keys() {
        return Object.keys(this._env);
    }
    get(key) {
        return this._env[key];
    }
    set(key, value) {
        if (value) {
            this._env[key] = value;
        }
    }
    delete(key) {
        delete this._env[key];
    }
}
_NodeEnvActions_node = new WeakMap();
//# sourceMappingURL=node-env-actions.js.map