import path from "node:path";
import fs from "node:fs";
import process from "node:process";
import { TxtEnDecoderSingleton } from "../txt-en-decoder.js";
export class NodeFileService {
    constructor(baseDir = process.cwd()) {
        this.baseDir = this.abs(baseDir);
    }
    readFileString(fname) {
        return fs.promises.readFile(fname, { encoding: "utf-8" });
    }
    dirname(fname) {
        return path.dirname(fname);
    }
    basename(fname) {
        return path.basename(fname);
    }
    join(...paths) {
        return path.join(...paths);
    }
    relative(from, to) {
        if (to === undefined) {
            to = from;
            from = process.cwd();
        }
        const ret = path.relative(from, to);
        return ret;
    }
    abs(fname) {
        if (path.isAbsolute(fname)) {
            return fname;
        }
        else {
            const cwd = process.cwd();
            return path.resolve(cwd, fname);
        }
    }
    isAbsolute(fname) {
        return path.isAbsolute(fname);
    }
    async writeFileString(fname, content, ende = TxtEnDecoderSingleton()) {
        const o = await this.create(fname);
        const wr = o.stream.getWriter();
        await wr.write(ende.encode(content));
        await wr.close();
    }
    async create(fname) {
        let oName = fname;
        if (!path.isAbsolute(fname)) {
            oName = this.abs(fname);
        }
        const base = path.dirname(oName);
        await fs.promises.mkdir(base, { recursive: true });
        const out = fs.createWriteStream(oName);
        return {
            name: oName,
            stream: new WritableStream({
                write(chunk) {
                    out.write(chunk);
                },
                close() {
                    out.close();
                },
                abort() {
                    throw new Error("not implemented");
                },
            }),
        };
    }
}
//# sourceMappingURL=node-file-service.js.map