import { Level } from "./logger.js";
import { Option } from "./option.js";
export class LevelHandlerImpl {
    constructor() {
        this._globalLevels = new Set([Level.INFO, Level.ERROR, Level.WARN]);
        this._modules = new Map();
        this.ignoreAttr = Option.Some(/^_/);
        this.isStackExposed = false;
    }
    enableLevel(level, ...modules) {
        if (modules.length == 0) {
            this._globalLevels.add(level);
            return;
        }
        this.forModules(level, (p) => {
            this._modules.set(p, new Set([...this._globalLevels, level]));
        }, ...modules);
    }
    disableLevel(level, ...modules) {
        if (modules.length == 0) {
            this._globalLevels.delete(level);
            return;
        }
        this.forModules(level, (p) => {
            this._modules.delete(p);
        }, ...modules);
    }
    setExposeStack(enable) {
        this.isStackExposed = !!enable;
    }
    setIgnoreAttr(re) {
        this.ignoreAttr = Option.From(re);
    }
    forModules(level, fnAction, ...modules) {
        for (const m of modules.flat()) {
            if (typeof m !== "string") {
                continue;
            }
            const parts = m
                .split(",")
                .map((s) => s.trim())
                .filter((s) => s.length);
            for (const p of parts) {
                fnAction(p);
            }
        }
    }
    setDebug(...modules) {
        this.forModules(Level.DEBUG, (p) => {
            this._modules.set(p, new Set([...this._globalLevels, Level.DEBUG]));
        }, ...modules);
    }
    isEnabled(ilevel, module) {
        const level = ilevel;
        if (typeof module === "string") {
            const levels = this._modules.get(module);
            if (levels && levels.has(level)) {
                return true;
            }
        }
        const wlevel = this._modules.get("*");
        if (wlevel && typeof level === "string") {
            if (wlevel.has(level)) {
                return true;
            }
        }
        if (typeof level !== "string") {
            return true;
        }
        return this._globalLevels.has(level);
    }
}
const levelSingleton = new LevelHandlerImpl();
export function LevelHandlerSingleton() {
    return levelSingleton;
}
//# sourceMappingURL=log-level-impl.js.map