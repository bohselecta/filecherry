import { BaseSysAbstraction, WrapperSysAbstraction } from "../base-sys-abstraction.js";
import { envFactory } from "../sys-env.js";
import { TxtEnDecoderSingleton } from "../txt-en-decoder.js";
export class WebFileService {
    get baseDir() {
        throw new Error("basedir-Method not implemented.");
    }
    create(fname) {
        throw new Error("create-Method not implemented.");
    }
    readFileString(fname) {
        throw new Error("readFileString-Method not implemented.");
    }
    writeFileString(fname, content) {
        throw new Error("writeFileString-Method not implemented.");
    }
    abs(fname) {
        throw new Error("abs-Method not implemented.");
    }
    join(...paths) {
        throw new Error("join-Method not implemented.");
    }
    relative(from, to) {
        throw new Error("relative-Method not implemented.");
    }
    dirname(fname) {
        throw new Error("dirname-Method not implemented.");
    }
    basename(fname) {
        throw new Error("basename-Method not implemented.");
    }
    nodeImport(fname) {
        throw new Error("nodeImport-Method not implemented.");
    }
    isAbsolute(fname) {
        throw new Error("isAbsolute-Method not implemented.");
    }
}
class WebSystemService {
    Env() {
        return envFactory();
    }
    Args() {
        throw new Error("Args-Method not implemented.");
    }
    OnExit(hdl) {
        throw new Error("OnExit-Method not implemented.");
    }
    Exit(code) {
        throw new Error("Exit-Method not implemented.");
    }
}
let my = undefined;
export function WebSysAbstraction(param) {
    if (!my) {
        my = new BaseSysAbstraction({
            TxtEnDecoder: (param === null || param === void 0 ? void 0 : param.TxtEnDecoder) || TxtEnDecoderSingleton(),
            FileSystem: new WebFileService(),
            SystemService: new WebSystemService(),
        });
    }
    return new WrapperSysAbstraction(my, param);
}
//# sourceMappingURL=web-sys-abstraction.js.map