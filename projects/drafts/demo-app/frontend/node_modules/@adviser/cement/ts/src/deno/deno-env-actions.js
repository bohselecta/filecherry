var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _DenoEnvActions_deno;
import { ResolveOnce } from "../resolve-once.js";
import { runtimeFn } from "../runtime.js";
const once = new ResolveOnce();
export class DenoEnvActions {
    static new(opts) {
        return once.once(() => new DenoEnvActions(opts));
    }
    get _env() {
        return __classPrivateFieldGet(this, _DenoEnvActions_deno, "f").Deno.env;
    }
    constructor(opts) {
        _DenoEnvActions_deno.set(this, globalThis);
        this.opts = opts;
    }
    register(env) {
        for (const key of env.keys()) {
            this._env.set(key, env.get(key) || "");
        }
        return env;
    }
    active() {
        return runtimeFn().isDeno;
    }
    keys() {
        return Object.keys(this._env.toObject());
    }
    get(key) {
        return this._env.get(key);
    }
    set(key, value) {
        if (value) {
            this._env.set(key, value);
        }
    }
    delete(key) {
        this._env.delete(key);
    }
}
_DenoEnvActions_deno = new WeakMap();
//# sourceMappingURL=deno-env-actions.js.map