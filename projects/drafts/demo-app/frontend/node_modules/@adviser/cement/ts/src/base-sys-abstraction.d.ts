import { FileService } from "./file-service.js";
import { TimeMode, RandomMode, IDMode, SystemService, VoidFunc, SysAbstraction } from "./sys-abstraction.js";
import { Time } from "./time.js";
import { TxtEnDecoder } from "./txt-en-decoder.js";
export declare class SysTime extends Time {
    Now(): Date;
    Sleep(duration: number): Promise<void>;
}
export declare class ConstTime extends Time {
    Now(): Date;
    Sleep(duration: number): Promise<void>;
}
export declare class StepTime extends Time {
    _step: Date;
    readonly _start: Date;
    constructor();
    Now(steps?: number): Date;
    Sleep(duration: number): Promise<void>;
}
export declare function TimeFactory(timeMode: TimeMode): Time;
export declare class RandomService {
    readonly _mode: RandomMode;
    _step: number;
    constructor(mode: RandomMode);
    Random0ToValue(value: number): number;
}
export declare class IdService {
    readonly _mode: IDMode;
    _step: number;
    constructor(mode?: IDMode);
    NextId(): string;
}
export interface BaseSysAbstractionParams {
    readonly TxtEnDecoder: TxtEnDecoder;
    readonly FileSystem: FileService;
    readonly SystemService: SystemService;
}
export interface ExitHandler {
    readonly hdl: VoidFunc;
    readonly id: string;
}
export interface ExitService {
    injectExitHandlers(hdls: ExitHandler[]): void;
    exit(code: number): void;
}
export declare class BaseSysAbstraction {
    readonly _time: SysTime;
    readonly _stdout: WritableStream<Uint8Array>;
    readonly _stderr: WritableStream<Uint8Array>;
    readonly _idService: IdService;
    readonly _randomService: RandomService;
    readonly _fileSystem: FileService;
    readonly _systemService: SystemService;
    readonly _txtEnDe: TxtEnDecoder;
    constructor(params: BaseSysAbstractionParams);
}
export interface WrapperSysAbstractionParams {
    readonly TimeMode?: TimeMode;
    readonly IdMode?: IDMode;
    readonly Stdout?: WritableStream<Uint8Array>;
    readonly Stderr?: WritableStream<Uint8Array>;
    readonly RandomMode?: RandomMode;
    readonly FileSystem?: FileService;
    readonly SystemService?: SystemService;
    readonly TxtEnDecoder?: TxtEnDecoder;
}
export declare class WrapperSysAbstraction implements SysAbstraction {
    readonly _time: Time;
    readonly _stdout: WritableStream<Uint8Array>;
    readonly _stderr: WritableStream<Uint8Array>;
    readonly _idService: IdService;
    readonly _randomService: RandomService;
    readonly _fileSystem: FileService;
    readonly _systemService: SystemService;
    constructor(base: BaseSysAbstraction, params?: WrapperSysAbstractionParams);
    Time(): Time;
    NextId(): string;
    Random0ToValue(value: number): number;
    Stdout(): WritableStream;
    Stderr(): WritableStream;
    System(): SystemService;
    FileSystem(): FileService;
}
//# sourceMappingURL=base-sys-abstraction.d.ts.map