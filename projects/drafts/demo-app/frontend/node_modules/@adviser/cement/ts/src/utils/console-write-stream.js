export class ConsoleWriterStreamDefaultWriter {
    constructor(stream) {
        this.stream = stream;
        this.desiredSize = null;
        this.decoder = new TextDecoder();
        this._stream = stream;
        this.ready = Promise.resolve(undefined);
        this.closed = Promise.resolve(undefined);
    }
    abort(reason) {
        throw new Error("Method not implemented.");
    }
    async close() {
    }
    releaseLock() {
        this._stream.locked = false;
        this.ready = Promise.resolve(undefined);
        this.closed = Promise.resolve(undefined);
    }
    write(chunk) {
        let strObj = this.decoder.decode(chunk).trimEnd();
        let output = "log";
        try {
            strObj = JSON.parse(strObj);
            output = strObj.level;
        }
        catch (e) {
        }
        switch (output) {
            case "error":
                console.error(strObj);
                break;
            case "warn":
                console.warn(strObj);
                break;
            default:
                console.log(strObj);
        }
        return Promise.resolve();
    }
}
export class ConsoleWriterStream {
    constructor() {
        this.locked = false;
    }
    abort(reason) {
        throw new Error("Method not implemented.");
    }
    close() {
        return Promise.resolve();
    }
    getWriter() {
        if (this.locked) {
            throw new Error("Stream is locked");
        }
        this.locked = true;
        if (!this._writer) {
            this._writer = new ConsoleWriterStreamDefaultWriter(this);
        }
        return this._writer;
    }
}
//# sourceMappingURL=console-write-stream.js.map