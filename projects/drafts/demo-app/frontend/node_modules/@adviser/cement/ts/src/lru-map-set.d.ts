export interface LRUParam {
    readonly maxEntries: number;
    readonly maxAge: number;
}
export declare class LRUSet<T> {
    private readonly _lruMap;
    constructor(param?: Partial<LRUParam>);
    setParam(param?: Partial<LRUParam>): void;
    get size(): number;
    has(key: T): boolean;
    add(key: T): void;
    delete(key: T): void;
    clear(): void;
    forEach(callbackfn: (value: T, key: T) => void): void;
    entries(): IterableIterator<[T, T]>;
}
export declare class LRUMap<T, K> {
    private _map;
    private param;
    constructor(c?: Partial<LRUParam>);
    private touch;
    setParam(param?: Partial<LRUParam>): void;
    has(key: T): boolean;
    get size(): number;
    getSet(key: T, createFN: (key: T) => Promise<K>): Promise<K | undefined>;
    get(key: T): K | undefined;
    set(key: T, value: K): void;
    delete(key: T): void;
    clear(): void;
    forEach(callbackfn: (value: K, key: T, map: Map<T, K>) => void): void;
    entries(): IterableIterator<[T, K]>;
}
//# sourceMappingURL=lru-map-set.d.ts.map