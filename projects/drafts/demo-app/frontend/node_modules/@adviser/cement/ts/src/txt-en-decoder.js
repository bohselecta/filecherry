import { Result } from "./result.js";
import { coerceIntoUint8 } from "./utils/coerce-uint8.js";
class TxtOps {
    constructor() {
        this.encoder = new TextEncoder();
        this.decoder = new TextDecoder();
    }
    encode(str) {
        return this.encoder.encode(str);
    }
    decode(data) {
        if (Result.Is(data)) {
            if (data.isErr()) {
                throw data.Err();
            }
            const unwrapped = data.unwrap();
            if (typeof unwrapped === "string") {
                return this.decode(unwrapped);
            }
        }
        if (typeof data === "string") {
            return data;
        }
        return this.decoder.decode(coerceIntoUint8(data).Ok());
    }
    async asyncDecode(data) {
        let resolved = await data;
        if (resolved instanceof Blob) {
            resolved = await resolved.arrayBuffer();
        }
        return this.decode(resolved);
    }
}
let txtEnDecoder;
export function TxtEnDecoderSingleton() {
    txtEnDecoder = txtEnDecoder !== null && txtEnDecoder !== void 0 ? txtEnDecoder : new TxtOps();
    return txtEnDecoder;
}
//# sourceMappingURL=txt-en-decoder.js.map