import { TimeMode, RandomMode, IDMode } from "./sys-abstraction.js";
import { Time } from "./time.js";
export class SysTime extends Time {
    Now() {
        return new Date();
    }
    Sleep(duration) {
        return new Promise((resolve) => {
            setTimeout(() => {
                resolve();
            }, duration);
        });
    }
}
export class ConstTime extends Time {
    Now() {
        return new Date(2021, 1, 1, 0, 0, 0, 0);
    }
    Sleep(duration) {
        return Promise.resolve();
    }
}
export class StepTime extends Time {
    constructor() {
        super();
        this._step = new ConstTime().Now();
        this._start = this._step;
    }
    Now(steps = 1) {
        for (let i = 0; steps > 0 && i < steps; i++) {
            this._step = new Date(this._step.getTime() + 1000);
        }
        if (steps < 1) {
            this._step = new Date(this._start.getTime() + steps * -1000);
        }
        return this._step;
    }
    Sleep(duration) {
        this._step = new Date(this._step.getTime() + duration);
        return Promise.resolve();
    }
}
export function TimeFactory(timeMode) {
    switch (timeMode) {
        case TimeMode.REAL:
            return new SysTime();
        case TimeMode.CONST:
            return new ConstTime();
        case TimeMode.STEP:
            return new StepTime();
    }
    return new SysTime();
}
export class RandomService {
    constructor(mode) {
        this._step = 0;
        this._mode = mode;
    }
    Random0ToValue(value) {
        switch (this._mode) {
            case RandomMode.CONST:
                return 0.5 * value;
            case RandomMode.STEP:
                this._step += 0.0001;
                return this._step * value;
            case RandomMode.RANDOM:
                return Math.random() * value;
            default:
                throw new Error("Unknown RandomMode");
        }
    }
}
export class IdService {
    constructor(mode) {
        this._step = 0;
        if (!mode) {
            mode = IDMode.UUID;
        }
        this._mode = mode;
    }
    NextId() {
        switch (this._mode) {
            case IDMode.UUID:
                return crypto.randomUUID();
            case IDMode.CONST:
                return "VeryUniqueID";
            case IDMode.STEP:
                return `STEPId-${this._step++}`;
            default:
                throw new Error("Unknown IDMode");
        }
    }
}
function consumeReadableStream(reader, writeFn) {
    reader
        .read()
        .then(({ done, value }) => {
        if (done) {
            return;
        }
        writeFn(value)
            .then(() => {
            consumeReadableStream(reader, writeFn);
        })
            .catch((e) => {
            console.error("consumeReadableStream:writeFn", e);
        });
    })
        .catch((e) => {
        console.error("consumeReadableStream:read", e);
    });
}
function CFWriteableStream(writeFn) {
    const ts = new TransformStream();
    consumeReadableStream(ts.readable.getReader(), writeFn);
    return ts.writable;
}
export class BaseSysAbstraction {
    constructor(params) {
        this._time = new SysTime();
        this._idService = new IdService();
        this._randomService = new RandomService(RandomMode.RANDOM);
        this._fileSystem = params.FileSystem;
        this._systemService = params.SystemService;
        this._txtEnDe = params.TxtEnDecoder;
        const decoder = this._txtEnDe;
        this._stdout = CFWriteableStream((chunk) => {
            const decoded = decoder.decode(chunk);
            console.log(decoded.trimEnd());
            return Promise.resolve();
        });
        this._stderr = CFWriteableStream((chunk) => {
            const decoded = decoder.decode(chunk);
            console.error(decoded.trimEnd());
            return Promise.resolve();
        });
    }
}
export class WrapperSysAbstraction {
    constructor(base, params) {
        this._time = base._time;
        this._stdout = base._stdout;
        this._stderr = base._stderr;
        this._idService = base._idService;
        this._randomService = base._randomService;
        this._fileSystem = base._fileSystem;
        this._systemService = base._systemService;
        if (params) {
            if (params.TimeMode) {
                this._time = TimeFactory(params.TimeMode);
            }
            if (params.Stdout) {
                this._stdout = params.Stdout;
            }
            if (params.Stderr) {
                this._stderr = params.Stderr;
            }
            if (params.IdMode) {
                this._idService = new IdService(params.IdMode);
            }
            if (params.RandomMode) {
                this._randomService = new RandomService(params.RandomMode);
            }
            if (params.FileSystem) {
                this._fileSystem = params.FileSystem;
            }
            if (params.SystemService) {
                this._systemService = params.SystemService;
            }
        }
    }
    Time() {
        return this._time;
    }
    NextId() {
        return this._idService.NextId();
    }
    Random0ToValue(value) {
        return this._randomService.Random0ToValue(value);
    }
    Stdout() {
        return this._stdout;
    }
    Stderr() {
        return this._stderr;
    }
    System() {
        return this._systemService;
    }
    FileSystem() {
        return this._fileSystem;
    }
}
//# sourceMappingURL=base-sys-abstraction.js.map