import { AsError, FnSerialized, LogSerializable, Level, Logger, WithLogger, LevelHandler, LogFormatter, HttpType } from "./logger.js";
import { SysAbstraction } from "./sys-abstraction.js";
import { Result } from "./result.js";
import { CoerceURI } from "./uri.js";
import { LogWriterStream } from "./log-writer-impl.js";
import { TxtEnDecoder } from "./txt-en-decoder.js";
export declare class JSONFormatter implements LogFormatter {
    private readonly _txtEnDe;
    private readonly _space?;
    constructor(txtEnde: TxtEnDecoder, space?: number);
    format(attr: LogSerializable): Uint8Array;
}
export declare class YAMLFormatter implements LogFormatter {
    private readonly _txtEnDe;
    private readonly _space?;
    constructor(txtEnde: TxtEnDecoder, space?: number);
    format(attr: LogSerializable): Uint8Array;
}
export interface LoggerImplParams {
    readonly out?: WritableStream<Uint8Array>;
    readonly logWriter?: LogWriterStream;
    readonly sys?: SysAbstraction;
    readonly withAttributes?: LogSerializable;
    readonly levelHandler?: LevelHandler;
    readonly txtEnDe?: TxtEnDecoder;
    readonly formatter?: LogFormatter;
}
export declare class LoggerImpl implements Logger {
    readonly _sys: SysAbstraction;
    readonly _attributes: LogSerializable;
    readonly _withAttributes: LogSerializable;
    readonly _logWriter: LogWriterStream;
    readonly levelHandler: LevelHandler;
    readonly _txtEnDe: TxtEnDecoder;
    _formatter: LogFormatter;
    constructor(params?: LoggerImplParams);
    TxtEnDe(): TxtEnDecoder;
    Attributes(): Record<string, unknown>;
    SetExposeStack(enable?: boolean): Logger;
    EnableLevel(level: Level, ...modules: string[]): Logger;
    DisableLevel(level: Level, ...modules: string[]): Logger;
    Module(key: string): Logger;
    SetDebug(...modules: (string | string[])[]): Logger;
    SetIgnoreAttribute(re?: RegExp): Logger;
    SetFormatter(formatter: LogFormatter): Logger;
    Timestamp(): Logger;
    Warn(): Logger;
    Log(): Logger;
    Debug(): Logger;
    Error(): Logger;
    Info(): Logger;
    Err<T>(err: T | Result<T> | Error): Logger;
    WithLevel(l: Level): Logger;
    Ref(key: string, action: {
        toString: () => string;
    } | FnSerialized): Logger;
    Bool(key: string | Record<string, unknown>, value: unknown): Logger;
    Http(...mix: (HttpType | string)[]): Logger;
    Pair(x: Record<string, unknown>): Logger;
    Result<T>(key: string, res: Result<T, Error>): Logger;
    Len(value: unknown, key?: string): Logger;
    Hash(value: unknown, key?: string): Logger;
    Url(url: CoerceURI, key?: string): Logger;
    private coerceKey;
    Str(key: string | Record<string, string>, value?: string): Logger;
    Any(key: string | Record<string, unknown>, value?: unknown): Logger;
    Dur(key: string, nsec: number): Logger;
    Uint64(key: string | Record<string, number>, value?: number): Logger;
    Int(key: string | Record<string, number>, value?: number): Logger;
    Flush(): Promise<void>;
    With(): WithLogger;
    _resetAttributes(fn: () => () => Uint8Array): () => Uint8Array;
    Msg(...args: string[]): AsError;
}
//# sourceMappingURL=logger-impl.d.ts.map