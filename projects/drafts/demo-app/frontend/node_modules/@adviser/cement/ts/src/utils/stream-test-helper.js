export async function receiveFromStream(reb, state) {
    return new Promise((resolve, reject) => {
        let reBufferCalls = 0;
        const reader = reb.getReader();
        function pump() {
            reader
                .read()
                .then(({ done, value }) => {
                state.CollectorFn({ done, value, fillCalls: state.fillCalls, reBufferCalls });
                reBufferCalls++;
                if (done) {
                    resolve();
                    return;
                }
                pump();
            })
                .catch(reject);
        }
        pump();
    });
}
export async function sendToStream(reb, state) {
    return new Promise((resolve, reject) => {
        const writer = reb.getWriter();
        function pump(i) {
            if (i >= state.sendChunks) {
                writer.close().then(resolve).catch(reject);
                return;
            }
            writer.ready
                .then(() => {
                state.fillCalls++;
                writer
                    .write(new Uint8Array(Array(state.sendChunkSize).fill(i)))
                    .then(() => {
                    pump(i + 1);
                })
                    .catch(reject);
            })
                .catch(reject);
        }
        pump(0);
    });
}
//# sourceMappingURL=stream-test-helper.js.map