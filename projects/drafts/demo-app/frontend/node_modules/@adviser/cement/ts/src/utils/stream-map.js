export function streamMap(s, sm) {
    const state = { reader: s.getReader(), streamMap: sm, idx: 0 };
    return new ReadableStream({
        async pull(controller) {
            const { done, value } = await state.reader.read();
            if (done) {
                if (state.streamMap.Close) {
                    state.streamMap.Close();
                }
                controller.close();
                return;
            }
            const promiseOrU = state.streamMap.Map(value, state.idx++);
            let mapped;
            if (promiseOrU instanceof Promise || typeof promiseOrU.then === "function") {
                mapped = await promiseOrU;
            }
            else {
                mapped = promiseOrU;
            }
            controller.enqueue(mapped);
        },
    });
}
export async function devnull(a) {
    const reader = a.getReader();
    let cnt = 0;
    while (true) {
        const { done } = await reader.read();
        if (done) {
            break;
        }
        cnt++;
    }
    return cnt;
}
export function array2stream(a) {
    let i = 0;
    return new ReadableStream({
        pull(controller) {
            if (i >= a.length) {
                controller.close();
                return;
            }
            controller.enqueue(a[i]);
            i++;
        },
    });
}
export async function stream2array(a) {
    const ret = [];
    const reader = a.getReader();
    while (true) {
        const { done, value } = await reader.read();
        if (done) {
            break;
        }
        ret.push(value);
    }
    return ret;
}
//# sourceMappingURL=stream-map.js.map