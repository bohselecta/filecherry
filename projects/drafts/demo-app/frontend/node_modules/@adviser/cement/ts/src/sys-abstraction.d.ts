import { FileService } from "./file-service.js";
import { Env } from "./sys-env.js";
import { Time } from "./time.js";
export declare const TimeMode: {
    REAL: string;
    CONST: string;
    STEP: string;
};
export type TimeMode = (typeof TimeMode)[keyof typeof TimeMode];
export declare const RandomMode: {
    CONST: string;
    STEP: string;
    RANDOM: string;
};
export type RandomMode = (typeof RandomMode)[keyof typeof RandomMode];
export declare const IDMode: {
    UUID: string;
    CONST: string;
    STEP: string;
};
export type IDMode = (typeof IDMode)[keyof typeof IDMode];
export declare function String2TimeMode(s?: string): TimeMode;
export type VoidFunc = () => void | Promise<void>;
export interface SystemService {
    Env(): Env;
    Args(): string[];
    OnExit(hdl: VoidFunc): VoidFunc;
    Exit(code: number): void;
}
export interface SysAbstraction {
    Time(): Time;
    Stdout(): WritableStream<Uint8Array>;
    Stderr(): WritableStream<Uint8Array>;
    NextId(): string;
    Random0ToValue(value: number): number;
    System(): SystemService;
    FileSystem(): FileService;
}
//# sourceMappingURL=sys-abstraction.d.ts.map