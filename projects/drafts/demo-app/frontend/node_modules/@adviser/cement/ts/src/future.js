var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _Future_promise, _Future_resolveFn, _Future_rejectFn;
export class Future {
    constructor() {
        _Future_promise.set(this, void 0);
        _Future_resolveFn.set(this, () => {
            throw new Error("This Promise is not working as expected.");
        });
        _Future_rejectFn.set(this, () => {
            throw new Error("This Promise is not working as expected.");
        });
        __classPrivateFieldSet(this, _Future_promise, new Promise((resolve, reject) => {
            __classPrivateFieldSet(this, _Future_resolveFn, resolve, "f");
            __classPrivateFieldSet(this, _Future_rejectFn, reject, "f");
        }), "f");
    }
    async asPromise() {
        return __classPrivateFieldGet(this, _Future_promise, "f");
    }
    resolve(value) {
        __classPrivateFieldGet(this, _Future_resolveFn, "f").call(this, value);
    }
    reject(reason) {
        __classPrivateFieldGet(this, _Future_rejectFn, "f").call(this, reason);
    }
}
_Future_promise = new WeakMap(), _Future_resolveFn = new WeakMap(), _Future_rejectFn = new WeakMap();
//# sourceMappingURL=future.js.map