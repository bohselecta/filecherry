export declare abstract class Option<T> {
    static Some<T>(t: T): Option<T>;
    static None<T>(): Option<T>;
    static Is<T>(t: unknown): t is Option<T>;
    static From<T>(t?: T): Option<T>;
    IsNone(): boolean;
    IsSome(): boolean;
    Unwrap(): T;
    abstract is_none(): boolean;
    abstract is_some(): boolean;
    abstract unwrap(): T;
}
export declare class Some<T> extends Option<T> {
    private _t;
    constructor(_t: T);
    is_none(): boolean;
    is_some(): boolean;
    unwrap(): T;
}
export declare class None<T> extends Option<T> {
    is_none(): boolean;
    is_some(): boolean;
    unwrap(): T;
}
export type WithoutOption<T> = T extends Option<infer U> ? U : T;
//# sourceMappingURL=option.d.ts.map