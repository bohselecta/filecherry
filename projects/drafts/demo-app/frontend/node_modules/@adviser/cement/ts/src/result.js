export class Result {
    static Ok(t) {
        return new ResultOK(t);
    }
    static Err(t) {
        if (typeof t === "string") {
            return new ResultError(new Error(t));
        }
        if (Result.Is(t)) {
            if (t.is_ok()) {
                return new ResultError(new Error("Result Error is Ok"));
            }
            return t;
        }
        return new ResultError(t);
    }
    static Is(t) {
        if (!t) {
            return false;
        }
        if (t instanceof Result) {
            return true;
        }
        const rt = t;
        if ([typeof rt.is_ok, typeof rt.is_err, typeof rt.unwrap, typeof rt.unwrap_err].every((x) => x === "function")) {
            return true;
        }
        return false;
    }
    isOk() {
        return this.is_ok();
    }
    isErr() {
        return this.is_err();
    }
    Ok() {
        return this.unwrap();
    }
    Err() {
        return this.unwrap_err();
    }
}
export class ResultOK extends Result {
    constructor(t) {
        super();
        this._t = t;
    }
    is_ok() {
        return true;
    }
    is_err() {
        return false;
    }
    unwrap_err() {
        throw new Error("Result is Ok");
    }
    unwrap() {
        return this._t;
    }
}
export class ResultError extends Result {
    constructor(t) {
        super();
        this._error = t;
    }
    is_ok() {
        return false;
    }
    is_err() {
        return true;
    }
    unwrap() {
        throw new Error(`Result is Err: ${this._error}`);
    }
    unwrap_err() {
        return this._error;
    }
}
export function exception2Result(fn) {
    try {
        const res = fn();
        if (res instanceof Promise) {
            return res.then((value) => Result.Ok(value)).catch((e) => Result.Err(e));
        }
        return Result.Ok(res);
    }
    catch (e) {
        return Result.Err(e);
    }
}
//# sourceMappingURL=result.js.map