import { LevelHandlerImpl } from "../log-level-impl.js";
import { LoggerImpl } from "../logger-impl.js";
import { LogCollector } from "./log-write-stream.js";
export function MockLogger(params) {
    const lc = new LogCollector(params === null || params === void 0 ? void 0 : params.pass);
    let modNames = ["MockLogger"];
    if (typeof (params === null || params === void 0 ? void 0 : params.moduleName) === "string") {
        modNames = [params === null || params === void 0 ? void 0 : params.moduleName];
    }
    else if (Array.isArray(params === null || params === void 0 ? void 0 : params.moduleName)) {
        modNames = [...params.moduleName, ...modNames];
    }
    const logger = new LoggerImpl({
        out: lc,
        sys: params === null || params === void 0 ? void 0 : params.sys,
        levelHandler: new LevelHandlerImpl(),
    })
        .With()
        .Module(modNames[0])
        .Logger();
    if (!(params === null || params === void 0 ? void 0 : params.disableDebug)) {
        logger.SetDebug(...modNames);
    }
    return {
        logCollector: lc,
        logger,
    };
}
//# sourceMappingURL=mock-logger.js.map