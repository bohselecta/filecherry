function randomBytes(size) {
    const bytes = new Uint8Array(size);
    if (size > 0) {
        crypto.getRandomValues(bytes);
    }
    return bytes;
}
function digestSHA256(data) {
    return Promise.resolve(crypto.subtle.digest("SHA-256", data));
}
export function toCryptoRuntime(cryptoOpts = {}) {
    const runtime = {
        importKey: cryptoOpts.importKey || crypto.subtle.importKey.bind(crypto.subtle),
        exportKey: cryptoOpts.exportKey || crypto.subtle.exportKey.bind(crypto.subtle),
        encrypt: cryptoOpts.encrypt || crypto.subtle.encrypt.bind(crypto.subtle),
        decrypt: cryptoOpts.decrypt || crypto.subtle.decrypt.bind(crypto.subtle),
        randomBytes: cryptoOpts.randomBytes || randomBytes,
        digestSHA256: cryptoOpts.digestSHA256 || digestSHA256,
    };
    return runtime;
}
//# sourceMappingURL=crypto.js.map