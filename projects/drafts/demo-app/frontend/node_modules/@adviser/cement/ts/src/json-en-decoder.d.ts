import { Result } from "./result.js";
import { AsyncToEnDecoder, ToEnDecoder, TxtEnDecoder } from "./txt-en-decoder.js";
export interface JSONEnDecoder {
    stringify<T>(input: Result<T> | T, replacer?: (this: any, key: string, value: any) => any, space?: string | number): string;
    asyncStringify<T>(input: Promise<Result<T> | T>, replacer?: (this: any, key: string, value: any) => any, space?: string | number): Promise<string>;
    uint8ify<T>(input: Result<T> | T, replacer?: (this: any, key: string, value: any) => any, space?: string | number): Uint8Array;
    asyncUint8ify<T>(input: Promise<Result<T> | T>, replacer?: (this: any, key: string, value: any) => any, space?: string | number): Promise<Uint8Array>;
    parse<T>(input: ToEnDecoder, reviver?: (this: any, key: string, value: any) => any): Result<T>;
    asyncParse<T>(input: AsyncToEnDecoder, reviver?: (this: any, key: string, value: any) => any): Promise<Result<T>>;
}
export declare function JSONEnDecoderSingleton(txtEnde?: TxtEnDecoder): JSONEnDecoder;
//# sourceMappingURL=json-en-decoder.d.ts.map