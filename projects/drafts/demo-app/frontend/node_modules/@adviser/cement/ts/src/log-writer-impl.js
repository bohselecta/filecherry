export class LogWriterStream {
    constructor(out) {
        this._toFlush = [];
        this._flushIsRunning = false;
        this._flushDoneFns = [];
        this._out = out;
    }
    write(encoded) {
        const my = async () => {
            try {
                const writer = this._out.getWriter();
                await writer.ready;
                await writer.write(encoded);
                writer.releaseLock();
            }
            catch (err) {
                console.error("Chunk error:", err);
            }
        };
        this._toFlush.push(my);
        this._flush();
    }
    _flush(toFlush = undefined, done) {
        if (done) {
            this._flushDoneFns.push(done);
        }
        if (this._toFlush.length == 0) {
            this._flushIsRunning = false;
            this._flushDoneFns.forEach((fn) => fn());
            this._flushDoneFns = [];
            return;
        }
        if (!toFlush && this._toFlush.length == 1 && !this._flushIsRunning) {
            this._flushIsRunning = true;
        }
        else if (!toFlush) {
            return;
        }
        const my = this._toFlush.shift();
        my === null || my === void 0 ? void 0 : my().catch((e) => {
            console.error("Flush error:", e);
        }).finally(() => {
            this._flush(this._toFlush);
        });
    }
}
//# sourceMappingURL=log-writer-impl.js.map