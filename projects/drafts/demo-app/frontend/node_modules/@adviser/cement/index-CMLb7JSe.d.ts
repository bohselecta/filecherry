import { T as TxtEnDecoder, A as AsyncToUInt8, K as KeysParam, M as MsgFn, a as ToUInt8, b as ToUInt8Async, c as ToUInt8Plain, d as asyncCoerceIntoUint8, e as coerceIntoUint8, g as getParamsResult } from './get-params-result-4xHM5s4_.js';
import { S as StripCommand, s as stripper } from './stripper-BpBUUZ9p.js';

declare function rebufferArray(a: Uint8Array[], chunkSize: number): Promise<Uint8Array[]>;
declare function rebuffer(a: ReadableStream<Uint8Array>, chunkSize: number): ReadableStream<Uint8Array>;

interface StreamMap<T, U> {
    Map(s: T, idx: number): U | Promise<U>;
    readonly Close?: () => void;
}
declare function streamMap<T, U>(s: ReadableStream<T>, sm: StreamMap<T, U>): ReadableStream<U>;
declare function devnull<T>(a: ReadableStream<T>): Promise<number>;
declare function array2stream<T>(a: T[]): ReadableStream<T>;
declare function stream2array<T>(a: ReadableStream<T>): Promise<T[]>;

declare function stream2string(stream?: ReadableStream<Uint8Array> | null, maxSize?: number): Promise<string>;
declare function stream2uint8array(stream?: ReadableStream<Uint8Array> | null): Promise<Uint8Array>;

declare function string2stream(str: string, ende?: TxtEnDecoder): ReadableStream<Uint8Array>;
declare function uint8array2stream(str: Uint8Array): ReadableStream<Uint8Array>;

declare class ConsoleWriterStreamDefaultWriter implements WritableStreamDefaultWriter<Uint8Array> {
    private stream;
    readonly desiredSize: number | null;
    readonly decoder: TextDecoder;
    closed: Promise<undefined>;
    ready: Promise<undefined>;
    readonly _stream: ConsoleWriterStream;
    constructor(stream: ConsoleWriterStream);
    abort(reason?: any): Promise<void>;
    close(): Promise<void>;
    releaseLock(): void;
    write(chunk?: Uint8Array): Promise<void>;
}
declare class ConsoleWriterStream implements WritableStream<Uint8Array> {
    locked: boolean;
    _writer?: WritableStreamDefaultWriter<Uint8Array>;
    abort(reason?: any): Promise<void>;
    close(): Promise<void>;
    getWriter(): WritableStreamDefaultWriter<Uint8Array>;
}

declare class FanoutWriteStream implements WritableStreamDefaultWriter<Uint8Array> {
    readonly _writers: WritableStreamDefaultWriter<Uint8Array>[];
    readonly ready: Promise<undefined>;
    readonly closed: Promise<undefined>;
    readonly desiredSize: number | null;
    constructor(writers: WritableStreamDefaultWriter<Uint8Array>[]);
    abort(reason?: any): Promise<void>;
    close(): Promise<void>;
    releaseLock(): void;
    write(chunk?: Uint8Array): Promise<void>;
}

declare function toSortedObjectArray<T>(set?: T): Record<string, unknown>[];
declare function toSortedArray<T>(set?: T): [string, unknown][];
declare function toSortedObject<S, T extends NonNullable<S>>(set?: T): T;

declare function UInt8ArrayEqual(a: Uint8Array, b: Uint8Array): boolean;

declare const index_AsyncToUInt8: typeof AsyncToUInt8;
type index_ConsoleWriterStream = ConsoleWriterStream;
declare const index_ConsoleWriterStream: typeof ConsoleWriterStream;
type index_ConsoleWriterStreamDefaultWriter = ConsoleWriterStreamDefaultWriter;
declare const index_ConsoleWriterStreamDefaultWriter: typeof ConsoleWriterStreamDefaultWriter;
type index_FanoutWriteStream = FanoutWriteStream;
declare const index_FanoutWriteStream: typeof FanoutWriteStream;
declare const index_KeysParam: typeof KeysParam;
declare const index_MsgFn: typeof MsgFn;
type index_StreamMap<T, U> = StreamMap<T, U>;
declare const index_StripCommand: typeof StripCommand;
declare const index_ToUInt8: typeof ToUInt8;
declare const index_ToUInt8Async: typeof ToUInt8Async;
declare const index_ToUInt8Plain: typeof ToUInt8Plain;
declare const index_UInt8ArrayEqual: typeof UInt8ArrayEqual;
declare const index_array2stream: typeof array2stream;
declare const index_asyncCoerceIntoUint8: typeof asyncCoerceIntoUint8;
declare const index_coerceIntoUint8: typeof coerceIntoUint8;
declare const index_devnull: typeof devnull;
declare const index_getParamsResult: typeof getParamsResult;
declare const index_rebuffer: typeof rebuffer;
declare const index_rebufferArray: typeof rebufferArray;
declare const index_stream2array: typeof stream2array;
declare const index_stream2string: typeof stream2string;
declare const index_stream2uint8array: typeof stream2uint8array;
declare const index_streamMap: typeof streamMap;
declare const index_string2stream: typeof string2stream;
declare const index_stripper: typeof stripper;
declare const index_toSortedArray: typeof toSortedArray;
declare const index_toSortedObject: typeof toSortedObject;
declare const index_toSortedObjectArray: typeof toSortedObjectArray;
declare const index_uint8array2stream: typeof uint8array2stream;
declare namespace index {
  export { index_AsyncToUInt8 as AsyncToUInt8, index_ConsoleWriterStream as ConsoleWriterStream, index_ConsoleWriterStreamDefaultWriter as ConsoleWriterStreamDefaultWriter, index_FanoutWriteStream as FanoutWriteStream, index_KeysParam as KeysParam, index_MsgFn as MsgFn, type index_StreamMap as StreamMap, index_StripCommand as StripCommand, index_ToUInt8 as ToUInt8, index_ToUInt8Async as ToUInt8Async, index_ToUInt8Plain as ToUInt8Plain, index_UInt8ArrayEqual as UInt8ArrayEqual, index_array2stream as array2stream, index_asyncCoerceIntoUint8 as asyncCoerceIntoUint8, index_coerceIntoUint8 as coerceIntoUint8, index_devnull as devnull, index_getParamsResult as getParamsResult, index_rebuffer as rebuffer, index_rebufferArray as rebufferArray, index_stream2array as stream2array, index_stream2string as stream2string, index_stream2uint8array as stream2uint8array, index_streamMap as streamMap, index_string2stream as string2stream, index_stripper as stripper, index_toSortedArray as toSortedArray, index_toSortedObject as toSortedObject, index_toSortedObjectArray as toSortedObjectArray, index_uint8array2stream as uint8array2stream };
}

export { ConsoleWriterStreamDefaultWriter as C, FanoutWriteStream as F, type StreamMap as S, UInt8ArrayEqual as U, rebuffer as a, array2stream as b, stream2array as c, devnull as d, stream2string as e, stream2uint8array as f, string2stream as g, ConsoleWriterStream as h, index as i, toSortedArray as j, toSortedObject as k, rebufferArray as r, streamMap as s, toSortedObjectArray as t, uint8array2stream as u };
