{"version":3,"sources":["../../../src/deno/deno-file-service.ts","../../../src/deno/deno-sys-abstraction.ts"],"sourcesContent":["import * as path from \"node:path\";\nimport { FileService, NamedWritableStream } from \"../file-service.js\";\nimport { TxtEnDecoder, TxtEnDecoderSingleton } from \"../txt-en-decoder.js\";\n\nconst Deno = (globalThis as unknown as { Deno: unknown }).Deno as {\n  cwd(): string;\n  readFile(fname: string): Promise<Uint8Array>;\n  mkdir(base: string, options: { recursive: boolean }): Promise<void>;\n  open(fname: string, options: { write: boolean; create: boolean; truncate: boolean }): Promise<WritableStream<Uint8Array>>;\n};\n\nexport class DenoFileService implements FileService {\n  readonly baseDir: string;\n  readonly txtEnde: TxtEnDecoder;\n  constructor(baseDir: string = Deno.cwd(), txtEnde: TxtEnDecoder = TxtEnDecoderSingleton()) {\n    this.baseDir = this.abs(baseDir);\n    this.txtEnde = txtEnde;\n  }\n\n  // nodeImport(fname: string): string {\n  //   // console.log('nodeImport:'+ fname);\n  //   if (path.isAbsolute(fname)) {\n  //     return fname;\n  //   } else {\n  //     return \"./\" + path.normalize(fname);\n  //   }\n  // }\n\n  async readFileString(fname: string): Promise<string> {\n    return this.txtEnde.decode(await Deno.readFile(fname));\n  }\n\n  dirname(fname: string): string {\n    return path.dirname(fname);\n  }\n  basename(fname: string): string {\n    return path.basename(fname);\n  }\n\n  join(...paths: string[]): string {\n    return path.join(...paths);\n  }\n\n  relative(from: string, to?: string): string {\n    if (to === undefined) {\n      to = from;\n      from = Deno.cwd();\n    }\n    const ret = path.relative(from, to);\n    // console.log('relative:'+ from + \" -> \" + to +   \"= \" + ret);\n    return ret;\n  }\n\n  abs(fname: string): string {\n    if (path.isAbsolute(fname)) {\n      return fname;\n    } else {\n      const cwd = Deno.cwd();\n      return path.resolve(cwd, fname);\n    }\n  }\n\n  isAbsolute(fname: string): boolean {\n    return path.isAbsolute(fname);\n  }\n\n  async writeFileString(fname: string, content: string, ende: TxtEnDecoder = TxtEnDecoderSingleton()): Promise<void> {\n    const o = await this.create(fname);\n    const wr = o.stream.getWriter();\n    await wr.write(ende.encode(content));\n    await wr.close();\n  }\n\n  async create(fname: string): Promise<NamedWritableStream> {\n    let oName = fname;\n    if (!path.isAbsolute(fname)) {\n      oName = this.abs(fname);\n    }\n\n    const base = path.dirname(oName);\n    await Deno.mkdir(base, { recursive: true });\n    const out = await Deno.open(oName, {\n      write: true,\n      create: true,\n      truncate: true,\n    });\n    return {\n      name: oName,\n      stream: out,\n    };\n  }\n}\n","import {\n  ExitService,\n  ExitHandler,\n  BaseSysAbstraction,\n  WrapperSysAbstractionParams,\n  WrapperSysAbstraction,\n} from \"../base-sys-abstraction.js\";\nimport { SysAbstraction, SystemService, VoidFunc } from \"../sys-abstraction.js\";\nimport { Env, envFactory } from \"../sys-env.js\";\nimport { TxtEnDecoderSingleton } from \"../txt-en-decoder.js\";\n// import * as process from \"node:process\";\nimport { DenoFileService } from \"./deno-file-service.js\";\n\nconst Deno = (globalThis as unknown as { Deno: unknown }).Deno as {\n  addSignalListener(sig: string, hdl: () => void): void;\n  exit(code?: number): void;\n  args: string[];\n};\n\nexport class DenoExitServiceImpl implements ExitService {\n  constructor() {\n    globalThis.addEventListener(\"unhandledrejection\", (e) => {\n      e.preventDefault();\n      this.exit(19);\n    });\n    globalThis.addEventListener(\"error\", () => {\n      this.exit(19);\n    });\n    globalThis.addEventListener(\"uncaughtException\", () => {\n      this.exit(19);\n    });\n\n    // process.on(\"close\", () => {\n    //   this.exit(0);\n    // });\n    globalThis.addEventListener(\"unload\", () => {\n      this.exit(0);\n      // console.log('goodbye!');\n    });\n\n    // process.on(\"exit\", () => {\n    // });\n    Deno.addSignalListener(\"SIGQUIT\", () => {\n      this.exit(3);\n    });\n    Deno.addSignalListener(\"SIGINT\", () => {\n      this.exit(2);\n    });\n    Deno.addSignalListener(\"SIGTERM\", () => {\n      this.exit(9);\n    });\n  }\n  _exitHandlers: ExitHandler[] = [];\n  injectExitHandlers(hdls: ExitHandler[]): void {\n    // console.log(\"ExitService: injecting exit handlers\", hdls)\n    this._exitHandlers = hdls;\n  }\n  invoked = false;\n  readonly _handleExit = async (): Promise<void> => {\n    if (this.invoked) {\n      // console.error(\"ExitService: already invoked\");\n      return;\n    }\n    this.invoked = true;\n    for (const h of this._exitHandlers) {\n      try {\n        // console.log(`ExitService: calling handler ${h.id}`)\n        const ret = h.hdl();\n        // console.log(`ExitService: called handler ${h.id}`, ret)\n        if (typeof (ret as Promise<void>).then === \"function\") {\n          await ret;\n        }\n      } finally {\n        // ignore\n      }\n    }\n  };\n\n  exit(code: number): void {\n    // console.log(\"ExitService: exit called\", code)\n    this._handleExit()\n      .then(() => {\n        Deno.exit(code);\n      })\n      .catch((err) => {\n        // eslint-disable-next-line no-console\n        console.error(\"ExitService: failed to handle exit\", err);\n        Deno.exit(code);\n      });\n  }\n}\n\nexport class DenoSystemService implements SystemService {\n  static readonly _exitHandlers: ExitHandler[] = [];\n  readonly _exitService: ExitService = new DenoExitServiceImpl();\n  constructor() {\n    this._exitService.injectExitHandlers(DenoSystemService._exitHandlers);\n  }\n\n  Env(): Env {\n    return envFactory();\n  }\n\n  Args(): string[] {\n    return Deno.args;\n  }\n\n  OnExit(hdl: VoidFunc): VoidFunc {\n    const id = crypto.randomUUID();\n    DenoSystemService._exitHandlers.push({ hdl, id });\n    return () => {\n      const idx = DenoSystemService._exitHandlers.findIndex((h) => h.id === id);\n      if (idx >= 0) {\n        DenoSystemService._exitHandlers.splice(idx, 1);\n      }\n    };\n  }\n\n  Exit(code: number): void {\n    this._exitService.exit(code);\n  }\n}\n\nlet my: BaseSysAbstraction | undefined = undefined;\nexport function DenoSysAbstraction(param?: WrapperSysAbstractionParams): SysAbstraction {\n  if (!my) {\n    my = new BaseSysAbstraction({\n      TxtEnDecoder: param?.TxtEnDecoder || TxtEnDecoderSingleton(),\n      FileSystem: new DenoFileService(),\n      SystemService: new DenoSystemService(),\n    });\n  }\n  return new WrapperSysAbstraction(my, param);\n}\n"],"mappings":"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","names":["Deno"]}