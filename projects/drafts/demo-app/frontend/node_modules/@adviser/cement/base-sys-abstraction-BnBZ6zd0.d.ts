import { T as Time, a as TimeMode, R as RandomMode, I as IDMode, F as FileService, b as SystemService, V as VoidFunc, S as SysAbstraction } from './sys-abstraction-B0x6IE7r.js';
import { T as TxtEnDecoder } from './get-params-result-4xHM5s4_.js';

declare class SysTime extends Time {
    Now(): Date;
    Sleep(duration: number): Promise<void>;
}
declare class ConstTime extends Time {
    Now(): Date;
    Sleep(duration: number): Promise<void>;
}
declare class StepTime extends Time {
    _step: Date;
    readonly _start: Date;
    constructor();
    Now(steps?: number): Date;
    Sleep(duration: number): Promise<void>;
}
declare function TimeFactory(timeMode: TimeMode): Time;
declare class RandomService {
    readonly _mode: RandomMode;
    _step: number;
    constructor(mode: RandomMode);
    Random0ToValue(value: number): number;
}
declare class IdService {
    readonly _mode: IDMode;
    _step: number;
    constructor(mode?: IDMode);
    NextId(): string;
}
interface BaseSysAbstractionParams {
    readonly TxtEnDecoder: TxtEnDecoder;
    readonly FileSystem: FileService;
    readonly SystemService: SystemService;
}
interface ExitHandler {
    readonly hdl: VoidFunc;
    readonly id: string;
}
interface ExitService {
    injectExitHandlers(hdls: ExitHandler[]): void;
    exit(code: number): void;
}
declare class BaseSysAbstraction {
    readonly _time: SysTime;
    readonly _stdout: WritableStream<Uint8Array>;
    readonly _stderr: WritableStream<Uint8Array>;
    readonly _idService: IdService;
    readonly _randomService: RandomService;
    readonly _fileSystem: FileService;
    readonly _systemService: SystemService;
    readonly _txtEnDe: TxtEnDecoder;
    constructor(params: BaseSysAbstractionParams);
}
interface WrapperSysAbstractionParams {
    readonly TimeMode?: TimeMode;
    readonly IdMode?: IDMode;
    readonly Stdout?: WritableStream<Uint8Array>;
    readonly Stderr?: WritableStream<Uint8Array>;
    readonly RandomMode?: RandomMode;
    readonly FileSystem?: FileService;
    readonly SystemService?: SystemService;
    readonly TxtEnDecoder?: TxtEnDecoder;
}
declare class WrapperSysAbstraction implements SysAbstraction {
    readonly _time: Time;
    readonly _stdout: WritableStream<Uint8Array>;
    readonly _stderr: WritableStream<Uint8Array>;
    readonly _idService: IdService;
    readonly _randomService: RandomService;
    readonly _fileSystem: FileService;
    readonly _systemService: SystemService;
    constructor(base: BaseSysAbstraction, params?: WrapperSysAbstractionParams);
    Time(): Time;
    NextId(): string;
    Random0ToValue(value: number): number;
    Stdout(): WritableStream;
    Stderr(): WritableStream;
    System(): SystemService;
    FileSystem(): FileService;
}

export { type BaseSysAbstractionParams as B, ConstTime as C, type ExitService as E, IdService as I, RandomService as R, SysTime as S, TimeFactory as T, type WrapperSysAbstractionParams as W, type ExitHandler as a, StepTime as b, BaseSysAbstraction as c, WrapperSysAbstraction as d };
